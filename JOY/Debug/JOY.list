
JOY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ad8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005cd8  08005cd8  00015cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d80  08005d80  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08005d80  08005d80  00015d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d88  08005d88  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d88  08005d88  00015d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d8c  08005d8c  00015d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08005d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  200000c4  08005e54  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  08005e54  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  000200f2  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cfbf  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000208b  00000000  00000000  0002d137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c0  00000000  00000000  0002f1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000779  00000000  00000000  0002fb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002795c  00000000  00000000  00030301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d979  00000000  00000000  00057c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6960  00000000  00000000  000655d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002bb0  00000000  00000000  0015bf38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0015eae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000c4 	.word	0x200000c4
 800021c:	00000000 	.word	0x00000000
 8000220:	08005cc0 	.word	0x08005cc0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000c8 	.word	0x200000c8
 800023c:	08005cc0 	.word	0x08005cc0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fdd7 	bl	80011a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f902 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 fa4c 	bl	8000a94 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fc:	f000 fa2c 	bl	8000a58 <MX_DMA_Init>
  MX_ADC1_Init();
 8000600:	f000 f96a 	bl	80008d8 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000604:	f000 f9f8 	bl	80009f8 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000608:	f000 f9c6 	bl	8000998 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, VR, 2);
 800060c:	2202      	movs	r2, #2
 800060e:	496a      	ldr	r1, [pc, #424]	; (80007b8 <main+0x1cc>)
 8000610:	486a      	ldr	r0, [pc, #424]	; (80007bc <main+0x1d0>)
 8000612:	f000 ff9b 	bl	800154c <HAL_ADC_Start_DMA>
	HAL_UART_Receive_IT(&huart1, &light, 1);
 8000616:	2201      	movs	r2, #1
 8000618:	4969      	ldr	r1, [pc, #420]	; (80007c0 <main+0x1d4>)
 800061a:	486a      	ldr	r0, [pc, #424]	; (80007c4 <main+0x1d8>)
 800061c:	f003 fc6b 	bl	8003ef6 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		//controller
		HAL_ADC_Start_DMA(&hadc1, VR, 2);
 8000620:	2202      	movs	r2, #2
 8000622:	4965      	ldr	r1, [pc, #404]	; (80007b8 <main+0x1cc>)
 8000624:	4865      	ldr	r0, [pc, #404]	; (80007bc <main+0x1d0>)
 8000626:	f000 ff91 	bl	800154c <HAL_ADC_Start_DMA>

//		sprintf(str_vr1, "X : %d\r\n", VR[0]);
//		sprintf(str_vr2, "Y : %d\r\n", VR[1]);
		while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 800062a:	bf00      	nop
 800062c:	4b66      	ldr	r3, [pc, #408]	; (80007c8 <main+0x1dc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000636:	2b40      	cmp	r3, #64	; 0x40
 8000638:	d1f8      	bne.n	800062c <main+0x40>
		}
		HAL_UART_Transmit(&huart3, (uint8_t*) str_vr1, strlen(str_vr1), 1000);
 800063a:	4864      	ldr	r0, [pc, #400]	; (80007cc <main+0x1e0>)
 800063c:	f7ff fe00 	bl	8000240 <strlen>
 8000640:	4603      	mov	r3, r0
 8000642:	b29a      	uxth	r2, r3
 8000644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000648:	4960      	ldr	r1, [pc, #384]	; (80007cc <main+0x1e0>)
 800064a:	485f      	ldr	r0, [pc, #380]	; (80007c8 <main+0x1dc>)
 800064c:	f003 fbd0 	bl	8003df0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) str_vr2, strlen(str_vr2), 1000);
 8000650:	485f      	ldr	r0, [pc, #380]	; (80007d0 <main+0x1e4>)
 8000652:	f7ff fdf5 	bl	8000240 <strlen>
 8000656:	4603      	mov	r3, r0
 8000658:	b29a      	uxth	r2, r3
 800065a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065e:	495c      	ldr	r1, [pc, #368]	; (80007d0 <main+0x1e4>)
 8000660:	4859      	ldr	r0, [pc, #356]	; (80007c8 <main+0x1dc>)
 8000662:	f003 fbc5 	bl	8003df0 <HAL_UART_Transmit>

		if (VR[0] >= 1900 && VR[1] >= 1900 && VR[0] <= 2200 && VR[1] <= 2200) {
 8000666:	4b54      	ldr	r3, [pc, #336]	; (80007b8 <main+0x1cc>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f240 726b 	movw	r2, #1899	; 0x76b
 800066e:	4293      	cmp	r3, r2
 8000670:	d91c      	bls.n	80006ac <main+0xc0>
 8000672:	4b51      	ldr	r3, [pc, #324]	; (80007b8 <main+0x1cc>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	f240 726b 	movw	r2, #1899	; 0x76b
 800067a:	4293      	cmp	r3, r2
 800067c:	d916      	bls.n	80006ac <main+0xc0>
 800067e:	4b4e      	ldr	r3, [pc, #312]	; (80007b8 <main+0x1cc>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f640 0298 	movw	r2, #2200	; 0x898
 8000686:	4293      	cmp	r3, r2
 8000688:	d810      	bhi.n	80006ac <main+0xc0>
 800068a:	4b4b      	ldr	r3, [pc, #300]	; (80007b8 <main+0x1cc>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	f640 0298 	movw	r2, #2200	; 0x898
 8000692:	4293      	cmp	r3, r2
 8000694:	d80a      	bhi.n	80006ac <main+0xc0>
			strcpy(state, "stop");
 8000696:	4b4f      	ldr	r3, [pc, #316]	; (80007d4 <main+0x1e8>)
 8000698:	4a4f      	ldr	r2, [pc, #316]	; (80007d8 <main+0x1ec>)
 800069a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800069e:	6018      	str	r0, [r3, #0]
 80006a0:	3304      	adds	r3, #4
 80006a2:	7019      	strb	r1, [r3, #0]
			rxData = 66;
 80006a4:	4b4d      	ldr	r3, [pc, #308]	; (80007dc <main+0x1f0>)
 80006a6:	2242      	movs	r2, #66	; 0x42
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	e04f      	b.n	800074c <main+0x160>

		} else if (VR[0] >= 1300 && VR[0] <= 2800 && VR[1] > 2100) {
 80006ac:	4b42      	ldr	r3, [pc, #264]	; (80007b8 <main+0x1cc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f240 5213 	movw	r2, #1299	; 0x513
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d914      	bls.n	80006e2 <main+0xf6>
 80006b8:	4b3f      	ldr	r3, [pc, #252]	; (80007b8 <main+0x1cc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80006c0:	d80f      	bhi.n	80006e2 <main+0xf6>
 80006c2:	4b3d      	ldr	r3, [pc, #244]	; (80007b8 <main+0x1cc>)
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	f640 0234 	movw	r2, #2100	; 0x834
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d909      	bls.n	80006e2 <main+0xf6>
			strcpy(state, "forward");
 80006ce:	4b41      	ldr	r3, [pc, #260]	; (80007d4 <main+0x1e8>)
 80006d0:	4a43      	ldr	r2, [pc, #268]	; (80007e0 <main+0x1f4>)
 80006d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d6:	e883 0003 	stmia.w	r3, {r0, r1}
			rxData = 87;
 80006da:	4b40      	ldr	r3, [pc, #256]	; (80007dc <main+0x1f0>)
 80006dc:	2257      	movs	r2, #87	; 0x57
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	e034      	b.n	800074c <main+0x160>

		} else if (VR[0] >= 1300 && VR[0] <= 2800 && VR[1] < 2000) {
 80006e2:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <main+0x1cc>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f240 5213 	movw	r2, #1299	; 0x513
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d912      	bls.n	8000714 <main+0x128>
 80006ee:	4b32      	ldr	r3, [pc, #200]	; (80007b8 <main+0x1cc>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80006f6:	d80d      	bhi.n	8000714 <main+0x128>
 80006f8:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <main+0x1cc>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000700:	d208      	bcs.n	8000714 <main+0x128>
			strcpy(state, "backward");
 8000702:	4b34      	ldr	r3, [pc, #208]	; (80007d4 <main+0x1e8>)
 8000704:	4a37      	ldr	r2, [pc, #220]	; (80007e4 <main+0x1f8>)
 8000706:	ca07      	ldmia	r2, {r0, r1, r2}
 8000708:	c303      	stmia	r3!, {r0, r1}
 800070a:	701a      	strb	r2, [r3, #0]
			rxData = 83;
 800070c:	4b33      	ldr	r3, [pc, #204]	; (80007dc <main+0x1f0>)
 800070e:	2253      	movs	r2, #83	; 0x53
 8000710:	701a      	strb	r2, [r3, #0]
 8000712:	e01b      	b.n	800074c <main+0x160>

		} else if (VR[0] < 2000) {
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <main+0x1cc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800071c:	d208      	bcs.n	8000730 <main+0x144>
			strcpy(state, "turnleft");
 800071e:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <main+0x1e8>)
 8000720:	4a31      	ldr	r2, [pc, #196]	; (80007e8 <main+0x1fc>)
 8000722:	ca07      	ldmia	r2, {r0, r1, r2}
 8000724:	c303      	stmia	r3!, {r0, r1}
 8000726:	701a      	strb	r2, [r3, #0]
			rxData = 65;
 8000728:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <main+0x1f0>)
 800072a:	2241      	movs	r2, #65	; 0x41
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	e00d      	b.n	800074c <main+0x160>

		} else if (VR[0] > 2100) {
 8000730:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <main+0x1cc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f640 0234 	movw	r2, #2100	; 0x834
 8000738:	4293      	cmp	r3, r2
 800073a:	d907      	bls.n	800074c <main+0x160>
			strcpy(state, "turnright");
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <main+0x1e8>)
 800073e:	4a2b      	ldr	r2, [pc, #172]	; (80007ec <main+0x200>)
 8000740:	ca07      	ldmia	r2, {r0, r1, r2}
 8000742:	c303      	stmia	r3!, {r0, r1}
 8000744:	801a      	strh	r2, [r3, #0]
			rxData = 68;
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <main+0x1f0>)
 8000748:	2244      	movs	r2, #68	; 0x44
 800074a:	701a      	strb	r2, [r3, #0]
		}
//		if(HAL_GPIO_ReadPin(interupt_GPIO_Port, interupt_Pin) == 0)
//				{
//							rxData = 77;
//				}
				sprintf(str_vr3, "X : %d ,Y : %d  State: " , VR[0], VR[1]);
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <main+0x1cc>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <main+0x1cc>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	4926      	ldr	r1, [pc, #152]	; (80007f0 <main+0x204>)
 8000756:	4827      	ldr	r0, [pc, #156]	; (80007f4 <main+0x208>)
 8000758:	f004 fe0e 	bl	8005378 <siprintf>
				HAL_UART_Transmit(&huart3,  light, 1, 1000);
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <main+0x1d4>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	4619      	mov	r1, r3
 8000762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000766:	2201      	movs	r2, #1
 8000768:	4817      	ldr	r0, [pc, #92]	; (80007c8 <main+0x1dc>)
 800076a:	f003 fb41 	bl	8003df0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &str_vr3, strlen(str_vr3), 1000);
 800076e:	4821      	ldr	r0, [pc, #132]	; (80007f4 <main+0x208>)
 8000770:	f7ff fd66 	bl	8000240 <strlen>
 8000774:	4603      	mov	r3, r0
 8000776:	b29a      	uxth	r2, r3
 8000778:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077c:	491d      	ldr	r1, [pc, #116]	; (80007f4 <main+0x208>)
 800077e:	4812      	ldr	r0, [pc, #72]	; (80007c8 <main+0x1dc>)
 8000780:	f003 fb36 	bl	8003df0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3,  &rxData, 1, 1000);
 8000784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000788:	2201      	movs	r2, #1
 800078a:	4914      	ldr	r1, [pc, #80]	; (80007dc <main+0x1f0>)
 800078c:	480e      	ldr	r0, [pc, #56]	; (80007c8 <main+0x1dc>)
 800078e:	f003 fb2f 	bl	8003df0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, "\r\n", 2, 1000);
 8000792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000796:	2202      	movs	r2, #2
 8000798:	4917      	ldr	r1, [pc, #92]	; (80007f8 <main+0x20c>)
 800079a:	480b      	ldr	r0, [pc, #44]	; (80007c8 <main+0x1dc>)
 800079c:	f003 fb28 	bl	8003df0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,  &rxData, 1, 1000);
 80007a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a4:	2201      	movs	r2, #1
 80007a6:	490d      	ldr	r1, [pc, #52]	; (80007dc <main+0x1f0>)
 80007a8:	4806      	ldr	r0, [pc, #24]	; (80007c4 <main+0x1d8>)
 80007aa:	f003 fb21 	bl	8003df0 <HAL_UART_Transmit>



		HAL_Delay(250);
 80007ae:	20fa      	movs	r0, #250	; 0xfa
 80007b0:	f000 fd54 	bl	800125c <HAL_Delay>
		HAL_ADC_Start_DMA(&hadc1, VR, 2);
 80007b4:	e734      	b.n	8000620 <main+0x34>
 80007b6:	bf00      	nop
 80007b8:	20000298 	.word	0x20000298
 80007bc:	200000e0 	.word	0x200000e0
 80007c0:	20000001 	.word	0x20000001
 80007c4:	20000188 	.word	0x20000188
 80007c8:	20000210 	.word	0x20000210
 80007cc:	200002a0 	.word	0x200002a0
 80007d0:	20000304 	.word	0x20000304
 80007d4:	20000004 	.word	0x20000004
 80007d8:	08005cd8 	.word	0x08005cd8
 80007dc:	20000000 	.word	0x20000000
 80007e0:	08005ce0 	.word	0x08005ce0
 80007e4:	08005ce8 	.word	0x08005ce8
 80007e8:	08005cf4 	.word	0x08005cf4
 80007ec:	08005d00 	.word	0x08005d00
 80007f0:	08005d0c 	.word	0x08005d0c
 80007f4:	20000368 	.word	0x20000368
 80007f8:	08005d24 	.word	0x08005d24

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	; 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2234      	movs	r2, #52	; 0x34
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f004 fdd4 	bl	80053b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <SystemClock_Config+0xd4>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	4a2a      	ldr	r2, [pc, #168]	; (80008d0 <SystemClock_Config+0xd4>)
 8000826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082a:	6413      	str	r3, [r2, #64]	; 0x40
 800082c:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <SystemClock_Config+0xd4>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000838:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <SystemClock_Config+0xd8>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a25      	ldr	r2, [pc, #148]	; (80008d4 <SystemClock_Config+0xd8>)
 800083e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <SystemClock_Config+0xd8>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000850:	2302      	movs	r3, #2
 8000852:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000854:	2301      	movs	r3, #1
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000858:	2310      	movs	r3, #16
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085c:	2302      	movs	r3, #2
 800085e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000860:	2300      	movs	r3, #0
 8000862:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000864:	2308      	movs	r3, #8
 8000866:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000868:	23d8      	movs	r3, #216	; 0xd8
 800086a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086c:	2302      	movs	r3, #2
 800086e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000870:	2302      	movs	r3, #2
 8000872:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000874:	2302      	movs	r3, #2
 8000876:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4618      	mov	r0, r3
 800087e:	f002 f9ad 	bl	8002bdc <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000888:	f000 fa42 	bl	8000d10 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800088c:	f002 f956 	bl	8002b3c <HAL_PWREx_EnableOverDrive>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000896:	f000 fa3b 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089a:	230f      	movs	r3, #15
 800089c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089e:	2302      	movs	r3, #2
 80008a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	2107      	movs	r1, #7
 80008b8:	4618      	mov	r0, r3
 80008ba:	f002 fc3d 	bl	8003138 <HAL_RCC_ClockConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80008c4:	f000 fa24 	bl	8000d10 <Error_Handler>
  }
}
 80008c8:	bf00      	nop
 80008ca:	3750      	adds	r7, #80	; 0x50
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40007000 	.word	0x40007000

080008d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008de:	463b      	mov	r3, r7
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008ea:	4b28      	ldr	r3, [pc, #160]	; (800098c <MX_ADC1_Init+0xb4>)
 80008ec:	4a28      	ldr	r2, [pc, #160]	; (8000990 <MX_ADC1_Init+0xb8>)
 80008ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008f0:	4b26      	ldr	r3, [pc, #152]	; (800098c <MX_ADC1_Init+0xb4>)
 80008f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008f8:	4b24      	ldr	r3, [pc, #144]	; (800098c <MX_ADC1_Init+0xb4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008fe:	4b23      	ldr	r3, [pc, #140]	; (800098c <MX_ADC1_Init+0xb4>)
 8000900:	2201      	movs	r2, #1
 8000902:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <MX_ADC1_Init+0xb4>)
 8000906:	2201      	movs	r2, #1
 8000908:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <MX_ADC1_Init+0xb4>)
 800090c:	2200      	movs	r2, #0
 800090e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000912:	4b1e      	ldr	r3, [pc, #120]	; (800098c <MX_ADC1_Init+0xb4>)
 8000914:	2200      	movs	r2, #0
 8000916:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000918:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_ADC1_Init+0xb4>)
 800091a:	4a1e      	ldr	r2, [pc, #120]	; (8000994 <MX_ADC1_Init+0xbc>)
 800091c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800091e:	4b1b      	ldr	r3, [pc, #108]	; (800098c <MX_ADC1_Init+0xb4>)
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000924:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_ADC1_Init+0xb4>)
 8000926:	2202      	movs	r2, #2
 8000928:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <MX_ADC1_Init+0xb4>)
 800092c:	2201      	movs	r2, #1
 800092e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000932:	4b16      	ldr	r3, [pc, #88]	; (800098c <MX_ADC1_Init+0xb4>)
 8000934:	2201      	movs	r2, #1
 8000936:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000938:	4814      	ldr	r0, [pc, #80]	; (800098c <MX_ADC1_Init+0xb4>)
 800093a:	f000 fcb3 	bl	80012a4 <HAL_ADC_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000944:	f000 f9e4 	bl	8000d10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000948:	2304      	movs	r3, #4
 800094a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800094c:	2301      	movs	r3, #1
 800094e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000950:	2305      	movs	r3, #5
 8000952:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000954:	463b      	mov	r3, r7
 8000956:	4619      	mov	r1, r3
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <MX_ADC1_Init+0xb4>)
 800095a:	f000 ff19 	bl	8001790 <HAL_ADC_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000964:	f000 f9d4 	bl	8000d10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000968:	2305      	movs	r3, #5
 800096a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800096c:	2302      	movs	r3, #2
 800096e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_ADC1_Init+0xb4>)
 8000976:	f000 ff0b 	bl	8001790 <HAL_ADC_ConfigChannel>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000980:	f000 f9c6 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200000e0 	.word	0x200000e0
 8000990:	40012000 	.word	0x40012000
 8000994:	0f000001 	.word	0x0f000001

08000998 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 800099e:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <MX_USART1_UART_Init+0x5c>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USART1_UART_Init+0x58>)
 80009dc:	f003 f9ba 	bl	8003d54 <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009e6:	f000 f993 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000188 	.word	0x20000188
 80009f4:	40011000 	.word	0x40011000

080009f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 80009fe:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <MX_USART3_UART_Init+0x5c>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a3c:	f003 f98a 	bl	8003d54 <HAL_UART_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a46:	f000 f963 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000210 	.word	0x20000210
 8000a54:	40004800 	.word	0x40004800

08000a58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_DMA_Init+0x38>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <MX_DMA_Init+0x38>)
 8000a64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_DMA_Init+0x38>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2038      	movs	r0, #56	; 0x38
 8000a7c:	f001 fa3f 	bl	8001efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a80:	2038      	movs	r0, #56	; 0x38
 8000a82:	f001 fa58 	bl	8001f36 <HAL_NVIC_EnableIRQ>

}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08c      	sub	sp, #48	; 0x30
 8000a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	4b56      	ldr	r3, [pc, #344]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a55      	ldr	r2, [pc, #340]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b53      	ldr	r3, [pc, #332]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	61bb      	str	r3, [r7, #24]
 8000ac0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b50      	ldr	r3, [pc, #320]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a4f      	ldr	r2, [pc, #316]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b4d      	ldr	r3, [pc, #308]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ada:	4b4a      	ldr	r3, [pc, #296]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a49      	ldr	r2, [pc, #292]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000ae0:	f043 0320 	orr.w	r3, r3, #32
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b47      	ldr	r3, [pc, #284]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0320 	and.w	r3, r3, #32
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000af2:	4b44      	ldr	r3, [pc, #272]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a43      	ldr	r2, [pc, #268]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b41      	ldr	r3, [pc, #260]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	4b3e      	ldr	r3, [pc, #248]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a3d      	ldr	r2, [pc, #244]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b3b      	ldr	r3, [pc, #236]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	4b38      	ldr	r3, [pc, #224]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a37      	ldr	r2, [pc, #220]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b35      	ldr	r3, [pc, #212]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, red_Pin|green_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2109      	movs	r1, #9
 8000b3e:	4832      	ldr	r0, [pc, #200]	; (8000c08 <MX_GPIO_Init+0x174>)
 8000b40:	f001 ffca 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : red_Pin green_Pin */
  GPIO_InitStruct.Pin = red_Pin|green_Pin;
 8000b44:	2309      	movs	r3, #9
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	482b      	ldr	r0, [pc, #172]	; (8000c08 <MX_GPIO_Init+0x174>)
 8000b5c:	f001 fe10 	bl	8002780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b64:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4825      	ldr	r0, [pc, #148]	; (8000c0c <MX_GPIO_Init+0x178>)
 8000b76:	f001 fe03 	bl	8002780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4820      	ldr	r0, [pc, #128]	; (8000c10 <MX_GPIO_Init+0x17c>)
 8000b90:	f001 fdf6 	bl	8002780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	481a      	ldr	r0, [pc, #104]	; (8000c14 <MX_GPIO_Init+0x180>)
 8000baa:	f001 fde9 	bl	8002780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000bae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4814      	ldr	r0, [pc, #80]	; (8000c18 <MX_GPIO_Init+0x184>)
 8000bc6:	f001 fddb 	bl	8002780 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2101      	movs	r1, #1
 8000bce:	2006      	movs	r0, #6
 8000bd0:	f001 f995 	bl	8001efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bd4:	2006      	movs	r0, #6
 8000bd6:	f001 f9ae 	bl	8001f36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2101      	movs	r1, #1
 8000bde:	2007      	movs	r0, #7
 8000be0:	f001 f98d 	bl	8001efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000be4:	2007      	movs	r0, #7
 8000be6:	f001 f9a6 	bl	8001f36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2101      	movs	r1, #1
 8000bee:	2028      	movs	r0, #40	; 0x28
 8000bf0:	f001 f985 	bl	8001efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bf4:	2028      	movs	r0, #40	; 0x28
 8000bf6:	f001 f99e 	bl	8001f36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3730      	adds	r7, #48	; 0x30
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020800 	.word	0x40020800
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40021400 	.word	0x40021400
 8000c14:	40021800 	.word	0x40021800
 8000c18:	40020400 	.word	0x40020400

08000c1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback ( uint16_t GPIO_Pin)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_0)
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d111      	bne.n	8000c50 <HAL_GPIO_EXTI_Callback+0x34>
	{
		rxData = 77;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000c2e:	224d      	movs	r2, #77	; 0x4d
 8000c30:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1,  &rxData, 1, 1000);
 8000c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c36:	2201      	movs	r2, #1
 8000c38:	4913      	ldr	r1, [pc, #76]	; (8000c88 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000c3a:	4814      	ldr	r0, [pc, #80]	; (8000c8c <HAL_GPIO_EXTI_Callback+0x70>)
 8000c3c:	f003 f8d8 	bl	8003df0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3,  &rxData, 1, 1000);
 8000c40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c44:	2201      	movs	r2, #1
 8000c46:	4910      	ldr	r1, [pc, #64]	; (8000c88 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000c48:	4811      	ldr	r0, [pc, #68]	; (8000c90 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c4a:	f003 f8d1 	bl	8003df0 <HAL_UART_Transmit>
 8000c4e:	e013      	b.n	8000c78 <HAL_GPIO_EXTI_Callback+0x5c>

	}
	else if(GPIO_Pin==GPIO_PIN_1)
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d110      	bne.n	8000c78 <HAL_GPIO_EXTI_Callback+0x5c>
		{
			rxData = 78;
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000c58:	224e      	movs	r2, #78	; 0x4e
 8000c5a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,  &rxData, 1, 1000);
 8000c5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c60:	2201      	movs	r2, #1
 8000c62:	4909      	ldr	r1, [pc, #36]	; (8000c88 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000c64:	4809      	ldr	r0, [pc, #36]	; (8000c8c <HAL_GPIO_EXTI_Callback+0x70>)
 8000c66:	f003 f8c3 	bl	8003df0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3,  &rxData, 1, 1000);
 8000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4905      	ldr	r1, [pc, #20]	; (8000c88 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000c72:	4807      	ldr	r0, [pc, #28]	; (8000c90 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c74:	f003 f8bc 	bl	8003df0 <HAL_UART_Transmit>

		}


HAL_Delay(300);
 8000c78:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c7c:	f000 faee 	bl	800125c <HAL_Delay>
//

}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	20000188 	.word	0x20000188
 8000c90:	20000210 	.word	0x20000210

08000c94 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	if (huart->Instance == huart1.Instance) {
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <HAL_UART_RxCpltCallback+0x68>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d118      	bne.n	8000cda <HAL_UART_RxCpltCallback+0x46>
		if(light==0)
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_UART_RxCpltCallback+0x6c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d10a      	bne.n	8000cc6 <HAL_UART_RxCpltCallback+0x32>
		{
			HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, 1);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	4813      	ldr	r0, [pc, #76]	; (8000d04 <HAL_UART_RxCpltCallback+0x70>)
 8000cb6:	f001 ff0f 	bl	8002ad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green_GPIO_Port, green_Pin, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	4811      	ldr	r0, [pc, #68]	; (8000d04 <HAL_UART_RxCpltCallback+0x70>)
 8000cc0:	f001 ff0a 	bl	8002ad8 <HAL_GPIO_WritePin>
 8000cc4:	e009      	b.n	8000cda <HAL_UART_RxCpltCallback+0x46>
		}
		else{
			HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2101      	movs	r1, #1
 8000cca:	480e      	ldr	r0, [pc, #56]	; (8000d04 <HAL_UART_RxCpltCallback+0x70>)
 8000ccc:	f001 ff04 	bl	8002ad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green_GPIO_Port, green_Pin, 1);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2108      	movs	r1, #8
 8000cd4:	480b      	ldr	r0, [pc, #44]	; (8000d04 <HAL_UART_RxCpltCallback+0x70>)
 8000cd6:	f001 feff 	bl	8002ad8 <HAL_GPIO_WritePin>
		}
	}

	sprintf(str_vr1, "%d" , light);
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_UART_RxCpltCallback+0x6c>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4909      	ldr	r1, [pc, #36]	; (8000d08 <HAL_UART_RxCpltCallback+0x74>)
 8000ce2:	480a      	ldr	r0, [pc, #40]	; (8000d0c <HAL_UART_RxCpltCallback+0x78>)
 8000ce4:	f004 fb48 	bl	8005378 <siprintf>
	HAL_UART_Receive_IT(&huart1, &light, 1);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4905      	ldr	r1, [pc, #20]	; (8000d00 <HAL_UART_RxCpltCallback+0x6c>)
 8000cec:	4803      	ldr	r0, [pc, #12]	; (8000cfc <HAL_UART_RxCpltCallback+0x68>)
 8000cee:	f003 f902 	bl	8003ef6 <HAL_UART_Receive_IT>



}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000188 	.word	0x20000188
 8000d00:	20000001 	.word	0x20000001
 8000d04:	40020800 	.word	0x40020800
 8000d08:	08005d28 	.word	0x08005d28
 8000d0c:	200002a0 	.word	0x200002a0

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_MspInit+0x44>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <HAL_MspInit+0x44>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_MspInit+0x44>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_MspInit+0x44>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_MspInit+0x44>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_MspInit+0x44>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8000d52:	2006      	movs	r0, #6
 8000d54:	f001 f8c8 	bl	8001ee8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800

08000d64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a31      	ldr	r2, [pc, #196]	; (8000e48 <HAL_ADC_MspInit+0xe4>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d15b      	bne.n	8000e3e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d86:	4b31      	ldr	r3, [pc, #196]	; (8000e4c <HAL_ADC_MspInit+0xe8>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	4a30      	ldr	r2, [pc, #192]	; (8000e4c <HAL_ADC_MspInit+0xe8>)
 8000d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d90:	6453      	str	r3, [r2, #68]	; 0x44
 8000d92:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <HAL_ADC_MspInit+0xe8>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <HAL_ADC_MspInit+0xe8>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a2a      	ldr	r2, [pc, #168]	; (8000e4c <HAL_ADC_MspInit+0xe8>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <HAL_ADC_MspInit+0xe8>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000db6:	2330      	movs	r3, #48	; 0x30
 8000db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4821      	ldr	r0, [pc, #132]	; (8000e50 <HAL_ADC_MspInit+0xec>)
 8000dca:	f001 fcd9 	bl	8002780 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <HAL_ADC_MspInit+0xf0>)
 8000dd0:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <HAL_ADC_MspInit+0xf4>)
 8000dd2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <HAL_ADC_MspInit+0xf0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <HAL_ADC_MspInit+0xf0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <HAL_ADC_MspInit+0xf0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <HAL_ADC_MspInit+0xf0>)
 8000de8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <HAL_ADC_MspInit+0xf0>)
 8000df0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000df4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <HAL_ADC_MspInit+0xf0>)
 8000df8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dfc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <HAL_ADC_MspInit+0xf0>)
 8000e00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <HAL_ADC_MspInit+0xf0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_ADC_MspInit+0xf0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e12:	4810      	ldr	r0, [pc, #64]	; (8000e54 <HAL_ADC_MspInit+0xf0>)
 8000e14:	f001 f8aa 	bl	8001f6c <HAL_DMA_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000e1e:	f7ff ff77 	bl	8000d10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <HAL_ADC_MspInit+0xf0>)
 8000e26:	639a      	str	r2, [r3, #56]	; 0x38
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_ADC_MspInit+0xf0>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	2012      	movs	r0, #18
 8000e34:	f001 f863 	bl	8001efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e38:	2012      	movs	r0, #18
 8000e3a:	f001 f87c 	bl	8001f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40012000 	.word	0x40012000
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000
 8000e54:	20000128 	.word	0x20000128
 8000e58:	40026410 	.word	0x40026410

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0b0      	sub	sp, #192	; 0xc0
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	2290      	movs	r2, #144	; 0x90
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f004 fa9b 	bl	80053b8 <memset>
  if(huart->Instance==USART1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a55      	ldr	r2, [pc, #340]	; (8000fdc <HAL_UART_MspInit+0x180>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d159      	bne.n	8000f40 <HAL_UART_MspInit+0xe4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e8c:	2340      	movs	r3, #64	; 0x40
 8000e8e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e90:	2300      	movs	r3, #0
 8000e92:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f002 fb33 	bl	8003504 <HAL_RCCEx_PeriphCLKConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ea4:	f7ff ff34 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ea8:	4b4d      	ldr	r3, [pc, #308]	; (8000fe0 <HAL_UART_MspInit+0x184>)
 8000eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eac:	4a4c      	ldr	r2, [pc, #304]	; (8000fe0 <HAL_UART_MspInit+0x184>)
 8000eae:	f043 0310 	orr.w	r3, r3, #16
 8000eb2:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb4:	4b4a      	ldr	r3, [pc, #296]	; (8000fe0 <HAL_UART_MspInit+0x184>)
 8000eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb8:	f003 0310 	and.w	r3, r3, #16
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	4b47      	ldr	r3, [pc, #284]	; (8000fe0 <HAL_UART_MspInit+0x184>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	4a46      	ldr	r2, [pc, #280]	; (8000fe0 <HAL_UART_MspInit+0x184>)
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	6313      	str	r3, [r2, #48]	; 0x30
 8000ecc:	4b44      	ldr	r3, [pc, #272]	; (8000fe0 <HAL_UART_MspInit+0x184>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ed8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000edc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000efc:	4619      	mov	r1, r3
 8000efe:	4839      	ldr	r0, [pc, #228]	; (8000fe4 <HAL_UART_MspInit+0x188>)
 8000f00:	f001 fc3e 	bl	8002780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f04:	2340      	movs	r3, #64	; 0x40
 8000f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f26:	4619      	mov	r1, r3
 8000f28:	482e      	ldr	r0, [pc, #184]	; (8000fe4 <HAL_UART_MspInit+0x188>)
 8000f2a:	f001 fc29 	bl	8002780 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	2025      	movs	r0, #37	; 0x25
 8000f34:	f000 ffe3 	bl	8001efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f38:	2025      	movs	r0, #37	; 0x25
 8000f3a:	f000 fffc 	bl	8001f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f3e:	e049      	b.n	8000fd4 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART3)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a28      	ldr	r2, [pc, #160]	; (8000fe8 <HAL_UART_MspInit+0x18c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d144      	bne.n	8000fd4 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f4e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f002 fad3 	bl	8003504 <HAL_RCCEx_PeriphCLKConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_UART_MspInit+0x10c>
      Error_Handler();
 8000f64:	f7ff fed4 	bl	8000d10 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f68:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <HAL_UART_MspInit+0x184>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	4a1c      	ldr	r2, [pc, #112]	; (8000fe0 <HAL_UART_MspInit+0x184>)
 8000f6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f72:	6413      	str	r3, [r2, #64]	; 0x40
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <HAL_UART_MspInit+0x184>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_UART_MspInit+0x184>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	4a16      	ldr	r2, [pc, #88]	; (8000fe0 <HAL_UART_MspInit+0x184>)
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_UART_MspInit+0x184>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480b      	ldr	r0, [pc, #44]	; (8000fec <HAL_UART_MspInit+0x190>)
 8000fc0:	f001 fbde 	bl	8002780 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2027      	movs	r0, #39	; 0x27
 8000fca:	f000 ff98 	bl	8001efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fce:	2027      	movs	r0, #39	; 0x27
 8000fd0:	f000 ffb1 	bl	8001f36 <HAL_NVIC_EnableIRQ>
}
 8000fd4:	bf00      	nop
 8000fd6:	37c0      	adds	r7, #192	; 0xc0
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40011000 	.word	0x40011000
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020400 	.word	0x40020400
 8000fe8:	40004800 	.word	0x40004800
 8000fec:	40020c00 	.word	0x40020c00

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <NMI_Handler+0x4>

08000ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <MemManage_Handler+0x4>

08001002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <UsageFault_Handler+0x4>

0800100e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103c:	f000 f8ee 	bl	800121c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001048:	2001      	movs	r0, #1
 800104a:	f001 fd5f 	bl	8002b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}

08001052 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001056:	2002      	movs	r0, #2
 8001058:	f001 fd58 	bl	8002b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <ADC_IRQHandler+0x10>)
 8001066:	f000 f961 	bl	800132c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000e0 	.word	0x200000e0

08001074 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <USART1_IRQHandler+0x10>)
 800107a:	f002 ff81 	bl	8003f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000188 	.word	0x20000188

08001088 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <USART3_IRQHandler+0x10>)
 800108e:	f002 ff77 	bl	8003f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000210 	.word	0x20000210

0800109c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80010a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80010a4:	f001 fd32 	bl	8002b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <DMA2_Stream0_IRQHandler+0x10>)
 80010b2:	f001 f8fb 	bl	80022ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000128 	.word	0x20000128

080010c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c8:	4a14      	ldr	r2, [pc, #80]	; (800111c <_sbrk+0x5c>)
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <_sbrk+0x60>)
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <_sbrk+0x64>)
 80010de:	4a12      	ldr	r2, [pc, #72]	; (8001128 <_sbrk+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d207      	bcs.n	8001100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f0:	f004 f96a 	bl	80053c8 <__errno>
 80010f4:	4603      	mov	r3, r0
 80010f6:	220c      	movs	r2, #12
 80010f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	e009      	b.n	8001114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <_sbrk+0x64>)
 8001110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20080000 	.word	0x20080000
 8001120:	00000400 	.word	0x00000400
 8001124:	200003cc 	.word	0x200003cc
 8001128:	20000520 	.word	0x20000520

0800112c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001188 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001156:	490e      	ldr	r1, [pc, #56]	; (8001190 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001158:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800116c:	4c0b      	ldr	r4, [pc, #44]	; (800119c <LoopFillZerobss+0x26>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800117a:	f7ff ffd7 	bl	800112c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117e:	f004 f929 	bl	80053d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001182:	f7ff fa33 	bl	80005ec <main>
  bx  lr    
 8001186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001188:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8001194:	08005d90 	.word	0x08005d90
  ldr r2, =_sbss
 8001198:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 800119c:	2000051c 	.word	0x2000051c

080011a0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <CAN1_RX0_IRQHandler>

080011a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a6:	2003      	movs	r0, #3
 80011a8:	f000 fe9e 	bl	8001ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f000 f805 	bl	80011bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b2:	f7ff fdb3 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x54>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_InitTick+0x58>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 feb9 	bl	8001f52 <HAL_SYSTICK_Config>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00e      	b.n	8001208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d80a      	bhi.n	8001206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f0:	2200      	movs	r2, #0
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f000 fe81 	bl	8001efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <HAL_InitTick+0x5c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	e000      	b.n	8001208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000068 	.word	0x20000068
 8001214:	20000070 	.word	0x20000070
 8001218:	2000006c 	.word	0x2000006c

0800121c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x20>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x24>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4413      	add	r3, r2
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <HAL_IncTick+0x24>)
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000070 	.word	0x20000070
 8001240:	200003d0 	.word	0x200003d0

08001244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return uwTick;
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <HAL_GetTick+0x14>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	200003d0 	.word	0x200003d0

0800125c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff ffee 	bl	8001244 <HAL_GetTick>
 8001268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001274:	d005      	beq.n	8001282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_Delay+0x44>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001282:	bf00      	nop
 8001284:	f7ff ffde 	bl	8001244 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d8f7      	bhi.n	8001284 <HAL_Delay+0x28>
  {
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000070 	.word	0x20000070

080012a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e031      	b.n	800131e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d109      	bne.n	80012d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fd4e 	bl	8000d64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d116      	bne.n	8001310 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <HAL_ADC_Init+0x84>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	f043 0202 	orr.w	r2, r3, #2
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 fba2 	bl	8001a3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f023 0303 	bic.w	r3, r3, #3
 8001306:	f043 0201 	orr.w	r2, r3, #1
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	641a      	str	r2, [r3, #64]	; 0x40
 800130e:	e001      	b.n	8001314 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	ffffeefd 	.word	0xffffeefd

0800132c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f003 0320 	and.w	r3, r3, #32
 800135a:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d049      	beq.n	80013f6 <HAL_ADC_IRQHandler+0xca>
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d046      	beq.n	80013f6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	2b00      	cmp	r3, #0
 8001372:	d105      	bne.n	8001380 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d12b      	bne.n	80013e6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001392:	2b00      	cmp	r3, #0
 8001394:	d127      	bne.n	80013e6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d119      	bne.n	80013e6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0220 	bic.w	r2, r2, #32
 80013c0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d105      	bne.n	80013e6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f043 0201 	orr.w	r2, r3, #1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f9aa 	bl	8001740 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f06f 0212 	mvn.w	r2, #18
 80013f4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001404:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d057      	beq.n	80014bc <HAL_ADC_IRQHandler+0x190>
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d054      	beq.n	80014bc <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	2b00      	cmp	r3, #0
 800141c:	d105      	bne.n	800142a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d139      	bne.n	80014ac <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001450:	2b00      	cmp	r3, #0
 8001452:	d12b      	bne.n	80014ac <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800145e:	2b00      	cmp	r3, #0
 8001460:	d124      	bne.n	80014ac <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800146c:	2b00      	cmp	r3, #0
 800146e:	d11d      	bne.n	80014ac <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001474:	2b00      	cmp	r3, #0
 8001476:	d119      	bne.n	80014ac <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001486:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149c:	2b00      	cmp	r3, #0
 800149e:	d105      	bne.n	80014ac <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f043 0201 	orr.w	r2, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 fc41 	bl	8001d34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f06f 020c 	mvn.w	r2, #12
 80014ba:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ca:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d017      	beq.n	8001502 <HAL_ADC_IRQHandler+0x1d6>
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d014      	beq.n	8001502 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d10d      	bne.n	8001502 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f938 	bl	8001768 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f06f 0201 	mvn.w	r2, #1
 8001500:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f003 0320 	and.w	r3, r3, #32
 8001508:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001510:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d015      	beq.n	8001544 <HAL_ADC_IRQHandler+0x218>
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d012      	beq.n	8001544 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f043 0202 	orr.w	r2, r3, #2
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f06f 0220 	mvn.w	r2, #32
 8001532:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f921 	bl	800177c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f06f 0220 	mvn.w	r2, #32
 8001542:	601a      	str	r2, [r3, #0]
  }
}
 8001544:	bf00      	nop
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <HAL_ADC_Start_DMA+0x1e>
 8001566:	2302      	movs	r3, #2
 8001568:	e0d4      	b.n	8001714 <HAL_ADC_Start_DMA+0x1c8>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b01      	cmp	r3, #1
 800157e:	d018      	beq.n	80015b2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0201 	orr.w	r2, r2, #1
 800158e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001590:	4b62      	ldr	r3, [pc, #392]	; (800171c <HAL_ADC_Start_DMA+0x1d0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a62      	ldr	r2, [pc, #392]	; (8001720 <HAL_ADC_Start_DMA+0x1d4>)
 8001596:	fba2 2303 	umull	r2, r3, r2, r3
 800159a:	0c9a      	lsrs	r2, r3, #18
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80015a4:	e002      	b.n	80015ac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f9      	bne.n	80015a6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b01      	cmp	r3, #1
 80015be:	f040 809c 	bne.w	80016fa <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015c6:	4b57      	ldr	r3, [pc, #348]	; (8001724 <HAL_ADC_Start_DMA+0x1d8>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d007      	beq.n	80015f0 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015fc:	d106      	bne.n	800160c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	f023 0206 	bic.w	r2, r3, #6
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	645a      	str	r2, [r3, #68]	; 0x44
 800160a:	e002      	b.n	8001612 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161e:	4a42      	ldr	r2, [pc, #264]	; (8001728 <HAL_ADC_Start_DMA+0x1dc>)
 8001620:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001626:	4a41      	ldr	r2, [pc, #260]	; (800172c <HAL_ADC_Start_DMA+0x1e0>)
 8001628:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162e:	4a40      	ldr	r2, [pc, #256]	; (8001730 <HAL_ADC_Start_DMA+0x1e4>)
 8001630:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800163a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800164a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800165a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	334c      	adds	r3, #76	; 0x4c
 8001666:	4619      	mov	r1, r3
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f000 fd2c 	bl	80020c8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001670:	4b30      	ldr	r3, [pc, #192]	; (8001734 <HAL_ADC_Start_DMA+0x1e8>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10f      	bne.n	800169c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d143      	bne.n	8001712 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	e03a      	b.n	8001712 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a25      	ldr	r2, [pc, #148]	; (8001738 <HAL_ADC_Start_DMA+0x1ec>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d10e      	bne.n	80016c4 <HAL_ADC_Start_DMA+0x178>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d107      	bne.n	80016c4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016c2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <HAL_ADC_Start_DMA+0x1e8>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0310 	and.w	r3, r3, #16
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d120      	bne.n	8001712 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a19      	ldr	r2, [pc, #100]	; (800173c <HAL_ADC_Start_DMA+0x1f0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d11b      	bne.n	8001712 <HAL_ADC_Start_DMA+0x1c6>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d114      	bne.n	8001712 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	e00b      	b.n	8001712 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f043 0210 	orr.w	r2, r3, #16
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f043 0201 	orr.w	r2, r3, #1
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000068 	.word	0x20000068
 8001720:	431bde83 	.word	0x431bde83
 8001724:	fffff8fe 	.word	0xfffff8fe
 8001728:	08001c31 	.word	0x08001c31
 800172c:	08001ceb 	.word	0x08001ceb
 8001730:	08001d07 	.word	0x08001d07
 8001734:	40012300 	.word	0x40012300
 8001738:	40012000 	.word	0x40012000
 800173c:	40012200 	.word	0x40012200

08001740 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x1c>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e136      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x28a>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b09      	cmp	r3, #9
 80017ba:	d93a      	bls.n	8001832 <HAL_ADC_ConfigChannel+0xa2>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017c4:	d035      	beq.n	8001832 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68d9      	ldr	r1, [r3, #12]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	3b1e      	subs	r3, #30
 80017dc:	2207      	movs	r2, #7
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43da      	mvns	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	400a      	ands	r2, r1
 80017ea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a8d      	ldr	r2, [pc, #564]	; (8001a28 <HAL_ADC_ConfigChannel+0x298>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d10a      	bne.n	800180c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68d9      	ldr	r1, [r3, #12]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	061a      	lsls	r2, r3, #24
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800180a:	e035      	b.n	8001878 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68d9      	ldr	r1, [r3, #12]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	4618      	mov	r0, r3
 800181e:	4603      	mov	r3, r0
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4403      	add	r3, r0
 8001824:	3b1e      	subs	r3, #30
 8001826:	409a      	lsls	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001830:	e022      	b.n	8001878 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6919      	ldr	r1, [r3, #16]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	b29b      	uxth	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	2207      	movs	r2, #7
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43da      	mvns	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	400a      	ands	r2, r1
 8001854:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6919      	ldr	r1, [r3, #16]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	b29b      	uxth	r3, r3
 8001866:	4618      	mov	r0, r3
 8001868:	4603      	mov	r3, r0
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4403      	add	r3, r0
 800186e:	409a      	lsls	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b06      	cmp	r3, #6
 800187e:	d824      	bhi.n	80018ca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	3b05      	subs	r3, #5
 8001892:	221f      	movs	r2, #31
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43da      	mvns	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	400a      	ands	r2, r1
 80018a0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	3b05      	subs	r3, #5
 80018bc:	fa00 f203 	lsl.w	r2, r0, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	635a      	str	r2, [r3, #52]	; 0x34
 80018c8:	e04c      	b.n	8001964 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b0c      	cmp	r3, #12
 80018d0:	d824      	bhi.n	800191c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	3b23      	subs	r3, #35	; 0x23
 80018e4:	221f      	movs	r2, #31
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	400a      	ands	r2, r1
 80018f2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	4618      	mov	r0, r3
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	3b23      	subs	r3, #35	; 0x23
 800190e:	fa00 f203 	lsl.w	r2, r0, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	631a      	str	r2, [r3, #48]	; 0x30
 800191a:	e023      	b.n	8001964 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	3b41      	subs	r3, #65	; 0x41
 800192e:	221f      	movs	r2, #31
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43da      	mvns	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	400a      	ands	r2, r1
 800193c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	4618      	mov	r0, r3
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	3b41      	subs	r3, #65	; 0x41
 8001958:	fa00 f203 	lsl.w	r2, r0, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a30      	ldr	r2, [pc, #192]	; (8001a2c <HAL_ADC_ConfigChannel+0x29c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d10a      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1f4>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001976:	d105      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001978:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	4a2c      	ldr	r2, [pc, #176]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 800197e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001982:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a28      	ldr	r2, [pc, #160]	; (8001a2c <HAL_ADC_ConfigChannel+0x29c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d10f      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x21e>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b12      	cmp	r3, #18
 8001994:	d10b      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001996:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4a25      	ldr	r2, [pc, #148]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 800199c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019a0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80019a2:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4a22      	ldr	r2, [pc, #136]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 80019a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019ac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a1e      	ldr	r2, [pc, #120]	; (8001a2c <HAL_ADC_ConfigChannel+0x29c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d12b      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x280>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1a      	ldr	r2, [pc, #104]	; (8001a28 <HAL_ADC_ConfigChannel+0x298>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d003      	beq.n	80019ca <HAL_ADC_ConfigChannel+0x23a>
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b11      	cmp	r3, #17
 80019c8:	d122      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80019ca:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 80019d0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80019d4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <HAL_ADC_ConfigChannel+0x2a0>)
 80019dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019e0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <HAL_ADC_ConfigChannel+0x298>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d111      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_ADC_ConfigChannel+0x2a4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <HAL_ADC_ConfigChannel+0x2a8>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	0c9a      	lsrs	r2, r3, #18
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a02:	e002      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f9      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	10000012 	.word	0x10000012
 8001a2c:	40012000 	.word	0x40012000
 8001a30:	40012300 	.word	0x40012300
 8001a34:	20000068 	.word	0x20000068
 8001a38:	431bde83 	.word	0x431bde83

08001a3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001a44:	4b78      	ldr	r3, [pc, #480]	; (8001c28 <ADC_Init+0x1ec>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4a77      	ldr	r2, [pc, #476]	; (8001c28 <ADC_Init+0x1ec>)
 8001a4a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a4e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001a50:	4b75      	ldr	r3, [pc, #468]	; (8001c28 <ADC_Init+0x1ec>)
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	4973      	ldr	r1, [pc, #460]	; (8001c28 <ADC_Init+0x1ec>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6859      	ldr	r1, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	021a      	lsls	r2, r3, #8
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6859      	ldr	r1, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ab2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6899      	ldr	r1, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	4a58      	ldr	r2, [pc, #352]	; (8001c2c <ADC_Init+0x1f0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d022      	beq.n	8001b16 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ade:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6899      	ldr	r1, [r3, #8]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6899      	ldr	r1, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	e00f      	b.n	8001b36 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0202 	bic.w	r2, r2, #2
 8001b44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6899      	ldr	r1, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	005a      	lsls	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d01b      	beq.n	8001b9c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6859      	ldr	r1, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	035a      	lsls	r2, r3, #13
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	e007      	b.n	8001bac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001baa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	051a      	lsls	r2, r3, #20
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001be0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6899      	ldr	r1, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bee:	025a      	lsls	r2, r3, #9
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6899      	ldr	r1, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	029a      	lsls	r2, r3, #10
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	609a      	str	r2, [r3, #8]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	40012300 	.word	0x40012300
 8001c2c:	0f000001 	.word	0x0f000001

08001c30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d13c      	bne.n	8001cc4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d12b      	bne.n	8001cbc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d127      	bne.n	8001cbc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d006      	beq.n	8001c88 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d119      	bne.n	8001cbc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0220 	bic.w	r2, r2, #32
 8001c96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d105      	bne.n	8001cbc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f043 0201 	orr.w	r2, r3, #1
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f7ff fd3f 	bl	8001740 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001cc2:	e00e      	b.n	8001ce2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f7ff fd53 	bl	800177c <HAL_ADC_ErrorCallback>
}
 8001cd6:	e004      	b.n	8001ce2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	4798      	blx	r3
}
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f7ff fd2b 	bl	8001754 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b084      	sub	sp, #16
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d12:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2240      	movs	r2, #64	; 0x40
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f043 0204 	orr.w	r2, r3, #4
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f7ff fd28 	bl	800177c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <__NVIC_SetPriorityGrouping+0x40>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d64:	4013      	ands	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d76:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <__NVIC_SetPriorityGrouping+0x40>)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	60d3      	str	r3, [r2, #12]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00
 8001d8c:	05fa0000 	.word	0x05fa0000

08001d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <__NVIC_GetPriorityGrouping+0x18>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	f003 0307 	and.w	r3, r3, #7
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	db0b      	blt.n	8001dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	f003 021f 	and.w	r2, r3, #31
 8001dc4:	4907      	ldr	r1, [pc, #28]	; (8001de4 <__NVIC_EnableIRQ+0x38>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	2001      	movs	r0, #1
 8001dce:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000e100 	.word	0xe000e100

08001de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	db0a      	blt.n	8001e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	490c      	ldr	r1, [pc, #48]	; (8001e34 <__NVIC_SetPriority+0x4c>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	0112      	lsls	r2, r2, #4
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e10:	e00a      	b.n	8001e28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4908      	ldr	r1, [pc, #32]	; (8001e38 <__NVIC_SetPriority+0x50>)
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	3b04      	subs	r3, #4
 8001e20:	0112      	lsls	r2, r2, #4
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	440b      	add	r3, r1
 8001e26:	761a      	strb	r2, [r3, #24]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000e100 	.word	0xe000e100
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	; 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f1c3 0307 	rsb	r3, r3, #7
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	bf28      	it	cs
 8001e5a:	2304      	movcs	r3, #4
 8001e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3304      	adds	r3, #4
 8001e62:	2b06      	cmp	r3, #6
 8001e64:	d902      	bls.n	8001e6c <NVIC_EncodePriority+0x30>
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3b03      	subs	r3, #3
 8001e6a:	e000      	b.n	8001e6e <NVIC_EncodePriority+0x32>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	f04f 32ff 	mov.w	r2, #4294967295
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	401a      	ands	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e84:	f04f 31ff 	mov.w	r1, #4294967295
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8e:	43d9      	mvns	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	4313      	orrs	r3, r2
         );
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3724      	adds	r7, #36	; 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb4:	d301      	bcc.n	8001eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00f      	b.n	8001eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <SysTick_Config+0x40>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec2:	210f      	movs	r1, #15
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	f7ff ff8e 	bl	8001de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <SysTick_Config+0x40>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed2:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <SysTick_Config+0x40>)
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	e000e010 	.word	0xe000e010

08001ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ff29 	bl	8001d48 <__NVIC_SetPriorityGrouping>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f10:	f7ff ff3e 	bl	8001d90 <__NVIC_GetPriorityGrouping>
 8001f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	6978      	ldr	r0, [r7, #20]
 8001f1c:	f7ff ff8e 	bl	8001e3c <NVIC_EncodePriority>
 8001f20:	4602      	mov	r2, r0
 8001f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff5d 	bl	8001de8 <__NVIC_SetPriority>
}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff31 	bl	8001dac <__NVIC_EnableIRQ>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffa2 	bl	8001ea4 <SysTick_Config>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f78:	f7ff f964 	bl	8001244 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e099      	b.n	80020bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa8:	e00f      	b.n	8001fca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001faa:	f7ff f94b 	bl	8001244 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d908      	bls.n	8001fca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e078      	b.n	80020bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1e8      	bne.n	8001faa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	4b38      	ldr	r3, [pc, #224]	; (80020c4 <HAL_DMA_Init+0x158>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002002:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800200e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4313      	orrs	r3, r2
 800201a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	2b04      	cmp	r3, #4
 8002022:	d107      	bne.n	8002034 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	4313      	orrs	r3, r2
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f023 0307 	bic.w	r3, r3, #7
 800204a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	4313      	orrs	r3, r2
 8002054:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	2b04      	cmp	r3, #4
 800205c:	d117      	bne.n	800208e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4313      	orrs	r3, r2
 8002066:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00e      	beq.n	800208e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 fb09 	bl	8002688 <DMA_CheckFifoParam>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2240      	movs	r2, #64	; 0x40
 8002080:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800208a:	2301      	movs	r3, #1
 800208c:	e016      	b.n	80020bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fac0 	bl	800261c <DMA_CalcBaseAndBitshift>
 800209c:	4603      	mov	r3, r0
 800209e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a4:	223f      	movs	r2, #63	; 0x3f
 80020a6:	409a      	lsls	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	e010803f 	.word	0xe010803f

080020c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <HAL_DMA_Start_IT+0x26>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e048      	b.n	8002180 <HAL_DMA_Start_IT+0xb8>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d137      	bne.n	8002172 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2202      	movs	r2, #2
 8002106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fa52 	bl	80025c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	223f      	movs	r2, #63	; 0x3f
 8002122:	409a      	lsls	r2, r3
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0216 	orr.w	r2, r2, #22
 8002136:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002146:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0208 	orr.w	r2, r2, #8
 800215e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0201 	orr.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	e005      	b.n	800217e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800217a:	2302      	movs	r3, #2
 800217c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800217e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002196:	f7ff f855 	bl	8001244 <HAL_GetTick>
 800219a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d008      	beq.n	80021ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2280      	movs	r2, #128	; 0x80
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e052      	b.n	8002260 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0216 	bic.w	r2, r2, #22
 80021c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695a      	ldr	r2, [r3, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d103      	bne.n	80021ea <HAL_DMA_Abort+0x62>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0208 	bic.w	r2, r2, #8
 80021f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0201 	bic.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800220a:	e013      	b.n	8002234 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800220c:	f7ff f81a 	bl	8001244 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b05      	cmp	r3, #5
 8002218:	d90c      	bls.n	8002234 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2220      	movs	r2, #32
 800221e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2203      	movs	r2, #3
 8002224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e015      	b.n	8002260 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1e4      	bne.n	800220c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002246:	223f      	movs	r2, #63	; 0x3f
 8002248:	409a      	lsls	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d004      	beq.n	8002286 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2280      	movs	r2, #128	; 0x80
 8002280:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e00c      	b.n	80022a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2205      	movs	r2, #5
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0201 	bic.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80022b8:	4b8e      	ldr	r3, [pc, #568]	; (80024f4 <HAL_DMA_IRQHandler+0x248>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a8e      	ldr	r2, [pc, #568]	; (80024f8 <HAL_DMA_IRQHandler+0x24c>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	0a9b      	lsrs	r3, r3, #10
 80022c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d6:	2208      	movs	r2, #8
 80022d8:	409a      	lsls	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4013      	ands	r3, r2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d01a      	beq.n	8002318 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d013      	beq.n	8002318 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0204 	bic.w	r2, r2, #4
 80022fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	2208      	movs	r2, #8
 8002306:	409a      	lsls	r2, r3
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231c:	2201      	movs	r2, #1
 800231e:	409a      	lsls	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d012      	beq.n	800234e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00b      	beq.n	800234e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233a:	2201      	movs	r2, #1
 800233c:	409a      	lsls	r2, r3
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	f043 0202 	orr.w	r2, r3, #2
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	2204      	movs	r2, #4
 8002354:	409a      	lsls	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4013      	ands	r3, r2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d012      	beq.n	8002384 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00b      	beq.n	8002384 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	2204      	movs	r2, #4
 8002372:	409a      	lsls	r2, r3
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237c:	f043 0204 	orr.w	r2, r3, #4
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002388:	2210      	movs	r2, #16
 800238a:	409a      	lsls	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4013      	ands	r3, r2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d043      	beq.n	800241c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d03c      	beq.n	800241c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a6:	2210      	movs	r2, #16
 80023a8:	409a      	lsls	r2, r3
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d018      	beq.n	80023ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d108      	bne.n	80023dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d024      	beq.n	800241c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	4798      	blx	r3
 80023da:	e01f      	b.n	800241c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01b      	beq.n	800241c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	4798      	blx	r3
 80023ec:	e016      	b.n	800241c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d107      	bne.n	800240c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0208 	bic.w	r2, r2, #8
 800240a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	2220      	movs	r2, #32
 8002422:	409a      	lsls	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4013      	ands	r3, r2
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 808f 	beq.w	800254c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 8087 	beq.w	800254c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002442:	2220      	movs	r2, #32
 8002444:	409a      	lsls	r2, r3
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b05      	cmp	r3, #5
 8002454:	d136      	bne.n	80024c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0216 	bic.w	r2, r2, #22
 8002464:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695a      	ldr	r2, [r3, #20]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002474:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	2b00      	cmp	r3, #0
 800247c:	d103      	bne.n	8002486 <HAL_DMA_IRQHandler+0x1da>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002482:	2b00      	cmp	r3, #0
 8002484:	d007      	beq.n	8002496 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0208 	bic.w	r2, r2, #8
 8002494:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249a:	223f      	movs	r2, #63	; 0x3f
 800249c:	409a      	lsls	r2, r3
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d07e      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	4798      	blx	r3
        }
        return;
 80024c2:	e079      	b.n	80025b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d01d      	beq.n	800250e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10d      	bne.n	80024fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d031      	beq.n	800254c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	4798      	blx	r3
 80024f0:	e02c      	b.n	800254c <HAL_DMA_IRQHandler+0x2a0>
 80024f2:	bf00      	nop
 80024f4:	20000068 	.word	0x20000068
 80024f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002500:	2b00      	cmp	r3, #0
 8002502:	d023      	beq.n	800254c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	4798      	blx	r3
 800250c:	e01e      	b.n	800254c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10f      	bne.n	800253c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0210 	bic.w	r2, r2, #16
 800252a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002550:	2b00      	cmp	r3, #0
 8002552:	d032      	beq.n	80025ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d022      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2205      	movs	r2, #5
 8002564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0201 	bic.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	3301      	adds	r3, #1
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	429a      	cmp	r2, r3
 8002582:	d307      	bcc.n	8002594 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f2      	bne.n	8002578 <HAL_DMA_IRQHandler+0x2cc>
 8002592:	e000      	b.n	8002596 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002594:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	4798      	blx	r3
 80025b6:	e000      	b.n	80025ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80025b8:	bf00      	nop
    }
  }
}
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b40      	cmp	r3, #64	; 0x40
 80025ec:	d108      	bne.n	8002600 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025fe:	e007      	b.n	8002610 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	60da      	str	r2, [r3, #12]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	3b10      	subs	r3, #16
 800262c:	4a13      	ldr	r2, [pc, #76]	; (800267c <DMA_CalcBaseAndBitshift+0x60>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002636:	4a12      	ldr	r2, [pc, #72]	; (8002680 <DMA_CalcBaseAndBitshift+0x64>)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4413      	add	r3, r2
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b03      	cmp	r3, #3
 8002648:	d908      	bls.n	800265c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <DMA_CalcBaseAndBitshift+0x68>)
 8002652:	4013      	ands	r3, r2
 8002654:	1d1a      	adds	r2, r3, #4
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	659a      	str	r2, [r3, #88]	; 0x58
 800265a:	e006      	b.n	800266a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	4b08      	ldr	r3, [pc, #32]	; (8002684 <DMA_CalcBaseAndBitshift+0x68>)
 8002664:	4013      	ands	r3, r2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	aaaaaaab 	.word	0xaaaaaaab
 8002680:	08005d44 	.word	0x08005d44
 8002684:	fffffc00 	.word	0xfffffc00

08002688 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d11f      	bne.n	80026e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d856      	bhi.n	8002756 <DMA_CheckFifoParam+0xce>
 80026a8:	a201      	add	r2, pc, #4	; (adr r2, 80026b0 <DMA_CheckFifoParam+0x28>)
 80026aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ae:	bf00      	nop
 80026b0:	080026c1 	.word	0x080026c1
 80026b4:	080026d3 	.word	0x080026d3
 80026b8:	080026c1 	.word	0x080026c1
 80026bc:	08002757 	.word	0x08002757
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d046      	beq.n	800275a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d0:	e043      	b.n	800275a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026da:	d140      	bne.n	800275e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e0:	e03d      	b.n	800275e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ea:	d121      	bne.n	8002730 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d837      	bhi.n	8002762 <DMA_CheckFifoParam+0xda>
 80026f2:	a201      	add	r2, pc, #4	; (adr r2, 80026f8 <DMA_CheckFifoParam+0x70>)
 80026f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f8:	08002709 	.word	0x08002709
 80026fc:	0800270f 	.word	0x0800270f
 8002700:	08002709 	.word	0x08002709
 8002704:	08002721 	.word	0x08002721
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
      break;
 800270c:	e030      	b.n	8002770 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d025      	beq.n	8002766 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271e:	e022      	b.n	8002766 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002728:	d11f      	bne.n	800276a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800272e:	e01c      	b.n	800276a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d903      	bls.n	800273e <DMA_CheckFifoParam+0xb6>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d003      	beq.n	8002744 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800273c:	e018      	b.n	8002770 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	73fb      	strb	r3, [r7, #15]
      break;
 8002742:	e015      	b.n	8002770 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00e      	beq.n	800276e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
      break;
 8002754:	e00b      	b.n	800276e <DMA_CheckFifoParam+0xe6>
      break;
 8002756:	bf00      	nop
 8002758:	e00a      	b.n	8002770 <DMA_CheckFifoParam+0xe8>
      break;
 800275a:	bf00      	nop
 800275c:	e008      	b.n	8002770 <DMA_CheckFifoParam+0xe8>
      break;
 800275e:	bf00      	nop
 8002760:	e006      	b.n	8002770 <DMA_CheckFifoParam+0xe8>
      break;
 8002762:	bf00      	nop
 8002764:	e004      	b.n	8002770 <DMA_CheckFifoParam+0xe8>
      break;
 8002766:	bf00      	nop
 8002768:	e002      	b.n	8002770 <DMA_CheckFifoParam+0xe8>
      break;   
 800276a:	bf00      	nop
 800276c:	e000      	b.n	8002770 <DMA_CheckFifoParam+0xe8>
      break;
 800276e:	bf00      	nop
    }
  } 
  
  return status; 
 8002770:	7bfb      	ldrb	r3, [r7, #15]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop

08002780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002780:	b480      	push	{r7}
 8002782:	b089      	sub	sp, #36	; 0x24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002796:	2300      	movs	r3, #0
 8002798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	e175      	b.n	8002a8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027a0:	2201      	movs	r2, #1
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	f040 8164 	bne.w	8002a86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d005      	beq.n	80027d6 <HAL_GPIO_Init+0x56>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d130      	bne.n	8002838 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	2203      	movs	r2, #3
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800280c:	2201      	movs	r2, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 0201 	and.w	r2, r3, #1
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b03      	cmp	r3, #3
 8002842:	d017      	beq.n	8002874 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2203      	movs	r2, #3
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d123      	bne.n	80028c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	08da      	lsrs	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3208      	adds	r2, #8
 8002888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	220f      	movs	r2, #15
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	08da      	lsrs	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3208      	adds	r2, #8
 80028c2:	69b9      	ldr	r1, [r7, #24]
 80028c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2203      	movs	r2, #3
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0203 	and.w	r2, r3, #3
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80be 	beq.w	8002a86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290a:	4b66      	ldr	r3, [pc, #408]	; (8002aa4 <HAL_GPIO_Init+0x324>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	4a65      	ldr	r2, [pc, #404]	; (8002aa4 <HAL_GPIO_Init+0x324>)
 8002910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002914:	6453      	str	r3, [r2, #68]	; 0x44
 8002916:	4b63      	ldr	r3, [pc, #396]	; (8002aa4 <HAL_GPIO_Init+0x324>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002922:	4a61      	ldr	r2, [pc, #388]	; (8002aa8 <HAL_GPIO_Init+0x328>)
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	089b      	lsrs	r3, r3, #2
 8002928:	3302      	adds	r3, #2
 800292a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	220f      	movs	r2, #15
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a58      	ldr	r2, [pc, #352]	; (8002aac <HAL_GPIO_Init+0x32c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d037      	beq.n	80029be <HAL_GPIO_Init+0x23e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a57      	ldr	r2, [pc, #348]	; (8002ab0 <HAL_GPIO_Init+0x330>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d031      	beq.n	80029ba <HAL_GPIO_Init+0x23a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a56      	ldr	r2, [pc, #344]	; (8002ab4 <HAL_GPIO_Init+0x334>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d02b      	beq.n	80029b6 <HAL_GPIO_Init+0x236>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a55      	ldr	r2, [pc, #340]	; (8002ab8 <HAL_GPIO_Init+0x338>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d025      	beq.n	80029b2 <HAL_GPIO_Init+0x232>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a54      	ldr	r2, [pc, #336]	; (8002abc <HAL_GPIO_Init+0x33c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d01f      	beq.n	80029ae <HAL_GPIO_Init+0x22e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a53      	ldr	r2, [pc, #332]	; (8002ac0 <HAL_GPIO_Init+0x340>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d019      	beq.n	80029aa <HAL_GPIO_Init+0x22a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a52      	ldr	r2, [pc, #328]	; (8002ac4 <HAL_GPIO_Init+0x344>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_GPIO_Init+0x226>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a51      	ldr	r2, [pc, #324]	; (8002ac8 <HAL_GPIO_Init+0x348>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00d      	beq.n	80029a2 <HAL_GPIO_Init+0x222>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a50      	ldr	r2, [pc, #320]	; (8002acc <HAL_GPIO_Init+0x34c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d007      	beq.n	800299e <HAL_GPIO_Init+0x21e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4f      	ldr	r2, [pc, #316]	; (8002ad0 <HAL_GPIO_Init+0x350>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d101      	bne.n	800299a <HAL_GPIO_Init+0x21a>
 8002996:	2309      	movs	r3, #9
 8002998:	e012      	b.n	80029c0 <HAL_GPIO_Init+0x240>
 800299a:	230a      	movs	r3, #10
 800299c:	e010      	b.n	80029c0 <HAL_GPIO_Init+0x240>
 800299e:	2308      	movs	r3, #8
 80029a0:	e00e      	b.n	80029c0 <HAL_GPIO_Init+0x240>
 80029a2:	2307      	movs	r3, #7
 80029a4:	e00c      	b.n	80029c0 <HAL_GPIO_Init+0x240>
 80029a6:	2306      	movs	r3, #6
 80029a8:	e00a      	b.n	80029c0 <HAL_GPIO_Init+0x240>
 80029aa:	2305      	movs	r3, #5
 80029ac:	e008      	b.n	80029c0 <HAL_GPIO_Init+0x240>
 80029ae:	2304      	movs	r3, #4
 80029b0:	e006      	b.n	80029c0 <HAL_GPIO_Init+0x240>
 80029b2:	2303      	movs	r3, #3
 80029b4:	e004      	b.n	80029c0 <HAL_GPIO_Init+0x240>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e002      	b.n	80029c0 <HAL_GPIO_Init+0x240>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_GPIO_Init+0x240>
 80029be:	2300      	movs	r3, #0
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	f002 0203 	and.w	r2, r2, #3
 80029c6:	0092      	lsls	r2, r2, #2
 80029c8:	4093      	lsls	r3, r2
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029d0:	4935      	ldr	r1, [pc, #212]	; (8002aa8 <HAL_GPIO_Init+0x328>)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	089b      	lsrs	r3, r3, #2
 80029d6:	3302      	adds	r3, #2
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029de:	4b3d      	ldr	r3, [pc, #244]	; (8002ad4 <HAL_GPIO_Init+0x354>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a02:	4a34      	ldr	r2, [pc, #208]	; (8002ad4 <HAL_GPIO_Init+0x354>)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a08:	4b32      	ldr	r3, [pc, #200]	; (8002ad4 <HAL_GPIO_Init+0x354>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a2c:	4a29      	ldr	r2, [pc, #164]	; (8002ad4 <HAL_GPIO_Init+0x354>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a32:	4b28      	ldr	r3, [pc, #160]	; (8002ad4 <HAL_GPIO_Init+0x354>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a56:	4a1f      	ldr	r2, [pc, #124]	; (8002ad4 <HAL_GPIO_Init+0x354>)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <HAL_GPIO_Init+0x354>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a80:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <HAL_GPIO_Init+0x354>)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	2b0f      	cmp	r3, #15
 8002a90:	f67f ae86 	bls.w	80027a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	3724      	adds	r7, #36	; 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40013800 	.word	0x40013800
 8002aac:	40020000 	.word	0x40020000
 8002ab0:	40020400 	.word	0x40020400
 8002ab4:	40020800 	.word	0x40020800
 8002ab8:	40020c00 	.word	0x40020c00
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40021400 	.word	0x40021400
 8002ac4:	40021800 	.word	0x40021800
 8002ac8:	40021c00 	.word	0x40021c00
 8002acc:	40022000 	.word	0x40022000
 8002ad0:	40022400 	.word	0x40022400
 8002ad4:	40013c00 	.word	0x40013c00

08002ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	807b      	strh	r3, [r7, #2]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae8:	787b      	ldrb	r3, [r7, #1]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aee:	887a      	ldrh	r2, [r7, #2]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002af4:	e003      	b.n	8002afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002af6:	887b      	ldrh	r3, [r7, #2]
 8002af8:	041a      	lsls	r2, r3, #16
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	619a      	str	r2, [r3, #24]
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b22:	4a05      	ldr	r2, [pc, #20]	; (8002b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe f876 	bl	8000c1c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40013c00 	.word	0x40013c00

08002b3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b46:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	4a22      	ldr	r2, [pc, #136]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b50:	6413      	str	r3, [r2, #64]	; 0x40
 8002b52:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b6a:	f7fe fb6b 	bl	8001244 <HAL_GetTick>
 8002b6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b70:	e009      	b.n	8002b86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b72:	f7fe fb67 	bl	8001244 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b80:	d901      	bls.n	8002b86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e022      	b.n	8002bcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b86:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b92:	d1ee      	bne.n	8002b72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b94:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0f      	ldr	r2, [pc, #60]	; (8002bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ba0:	f7fe fb50 	bl	8001244 <HAL_GetTick>
 8002ba4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ba6:	e009      	b.n	8002bbc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ba8:	f7fe fb4c 	bl	8001244 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb6:	d901      	bls.n	8002bbc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e007      	b.n	8002bcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bc8:	d1ee      	bne.n	8002ba8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40007000 	.word	0x40007000

08002bdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002be4:	2300      	movs	r3, #0
 8002be6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e29b      	b.n	800312a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8087 	beq.w	8002d0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c00:	4b96      	ldr	r3, [pc, #600]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d00c      	beq.n	8002c26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0c:	4b93      	ldr	r3, [pc, #588]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 030c 	and.w	r3, r3, #12
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d112      	bne.n	8002c3e <HAL_RCC_OscConfig+0x62>
 8002c18:	4b90      	ldr	r3, [pc, #576]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c24:	d10b      	bne.n	8002c3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c26:	4b8d      	ldr	r3, [pc, #564]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d06c      	beq.n	8002d0c <HAL_RCC_OscConfig+0x130>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d168      	bne.n	8002d0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e275      	b.n	800312a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x7a>
 8002c48:	4b84      	ldr	r3, [pc, #528]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a83      	ldr	r2, [pc, #524]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	e02e      	b.n	8002cb4 <HAL_RCC_OscConfig+0xd8>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x9c>
 8002c5e:	4b7f      	ldr	r3, [pc, #508]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a7e      	ldr	r2, [pc, #504]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b7c      	ldr	r3, [pc, #496]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a7b      	ldr	r2, [pc, #492]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e01d      	b.n	8002cb4 <HAL_RCC_OscConfig+0xd8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0xc0>
 8002c82:	4b76      	ldr	r3, [pc, #472]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a75      	ldr	r2, [pc, #468]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	4b73      	ldr	r3, [pc, #460]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a72      	ldr	r2, [pc, #456]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCC_OscConfig+0xd8>
 8002c9c:	4b6f      	ldr	r3, [pc, #444]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a6e      	ldr	r2, [pc, #440]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4b6c      	ldr	r3, [pc, #432]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a6b      	ldr	r2, [pc, #428]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d013      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fac2 	bl	8001244 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7fe fabe 	bl	8001244 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	; 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e229      	b.n	800312a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	4b61      	ldr	r3, [pc, #388]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0xe8>
 8002ce2:	e014      	b.n	8002d0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe faae 	bl	8001244 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cec:	f7fe faaa 	bl	8001244 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e215      	b.n	800312a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfe:	4b57      	ldr	r3, [pc, #348]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x110>
 8002d0a:	e000      	b.n	8002d0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d069      	beq.n	8002dee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d1a:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00b      	beq.n	8002d3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d26:	4b4d      	ldr	r3, [pc, #308]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d11c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x190>
 8002d32:	4b4a      	ldr	r3, [pc, #296]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d116      	bne.n	8002d6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3e:	4b47      	ldr	r3, [pc, #284]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_RCC_OscConfig+0x17a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d001      	beq.n	8002d56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e1e9      	b.n	800312a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d56:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	493d      	ldr	r1, [pc, #244]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6a:	e040      	b.n	8002dee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d023      	beq.n	8002dbc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d74:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a38      	ldr	r2, [pc, #224]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe fa60 	bl	8001244 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d88:	f7fe fa5c 	bl	8001244 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e1c7      	b.n	800312a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9a:	4b30      	ldr	r3, [pc, #192]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da6:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4929      	ldr	r1, [pc, #164]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]
 8002dba:	e018      	b.n	8002dee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dbc:	4b27      	ldr	r3, [pc, #156]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a26      	ldr	r2, [pc, #152]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fa3c 	bl	8001244 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd0:	f7fe fa38 	bl	8001244 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e1a3      	b.n	800312a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	4b1e      	ldr	r3, [pc, #120]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d038      	beq.n	8002e6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d019      	beq.n	8002e36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e02:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e06:	4a15      	ldr	r2, [pc, #84]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0e:	f7fe fa19 	bl	8001244 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e16:	f7fe fa15 	bl	8001244 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e180      	b.n	800312a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x23a>
 8002e34:	e01a      	b.n	8002e6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e36:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3a:	4a08      	ldr	r2, [pc, #32]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e42:	f7fe f9ff 	bl	8001244 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e48:	e00a      	b.n	8002e60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4a:	f7fe f9fb 	bl	8001244 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d903      	bls.n	8002e60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e166      	b.n	800312a <HAL_RCC_OscConfig+0x54e>
 8002e5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e60:	4b92      	ldr	r3, [pc, #584]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ee      	bne.n	8002e4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 80a4 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7a:	4b8c      	ldr	r3, [pc, #560]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10d      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e86:	4b89      	ldr	r3, [pc, #548]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	4a88      	ldr	r2, [pc, #544]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e90:	6413      	str	r3, [r2, #64]	; 0x40
 8002e92:	4b86      	ldr	r3, [pc, #536]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea2:	4b83      	ldr	r3, [pc, #524]	; (80030b0 <HAL_RCC_OscConfig+0x4d4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d118      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002eae:	4b80      	ldr	r3, [pc, #512]	; (80030b0 <HAL_RCC_OscConfig+0x4d4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a7f      	ldr	r2, [pc, #508]	; (80030b0 <HAL_RCC_OscConfig+0x4d4>)
 8002eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eba:	f7fe f9c3 	bl	8001244 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec2:	f7fe f9bf 	bl	8001244 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b64      	cmp	r3, #100	; 0x64
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e12a      	b.n	800312a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed4:	4b76      	ldr	r3, [pc, #472]	; (80030b0 <HAL_RCC_OscConfig+0x4d4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x31a>
 8002ee8:	4b70      	ldr	r3, [pc, #448]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	4a6f      	ldr	r2, [pc, #444]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef4:	e02d      	b.n	8002f52 <HAL_RCC_OscConfig+0x376>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x33c>
 8002efe:	4b6b      	ldr	r3, [pc, #428]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	4a6a      	ldr	r2, [pc, #424]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0a:	4b68      	ldr	r3, [pc, #416]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	4a67      	ldr	r2, [pc, #412]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002f10:	f023 0304 	bic.w	r3, r3, #4
 8002f14:	6713      	str	r3, [r2, #112]	; 0x70
 8002f16:	e01c      	b.n	8002f52 <HAL_RCC_OscConfig+0x376>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	d10c      	bne.n	8002f3a <HAL_RCC_OscConfig+0x35e>
 8002f20:	4b62      	ldr	r3, [pc, #392]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	4a61      	ldr	r2, [pc, #388]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002f26:	f043 0304 	orr.w	r3, r3, #4
 8002f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2c:	4b5f      	ldr	r3, [pc, #380]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	4a5e      	ldr	r2, [pc, #376]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6713      	str	r3, [r2, #112]	; 0x70
 8002f38:	e00b      	b.n	8002f52 <HAL_RCC_OscConfig+0x376>
 8002f3a:	4b5c      	ldr	r3, [pc, #368]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	4a5b      	ldr	r2, [pc, #364]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	6713      	str	r3, [r2, #112]	; 0x70
 8002f46:	4b59      	ldr	r3, [pc, #356]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4a:	4a58      	ldr	r2, [pc, #352]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d015      	beq.n	8002f86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5a:	f7fe f973 	bl	8001244 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7fe f96f 	bl	8001244 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e0d8      	b.n	800312a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f78:	4b4c      	ldr	r3, [pc, #304]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0ee      	beq.n	8002f62 <HAL_RCC_OscConfig+0x386>
 8002f84:	e014      	b.n	8002fb0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f86:	f7fe f95d 	bl	8001244 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8c:	e00a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8e:	f7fe f959 	bl	8001244 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e0c2      	b.n	800312a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa4:	4b41      	ldr	r3, [pc, #260]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1ee      	bne.n	8002f8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d105      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb6:	4b3d      	ldr	r3, [pc, #244]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	4a3c      	ldr	r2, [pc, #240]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 80ae 	beq.w	8003128 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fcc:	4b37      	ldr	r3, [pc, #220]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d06d      	beq.n	80030b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d14b      	bne.n	8003078 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe0:	4b32      	ldr	r3, [pc, #200]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a31      	ldr	r2, [pc, #196]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8002fe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7fe f92a 	bl	8001244 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7fe f926 	bl	8001244 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e091      	b.n	800312a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003006:	4b29      	ldr	r3, [pc, #164]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69da      	ldr	r2, [r3, #28]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	019b      	lsls	r3, r3, #6
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	085b      	lsrs	r3, r3, #1
 800302a:	3b01      	subs	r3, #1
 800302c:	041b      	lsls	r3, r3, #16
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	061b      	lsls	r3, r3, #24
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	071b      	lsls	r3, r3, #28
 800303e:	491b      	ldr	r1, [pc, #108]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8003040:	4313      	orrs	r3, r2
 8003042:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003044:	4b19      	ldr	r3, [pc, #100]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a18      	ldr	r2, [pc, #96]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 800304a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe f8f8 	bl	8001244 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003058:	f7fe f8f4 	bl	8001244 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e05f      	b.n	800312a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x47c>
 8003076:	e057      	b.n	8003128 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003078:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 800307e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7fe f8de 	bl	8001244 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe f8da 	bl	8001244 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e045      	b.n	800312a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	4b03      	ldr	r3, [pc, #12]	; (80030ac <HAL_RCC_OscConfig+0x4d0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x4b0>
 80030aa:	e03d      	b.n	8003128 <HAL_RCC_OscConfig+0x54c>
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030b4:	4b1f      	ldr	r3, [pc, #124]	; (8003134 <HAL_RCC_OscConfig+0x558>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d030      	beq.n	8003124 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d129      	bne.n	8003124 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030da:	429a      	cmp	r2, r3
 80030dc:	d122      	bne.n	8003124 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030e4:	4013      	ands	r3, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d119      	bne.n	8003124 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	085b      	lsrs	r3, r3, #1
 80030fc:	3b01      	subs	r3, #1
 80030fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003100:	429a      	cmp	r2, r3
 8003102:	d10f      	bne.n	8003124 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003110:	429a      	cmp	r2, r3
 8003112:	d107      	bne.n	8003124 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800

08003138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0d0      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003150:	4b6a      	ldr	r3, [pc, #424]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d910      	bls.n	8003180 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315e:	4b67      	ldr	r3, [pc, #412]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 020f 	bic.w	r2, r3, #15
 8003166:	4965      	ldr	r1, [pc, #404]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800316e:	4b63      	ldr	r3, [pc, #396]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e0b8      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d020      	beq.n	80031ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003198:	4b59      	ldr	r3, [pc, #356]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	4a58      	ldr	r2, [pc, #352]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 800319e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031b0:	4b53      	ldr	r3, [pc, #332]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	4a52      	ldr	r2, [pc, #328]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80031b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031bc:	4b50      	ldr	r3, [pc, #320]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	494d      	ldr	r1, [pc, #308]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d040      	beq.n	800325c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e2:	4b47      	ldr	r3, [pc, #284]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d115      	bne.n	800321a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e07f      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d107      	bne.n	800320a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fa:	4b41      	ldr	r3, [pc, #260]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e073      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320a:	4b3d      	ldr	r3, [pc, #244]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e06b      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800321a:	4b39      	ldr	r3, [pc, #228]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f023 0203 	bic.w	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4936      	ldr	r1, [pc, #216]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 8003228:	4313      	orrs	r3, r2
 800322a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800322c:	f7fe f80a 	bl	8001244 <HAL_GetTick>
 8003230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003232:	e00a      	b.n	800324a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003234:	f7fe f806 	bl	8001244 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003242:	4293      	cmp	r3, r2
 8003244:	d901      	bls.n	800324a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e053      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324a:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 020c 	and.w	r2, r3, #12
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	429a      	cmp	r2, r3
 800325a:	d1eb      	bne.n	8003234 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800325c:	4b27      	ldr	r3, [pc, #156]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d210      	bcs.n	800328c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b24      	ldr	r3, [pc, #144]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 020f 	bic.w	r2, r3, #15
 8003272:	4922      	ldr	r1, [pc, #136]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b20      	ldr	r3, [pc, #128]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e032      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003298:	4b19      	ldr	r3, [pc, #100]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4916      	ldr	r1, [pc, #88]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032b6:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	490e      	ldr	r1, [pc, #56]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032ca:	f000 f821 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 80032ce:	4602      	mov	r2, r0
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	091b      	lsrs	r3, r3, #4
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	490a      	ldr	r1, [pc, #40]	; (8003304 <HAL_RCC_ClockConfig+0x1cc>)
 80032dc:	5ccb      	ldrb	r3, [r1, r3]
 80032de:	fa22 f303 	lsr.w	r3, r2, r3
 80032e2:	4a09      	ldr	r2, [pc, #36]	; (8003308 <HAL_RCC_ClockConfig+0x1d0>)
 80032e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_RCC_ClockConfig+0x1d4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd ff66 	bl	80011bc <HAL_InitTick>

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023c00 	.word	0x40023c00
 8003300:	40023800 	.word	0x40023800
 8003304:	08005d2c 	.word	0x08005d2c
 8003308:	20000068 	.word	0x20000068
 800330c:	2000006c 	.word	0x2000006c

08003310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003314:	b090      	sub	sp, #64	; 0x40
 8003316:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	637b      	str	r3, [r7, #52]	; 0x34
 800331c:	2300      	movs	r3, #0
 800331e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003320:	2300      	movs	r3, #0
 8003322:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003328:	4b59      	ldr	r3, [pc, #356]	; (8003490 <HAL_RCC_GetSysClockFreq+0x180>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 030c 	and.w	r3, r3, #12
 8003330:	2b08      	cmp	r3, #8
 8003332:	d00d      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x40>
 8003334:	2b08      	cmp	r3, #8
 8003336:	f200 80a1 	bhi.w	800347c <HAL_RCC_GetSysClockFreq+0x16c>
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x34>
 800333e:	2b04      	cmp	r3, #4
 8003340:	d003      	beq.n	800334a <HAL_RCC_GetSysClockFreq+0x3a>
 8003342:	e09b      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003344:	4b53      	ldr	r3, [pc, #332]	; (8003494 <HAL_RCC_GetSysClockFreq+0x184>)
 8003346:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003348:	e09b      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800334a:	4b53      	ldr	r3, [pc, #332]	; (8003498 <HAL_RCC_GetSysClockFreq+0x188>)
 800334c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800334e:	e098      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003350:	4b4f      	ldr	r3, [pc, #316]	; (8003490 <HAL_RCC_GetSysClockFreq+0x180>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003358:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800335a:	4b4d      	ldr	r3, [pc, #308]	; (8003490 <HAL_RCC_GetSysClockFreq+0x180>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d028      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003366:	4b4a      	ldr	r3, [pc, #296]	; (8003490 <HAL_RCC_GetSysClockFreq+0x180>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	099b      	lsrs	r3, r3, #6
 800336c:	2200      	movs	r2, #0
 800336e:	623b      	str	r3, [r7, #32]
 8003370:	627a      	str	r2, [r7, #36]	; 0x24
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003378:	2100      	movs	r1, #0
 800337a:	4b47      	ldr	r3, [pc, #284]	; (8003498 <HAL_RCC_GetSysClockFreq+0x188>)
 800337c:	fb03 f201 	mul.w	r2, r3, r1
 8003380:	2300      	movs	r3, #0
 8003382:	fb00 f303 	mul.w	r3, r0, r3
 8003386:	4413      	add	r3, r2
 8003388:	4a43      	ldr	r2, [pc, #268]	; (8003498 <HAL_RCC_GetSysClockFreq+0x188>)
 800338a:	fba0 1202 	umull	r1, r2, r0, r2
 800338e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003390:	460a      	mov	r2, r1
 8003392:	62ba      	str	r2, [r7, #40]	; 0x28
 8003394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003396:	4413      	add	r3, r2
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800339a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339c:	2200      	movs	r2, #0
 800339e:	61bb      	str	r3, [r7, #24]
 80033a0:	61fa      	str	r2, [r7, #28]
 80033a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80033aa:	f7fc ffa1 	bl	80002f0 <__aeabi_uldivmod>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4613      	mov	r3, r2
 80033b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033b6:	e053      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b8:	4b35      	ldr	r3, [pc, #212]	; (8003490 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	099b      	lsrs	r3, r3, #6
 80033be:	2200      	movs	r2, #0
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	617a      	str	r2, [r7, #20]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033ca:	f04f 0b00 	mov.w	fp, #0
 80033ce:	4652      	mov	r2, sl
 80033d0:	465b      	mov	r3, fp
 80033d2:	f04f 0000 	mov.w	r0, #0
 80033d6:	f04f 0100 	mov.w	r1, #0
 80033da:	0159      	lsls	r1, r3, #5
 80033dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e0:	0150      	lsls	r0, r2, #5
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	ebb2 080a 	subs.w	r8, r2, sl
 80033ea:	eb63 090b 	sbc.w	r9, r3, fp
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003402:	ebb2 0408 	subs.w	r4, r2, r8
 8003406:	eb63 0509 	sbc.w	r5, r3, r9
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	00eb      	lsls	r3, r5, #3
 8003414:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003418:	00e2      	lsls	r2, r4, #3
 800341a:	4614      	mov	r4, r2
 800341c:	461d      	mov	r5, r3
 800341e:	eb14 030a 	adds.w	r3, r4, sl
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	eb45 030b 	adc.w	r3, r5, fp
 8003428:	607b      	str	r3, [r7, #4]
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003436:	4629      	mov	r1, r5
 8003438:	028b      	lsls	r3, r1, #10
 800343a:	4621      	mov	r1, r4
 800343c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003440:	4621      	mov	r1, r4
 8003442:	028a      	lsls	r2, r1, #10
 8003444:	4610      	mov	r0, r2
 8003446:	4619      	mov	r1, r3
 8003448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344a:	2200      	movs	r2, #0
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	60fa      	str	r2, [r7, #12]
 8003450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003454:	f7fc ff4c 	bl	80002f0 <__aeabi_uldivmod>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4613      	mov	r3, r2
 800345e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003460:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <HAL_RCC_GetSysClockFreq+0x180>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	0c1b      	lsrs	r3, r3, #16
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	3301      	adds	r3, #1
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003470:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	fbb2 f3f3 	udiv	r3, r2, r3
 8003478:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800347a:	e002      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_RCC_GetSysClockFreq+0x184>)
 800347e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003484:	4618      	mov	r0, r3
 8003486:	3740      	adds	r7, #64	; 0x40
 8003488:	46bd      	mov	sp, r7
 800348a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800
 8003494:	00f42400 	.word	0x00f42400
 8003498:	017d7840 	.word	0x017d7840

0800349c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034a2:	681b      	ldr	r3, [r3, #0]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	20000068 	.word	0x20000068

080034b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034b8:	f7ff fff0 	bl	800349c <HAL_RCC_GetHCLKFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	0a9b      	lsrs	r3, r3, #10
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4903      	ldr	r1, [pc, #12]	; (80034d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40023800 	.word	0x40023800
 80034d8:	08005d3c 	.word	0x08005d3c

080034dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034e0:	f7ff ffdc 	bl	800349c <HAL_RCC_GetHCLKFreq>
 80034e4:	4602      	mov	r2, r0
 80034e6:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	0b5b      	lsrs	r3, r3, #13
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	4903      	ldr	r1, [pc, #12]	; (8003500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034f2:	5ccb      	ldrb	r3, [r1, r3]
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40023800 	.word	0x40023800
 8003500:	08005d3c 	.word	0x08005d3c

08003504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d012      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800352c:	4b69      	ldr	r3, [pc, #420]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a68      	ldr	r2, [pc, #416]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003532:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003536:	6093      	str	r3, [r2, #8]
 8003538:	4b66      	ldr	r3, [pc, #408]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003540:	4964      	ldr	r1, [pc, #400]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800354e:	2301      	movs	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d017      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800355e:	4b5d      	ldr	r3, [pc, #372]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003564:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356c:	4959      	ldr	r1, [pc, #356]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800357c:	d101      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800357e:	2301      	movs	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800358a:	2301      	movs	r3, #1
 800358c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d017      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800359a:	4b4e      	ldr	r3, [pc, #312]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	494a      	ldr	r1, [pc, #296]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035b8:	d101      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035ba:	2301      	movs	r3, #1
 80035bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035c6:	2301      	movs	r3, #1
 80035c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035d6:	2301      	movs	r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 808b 	beq.w	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035e8:	4b3a      	ldr	r3, [pc, #232]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	4a39      	ldr	r2, [pc, #228]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f2:	6413      	str	r3, [r2, #64]	; 0x40
 80035f4:	4b37      	ldr	r3, [pc, #220]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003600:	4b35      	ldr	r3, [pc, #212]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a34      	ldr	r2, [pc, #208]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800360c:	f7fd fe1a 	bl	8001244 <HAL_GetTick>
 8003610:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003614:	f7fd fe16 	bl	8001244 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e38f      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003626:	4b2c      	ldr	r3, [pc, #176]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003632:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d035      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	429a      	cmp	r2, r3
 800364e:	d02e      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003650:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003658:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800365a:	4b1e      	ldr	r3, [pc, #120]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	4a1d      	ldr	r2, [pc, #116]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003666:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	4a1a      	ldr	r2, [pc, #104]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003670:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003672:	4a18      	ldr	r2, [pc, #96]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003678:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b01      	cmp	r3, #1
 8003682:	d114      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fd fdde 	bl	8001244 <HAL_GetTick>
 8003688:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368a:	e00a      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800368c:	f7fd fdda 	bl	8001244 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	; 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e351      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0ee      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ba:	d111      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036c8:	4b04      	ldr	r3, [pc, #16]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036ca:	400b      	ands	r3, r1
 80036cc:	4901      	ldr	r1, [pc, #4]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]
 80036d2:	e00b      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40007000 	.word	0x40007000
 80036dc:	0ffffcff 	.word	0x0ffffcff
 80036e0:	4bac      	ldr	r3, [pc, #688]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4aab      	ldr	r2, [pc, #684]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036ea:	6093      	str	r3, [r2, #8]
 80036ec:	4ba9      	ldr	r3, [pc, #676]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f8:	49a6      	ldr	r1, [pc, #664]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b00      	cmp	r3, #0
 8003708:	d010      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800370a:	4ba2      	ldr	r3, [pc, #648]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800370c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003710:	4aa0      	ldr	r2, [pc, #640]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003716:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800371a:	4b9e      	ldr	r3, [pc, #632]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800371c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	499b      	ldr	r1, [pc, #620]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003738:	4b96      	ldr	r3, [pc, #600]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003746:	4993      	ldr	r1, [pc, #588]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800375a:	4b8e      	ldr	r3, [pc, #568]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003760:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003768:	498a      	ldr	r1, [pc, #552]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800377c:	4b85      	ldr	r3, [pc, #532]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800378a:	4982      	ldr	r1, [pc, #520]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800379e:	4b7d      	ldr	r3, [pc, #500]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	4979      	ldr	r1, [pc, #484]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037c0:	4b74      	ldr	r3, [pc, #464]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c6:	f023 0203 	bic.w	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	4971      	ldr	r1, [pc, #452]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037e2:	4b6c      	ldr	r3, [pc, #432]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e8:	f023 020c 	bic.w	r2, r3, #12
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f0:	4968      	ldr	r1, [pc, #416]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003804:	4b63      	ldr	r3, [pc, #396]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003812:	4960      	ldr	r1, [pc, #384]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003826:	4b5b      	ldr	r3, [pc, #364]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003834:	4957      	ldr	r1, [pc, #348]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003848:	4b52      	ldr	r3, [pc, #328]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	494f      	ldr	r1, [pc, #316]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800386a:	4b4a      	ldr	r3, [pc, #296]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003870:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003878:	4946      	ldr	r1, [pc, #280]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800388c:	4b41      	ldr	r3, [pc, #260]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003892:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389a:	493e      	ldr	r1, [pc, #248]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038ae:	4b39      	ldr	r3, [pc, #228]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038bc:	4935      	ldr	r1, [pc, #212]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038d0:	4b30      	ldr	r3, [pc, #192]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038de:	492d      	ldr	r1, [pc, #180]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d011      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038f2:	4b28      	ldr	r3, [pc, #160]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003900:	4924      	ldr	r1, [pc, #144]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800390c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003910:	d101      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003912:	2301      	movs	r3, #1
 8003914:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003922:	2301      	movs	r3, #1
 8003924:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003932:	4b18      	ldr	r3, [pc, #96]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003940:	4914      	ldr	r1, [pc, #80]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00b      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003954:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003964:	490b      	ldr	r1, [pc, #44]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00f      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003978:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003988:	4902      	ldr	r1, [pc, #8]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003990:	e002      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00b      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039a4:	4b8a      	ldr	r3, [pc, #552]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b4:	4986      	ldr	r1, [pc, #536]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00b      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80039c8:	4b81      	ldr	r3, [pc, #516]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d8:	497d      	ldr	r1, [pc, #500]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d006      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80d6 	beq.w	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039f4:	4b76      	ldr	r3, [pc, #472]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a75      	ldr	r2, [pc, #468]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a00:	f7fd fc20 	bl	8001244 <HAL_GetTick>
 8003a04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a08:	f7fd fc1c 	bl	8001244 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	; 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e195      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a1a:	4b6d      	ldr	r3, [pc, #436]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d021      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d11d      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a3a:	4b65      	ldr	r3, [pc, #404]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a40:	0c1b      	lsrs	r3, r3, #16
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a48:	4b61      	ldr	r3, [pc, #388]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a4e:	0e1b      	lsrs	r3, r3, #24
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	019a      	lsls	r2, r3, #6
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	041b      	lsls	r3, r3, #16
 8003a60:	431a      	orrs	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	061b      	lsls	r3, r3, #24
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	071b      	lsls	r3, r3, #28
 8003a6e:	4958      	ldr	r1, [pc, #352]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d004      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a8a:	d00a      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d02e      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aa0:	d129      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003aa2:	4b4b      	ldr	r3, [pc, #300]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aa8:	0c1b      	lsrs	r3, r3, #16
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ab0:	4b47      	ldr	r3, [pc, #284]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab6:	0f1b      	lsrs	r3, r3, #28
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	019a      	lsls	r2, r3, #6
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	061b      	lsls	r3, r3, #24
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	071b      	lsls	r3, r3, #28
 8003ad6:	493e      	ldr	r1, [pc, #248]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ade:	4b3c      	ldr	r3, [pc, #240]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae4:	f023 021f 	bic.w	r2, r3, #31
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	3b01      	subs	r3, #1
 8003aee:	4938      	ldr	r1, [pc, #224]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01d      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b02:	4b33      	ldr	r3, [pc, #204]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b08:	0e1b      	lsrs	r3, r3, #24
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b10:	4b2f      	ldr	r3, [pc, #188]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b16:	0f1b      	lsrs	r3, r3, #28
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	019a      	lsls	r2, r3, #6
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	041b      	lsls	r3, r3, #16
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	061b      	lsls	r3, r3, #24
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	071b      	lsls	r3, r3, #28
 8003b36:	4926      	ldr	r1, [pc, #152]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d011      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	019a      	lsls	r2, r3, #6
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	041b      	lsls	r3, r3, #16
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	061b      	lsls	r3, r3, #24
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	071b      	lsls	r3, r3, #28
 8003b66:	491a      	ldr	r1, [pc, #104]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b6e:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a17      	ldr	r2, [pc, #92]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b7a:	f7fd fb63 	bl	8001244 <HAL_GetTick>
 8003b7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b82:	f7fd fb5f 	bl	8001244 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b64      	cmp	r3, #100	; 0x64
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e0d8      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b94:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	f040 80ce 	bne.w	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ba8:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a08      	ldr	r2, [pc, #32]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb4:	f7fd fb46 	bl	8001244 <HAL_GetTick>
 8003bb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bba:	e00b      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bbc:	f7fd fb42 	bl	8001244 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d904      	bls.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e0bb      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003bce:	bf00      	nop
 8003bd0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bd4:	4b5e      	ldr	r3, [pc, #376]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003be0:	d0ec      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d009      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d02e      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d12a      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c0a:	4b51      	ldr	r3, [pc, #324]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c10:	0c1b      	lsrs	r3, r3, #16
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c18:	4b4d      	ldr	r3, [pc, #308]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	0f1b      	lsrs	r3, r3, #28
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	019a      	lsls	r2, r3, #6
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	041b      	lsls	r3, r3, #16
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	061b      	lsls	r3, r3, #24
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	071b      	lsls	r3, r3, #28
 8003c3e:	4944      	ldr	r1, [pc, #272]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c46:	4b42      	ldr	r3, [pc, #264]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	3b01      	subs	r3, #1
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	493d      	ldr	r1, [pc, #244]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d022      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c74:	d11d      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c76:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	0e1b      	lsrs	r3, r3, #24
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c84:	4b32      	ldr	r3, [pc, #200]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8a:	0f1b      	lsrs	r3, r3, #28
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	019a      	lsls	r2, r3, #6
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	041b      	lsls	r3, r3, #16
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	061b      	lsls	r3, r3, #24
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	071b      	lsls	r3, r3, #28
 8003caa:	4929      	ldr	r1, [pc, #164]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d028      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cbe:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc4:	0e1b      	lsrs	r3, r3, #24
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ccc:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	0c1b      	lsrs	r3, r3, #16
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	019a      	lsls	r2, r3, #6
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	041b      	lsls	r3, r3, #16
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	061b      	lsls	r3, r3, #24
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	071b      	lsls	r3, r3, #28
 8003cf2:	4917      	ldr	r1, [pc, #92]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cfa:	4b15      	ldr	r3, [pc, #84]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	4911      	ldr	r1, [pc, #68]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d10:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a0e      	ldr	r2, [pc, #56]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d1c:	f7fd fa92 	bl	8001244 <HAL_GetTick>
 8003d20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d24:	f7fd fa8e 	bl	8001244 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e007      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d42:	d1ef      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800

08003d54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e040      	b.n	8003de8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fd f870 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2224      	movs	r2, #36	; 0x24
 8003d80:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fc06 	bl	80045a4 <UART_SetConfig>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e022      	b.n	8003de8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fe5e 	bl	8004a6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fee5 	bl	8004bb0 <UART_CheckIdleState>
 8003de6:	4603      	mov	r3, r0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08a      	sub	sp, #40	; 0x28
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d171      	bne.n	8003eec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_UART_Transmit+0x24>
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e06a      	b.n	8003eee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2221      	movs	r2, #33	; 0x21
 8003e24:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e26:	f7fd fa0d 	bl	8001244 <HAL_GetTick>
 8003e2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	88fa      	ldrh	r2, [r7, #6]
 8003e30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	88fa      	ldrh	r2, [r7, #6]
 8003e38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e44:	d108      	bne.n	8003e58 <HAL_UART_Transmit+0x68>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d104      	bne.n	8003e58 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	e003      	b.n	8003e60 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e60:	e02c      	b.n	8003ebc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2180      	movs	r1, #128	; 0x80
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 feec 	bl	8004c4a <UART_WaitOnFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e038      	b.n	8003eee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10b      	bne.n	8003e9a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e90:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	3302      	adds	r3, #2
 8003e96:	61bb      	str	r3, [r7, #24]
 8003e98:	e007      	b.n	8003eaa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	781a      	ldrb	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1cc      	bne.n	8003e62 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	2140      	movs	r1, #64	; 0x40
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 feb9 	bl	8004c4a <UART_WaitOnFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e005      	b.n	8003eee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e000      	b.n	8003eee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
  }
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3720      	adds	r7, #32
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b08a      	sub	sp, #40	; 0x28
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	4613      	mov	r3, r2
 8003f02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	d132      	bne.n	8003f74 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_UART_Receive_IT+0x24>
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e02b      	b.n	8003f76 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d018      	beq.n	8003f64 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	623b      	str	r3, [r7, #32]
 8003f52:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	69f9      	ldr	r1, [r7, #28]
 8003f56:	6a3a      	ldr	r2, [r7, #32]
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e6      	bne.n	8003f32 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f64:	88fb      	ldrh	r3, [r7, #6]
 8003f66:	461a      	mov	r2, r3
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 ff34 	bl	8004dd8 <UART_Start_Receive_IT>
 8003f70:	4603      	mov	r3, r0
 8003f72:	e000      	b.n	8003f76 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3728      	adds	r7, #40	; 0x28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b0ba      	sub	sp, #232	; 0xe8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003fa6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003faa:	f640 030f 	movw	r3, #2063	; 0x80f
 8003fae:	4013      	ands	r3, r2
 8003fb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003fb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d115      	bne.n	8003fe8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00f      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fcc:	f003 0320 	and.w	r3, r3, #32
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d009      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 82ac 	beq.w	8004536 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	4798      	blx	r3
      }
      return;
 8003fe6:	e2a6      	b.n	8004536 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003fe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 8117 	beq.w	8004220 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003ffe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004002:	4b85      	ldr	r3, [pc, #532]	; (8004218 <HAL_UART_IRQHandler+0x298>)
 8004004:	4013      	ands	r3, r2
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 810a 	beq.w	8004220 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800400c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d011      	beq.n	800403c <HAL_UART_IRQHandler+0xbc>
 8004018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800401c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00b      	beq.n	800403c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2201      	movs	r2, #1
 800402a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004032:	f043 0201 	orr.w	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800403c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d011      	beq.n	800406c <HAL_UART_IRQHandler+0xec>
 8004048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00b      	beq.n	800406c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2202      	movs	r2, #2
 800405a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004062:	f043 0204 	orr.w	r2, r3, #4
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800406c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d011      	beq.n	800409c <HAL_UART_IRQHandler+0x11c>
 8004078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00b      	beq.n	800409c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2204      	movs	r2, #4
 800408a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004092:	f043 0202 	orr.w	r2, r3, #2
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800409c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d017      	beq.n	80040d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d105      	bne.n	80040c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80040b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00b      	beq.n	80040d8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2208      	movs	r2, #8
 80040c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ce:	f043 0208 	orr.w	r2, r3, #8
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d012      	beq.n	800410a <HAL_UART_IRQHandler+0x18a>
 80040e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00c      	beq.n	800410a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004100:	f043 0220 	orr.w	r2, r3, #32
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8212 	beq.w	800453a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00d      	beq.n	800413e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	d007      	beq.n	800413e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004144:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d005      	beq.n	8004162 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800415a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800415e:	2b00      	cmp	r3, #0
 8004160:	d04f      	beq.n	8004202 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fefe 	bl	8004f64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004172:	2b40      	cmp	r3, #64	; 0x40
 8004174:	d141      	bne.n	80041fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3308      	adds	r3, #8
 800417c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004180:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004184:	e853 3f00 	ldrex	r3, [r3]
 8004188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800418c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3308      	adds	r3, #8
 800419e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80041a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80041a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041b2:	e841 2300 	strex	r3, r2, [r1]
 80041b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1d9      	bne.n	8004176 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d013      	beq.n	80041f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ce:	4a13      	ldr	r2, [pc, #76]	; (800421c <HAL_UART_IRQHandler+0x29c>)
 80041d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe f846 	bl	8002268 <HAL_DMA_Abort_IT>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d017      	beq.n	8004212 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80041ec:	4610      	mov	r0, r2
 80041ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f0:	e00f      	b.n	8004212 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f9b6 	bl	8004564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f8:	e00b      	b.n	8004212 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f9b2 	bl	8004564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004200:	e007      	b.n	8004212 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f9ae 	bl	8004564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004210:	e193      	b.n	800453a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004212:	bf00      	nop
    return;
 8004214:	e191      	b.n	800453a <HAL_UART_IRQHandler+0x5ba>
 8004216:	bf00      	nop
 8004218:	04000120 	.word	0x04000120
 800421c:	0800502d 	.word	0x0800502d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004224:	2b01      	cmp	r3, #1
 8004226:	f040 814c 	bne.w	80044c2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422e:	f003 0310 	and.w	r3, r3, #16
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 8145 	beq.w	80044c2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 813e 	beq.w	80044c2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2210      	movs	r2, #16
 800424c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004258:	2b40      	cmp	r3, #64	; 0x40
 800425a:	f040 80b6 	bne.w	80043ca <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800426a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 8165 	beq.w	800453e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800427a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800427e:	429a      	cmp	r2, r3
 8004280:	f080 815d 	bcs.w	800453e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800428a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004298:	f000 8086 	beq.w	80043a8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	461a      	mov	r2, r3
 80042c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80042c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80042d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80042de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1da      	bne.n	800429c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3308      	adds	r3, #8
 80042ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042f0:	e853 3f00 	ldrex	r3, [r3]
 80042f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80042f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3308      	adds	r3, #8
 8004306:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800430a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800430e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004310:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004312:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800431c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1e1      	bne.n	80042e6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3308      	adds	r3, #8
 8004328:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800432c:	e853 3f00 	ldrex	r3, [r3]
 8004330:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004338:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3308      	adds	r3, #8
 8004342:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004346:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004348:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800434c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e3      	bne.n	8004322 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2220      	movs	r2, #32
 800435e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004378:	f023 0310 	bic.w	r3, r3, #16
 800437c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800438a:	65bb      	str	r3, [r7, #88]	; 0x58
 800438c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004390:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e4      	bne.n	8004368 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fd fef0 	bl	8002188 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	b29b      	uxth	r3, r3
 80043c0:	4619      	mov	r1, r3
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f8d8 	bl	8004578 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043c8:	e0b9      	b.n	800453e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 80ab 	beq.w	8004542 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80043ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 80a6 	beq.w	8004542 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004406:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800440a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004418:	647b      	str	r3, [r7, #68]	; 0x44
 800441a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800441e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e4      	bne.n	80043f6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3308      	adds	r3, #8
 8004432:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	e853 3f00 	ldrex	r3, [r3]
 800443a:	623b      	str	r3, [r7, #32]
   return(result);
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	f023 0301 	bic.w	r3, r3, #1
 8004442:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3308      	adds	r3, #8
 800444c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004450:	633a      	str	r2, [r7, #48]	; 0x30
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e3      	bne.n	800442c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	60fb      	str	r3, [r7, #12]
   return(result);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f023 0310 	bic.w	r3, r3, #16
 800448c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	461a      	mov	r2, r3
 8004496:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800449a:	61fb      	str	r3, [r7, #28]
 800449c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	69b9      	ldr	r1, [r7, #24]
 80044a0:	69fa      	ldr	r2, [r7, #28]
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	617b      	str	r3, [r7, #20]
   return(result);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e4      	bne.n	8004478 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2202      	movs	r2, #2
 80044b2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044b8:	4619      	mov	r1, r3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f85c 	bl	8004578 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044c0:	e03f      	b.n	8004542 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00e      	beq.n	80044ec <HAL_UART_IRQHandler+0x56c>
 80044ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d008      	beq.n	80044ec <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80044e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f853 	bl	8004590 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80044ea:	e02d      	b.n	8004548 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80044ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00e      	beq.n	8004516 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80044f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004500:	2b00      	cmp	r3, #0
 8004502:	d008      	beq.n	8004516 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01c      	beq.n	8004546 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	4798      	blx	r3
    }
    return;
 8004514:	e017      	b.n	8004546 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d012      	beq.n	8004548 <HAL_UART_IRQHandler+0x5c8>
 8004522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00c      	beq.n	8004548 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 fd92 	bl	8005058 <UART_EndTransmit_IT>
    return;
 8004534:	e008      	b.n	8004548 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004536:	bf00      	nop
 8004538:	e006      	b.n	8004548 <HAL_UART_IRQHandler+0x5c8>
    return;
 800453a:	bf00      	nop
 800453c:	e004      	b.n	8004548 <HAL_UART_IRQHandler+0x5c8>
      return;
 800453e:	bf00      	nop
 8004540:	e002      	b.n	8004548 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004542:	bf00      	nop
 8004544:	e000      	b.n	8004548 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004546:	bf00      	nop
  }

}
 8004548:	37e8      	adds	r7, #232	; 0xe8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop

08004550 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4ba6      	ldr	r3, [pc, #664]	; (8004868 <UART_SetConfig+0x2c4>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6812      	ldr	r2, [r2, #0]
 80045d6:	6979      	ldr	r1, [r7, #20]
 80045d8:	430b      	orrs	r3, r1
 80045da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	430a      	orrs	r2, r1
 8004614:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a94      	ldr	r2, [pc, #592]	; (800486c <UART_SetConfig+0x2c8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d120      	bne.n	8004662 <UART_SetConfig+0xbe>
 8004620:	4b93      	ldr	r3, [pc, #588]	; (8004870 <UART_SetConfig+0x2cc>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	2b03      	cmp	r3, #3
 800462c:	d816      	bhi.n	800465c <UART_SetConfig+0xb8>
 800462e:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <UART_SetConfig+0x90>)
 8004630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004634:	08004645 	.word	0x08004645
 8004638:	08004651 	.word	0x08004651
 800463c:	0800464b 	.word	0x0800464b
 8004640:	08004657 	.word	0x08004657
 8004644:	2301      	movs	r3, #1
 8004646:	77fb      	strb	r3, [r7, #31]
 8004648:	e150      	b.n	80048ec <UART_SetConfig+0x348>
 800464a:	2302      	movs	r3, #2
 800464c:	77fb      	strb	r3, [r7, #31]
 800464e:	e14d      	b.n	80048ec <UART_SetConfig+0x348>
 8004650:	2304      	movs	r3, #4
 8004652:	77fb      	strb	r3, [r7, #31]
 8004654:	e14a      	b.n	80048ec <UART_SetConfig+0x348>
 8004656:	2308      	movs	r3, #8
 8004658:	77fb      	strb	r3, [r7, #31]
 800465a:	e147      	b.n	80048ec <UART_SetConfig+0x348>
 800465c:	2310      	movs	r3, #16
 800465e:	77fb      	strb	r3, [r7, #31]
 8004660:	e144      	b.n	80048ec <UART_SetConfig+0x348>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a83      	ldr	r2, [pc, #524]	; (8004874 <UART_SetConfig+0x2d0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d132      	bne.n	80046d2 <UART_SetConfig+0x12e>
 800466c:	4b80      	ldr	r3, [pc, #512]	; (8004870 <UART_SetConfig+0x2cc>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	f003 030c 	and.w	r3, r3, #12
 8004676:	2b0c      	cmp	r3, #12
 8004678:	d828      	bhi.n	80046cc <UART_SetConfig+0x128>
 800467a:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <UART_SetConfig+0xdc>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	080046b5 	.word	0x080046b5
 8004684:	080046cd 	.word	0x080046cd
 8004688:	080046cd 	.word	0x080046cd
 800468c:	080046cd 	.word	0x080046cd
 8004690:	080046c1 	.word	0x080046c1
 8004694:	080046cd 	.word	0x080046cd
 8004698:	080046cd 	.word	0x080046cd
 800469c:	080046cd 	.word	0x080046cd
 80046a0:	080046bb 	.word	0x080046bb
 80046a4:	080046cd 	.word	0x080046cd
 80046a8:	080046cd 	.word	0x080046cd
 80046ac:	080046cd 	.word	0x080046cd
 80046b0:	080046c7 	.word	0x080046c7
 80046b4:	2300      	movs	r3, #0
 80046b6:	77fb      	strb	r3, [r7, #31]
 80046b8:	e118      	b.n	80048ec <UART_SetConfig+0x348>
 80046ba:	2302      	movs	r3, #2
 80046bc:	77fb      	strb	r3, [r7, #31]
 80046be:	e115      	b.n	80048ec <UART_SetConfig+0x348>
 80046c0:	2304      	movs	r3, #4
 80046c2:	77fb      	strb	r3, [r7, #31]
 80046c4:	e112      	b.n	80048ec <UART_SetConfig+0x348>
 80046c6:	2308      	movs	r3, #8
 80046c8:	77fb      	strb	r3, [r7, #31]
 80046ca:	e10f      	b.n	80048ec <UART_SetConfig+0x348>
 80046cc:	2310      	movs	r3, #16
 80046ce:	77fb      	strb	r3, [r7, #31]
 80046d0:	e10c      	b.n	80048ec <UART_SetConfig+0x348>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a68      	ldr	r2, [pc, #416]	; (8004878 <UART_SetConfig+0x2d4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d120      	bne.n	800471e <UART_SetConfig+0x17a>
 80046dc:	4b64      	ldr	r3, [pc, #400]	; (8004870 <UART_SetConfig+0x2cc>)
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046e6:	2b30      	cmp	r3, #48	; 0x30
 80046e8:	d013      	beq.n	8004712 <UART_SetConfig+0x16e>
 80046ea:	2b30      	cmp	r3, #48	; 0x30
 80046ec:	d814      	bhi.n	8004718 <UART_SetConfig+0x174>
 80046ee:	2b20      	cmp	r3, #32
 80046f0:	d009      	beq.n	8004706 <UART_SetConfig+0x162>
 80046f2:	2b20      	cmp	r3, #32
 80046f4:	d810      	bhi.n	8004718 <UART_SetConfig+0x174>
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <UART_SetConfig+0x15c>
 80046fa:	2b10      	cmp	r3, #16
 80046fc:	d006      	beq.n	800470c <UART_SetConfig+0x168>
 80046fe:	e00b      	b.n	8004718 <UART_SetConfig+0x174>
 8004700:	2300      	movs	r3, #0
 8004702:	77fb      	strb	r3, [r7, #31]
 8004704:	e0f2      	b.n	80048ec <UART_SetConfig+0x348>
 8004706:	2302      	movs	r3, #2
 8004708:	77fb      	strb	r3, [r7, #31]
 800470a:	e0ef      	b.n	80048ec <UART_SetConfig+0x348>
 800470c:	2304      	movs	r3, #4
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e0ec      	b.n	80048ec <UART_SetConfig+0x348>
 8004712:	2308      	movs	r3, #8
 8004714:	77fb      	strb	r3, [r7, #31]
 8004716:	e0e9      	b.n	80048ec <UART_SetConfig+0x348>
 8004718:	2310      	movs	r3, #16
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e0e6      	b.n	80048ec <UART_SetConfig+0x348>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a56      	ldr	r2, [pc, #344]	; (800487c <UART_SetConfig+0x2d8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d120      	bne.n	800476a <UART_SetConfig+0x1c6>
 8004728:	4b51      	ldr	r3, [pc, #324]	; (8004870 <UART_SetConfig+0x2cc>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004732:	2bc0      	cmp	r3, #192	; 0xc0
 8004734:	d013      	beq.n	800475e <UART_SetConfig+0x1ba>
 8004736:	2bc0      	cmp	r3, #192	; 0xc0
 8004738:	d814      	bhi.n	8004764 <UART_SetConfig+0x1c0>
 800473a:	2b80      	cmp	r3, #128	; 0x80
 800473c:	d009      	beq.n	8004752 <UART_SetConfig+0x1ae>
 800473e:	2b80      	cmp	r3, #128	; 0x80
 8004740:	d810      	bhi.n	8004764 <UART_SetConfig+0x1c0>
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <UART_SetConfig+0x1a8>
 8004746:	2b40      	cmp	r3, #64	; 0x40
 8004748:	d006      	beq.n	8004758 <UART_SetConfig+0x1b4>
 800474a:	e00b      	b.n	8004764 <UART_SetConfig+0x1c0>
 800474c:	2300      	movs	r3, #0
 800474e:	77fb      	strb	r3, [r7, #31]
 8004750:	e0cc      	b.n	80048ec <UART_SetConfig+0x348>
 8004752:	2302      	movs	r3, #2
 8004754:	77fb      	strb	r3, [r7, #31]
 8004756:	e0c9      	b.n	80048ec <UART_SetConfig+0x348>
 8004758:	2304      	movs	r3, #4
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e0c6      	b.n	80048ec <UART_SetConfig+0x348>
 800475e:	2308      	movs	r3, #8
 8004760:	77fb      	strb	r3, [r7, #31]
 8004762:	e0c3      	b.n	80048ec <UART_SetConfig+0x348>
 8004764:	2310      	movs	r3, #16
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e0c0      	b.n	80048ec <UART_SetConfig+0x348>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a44      	ldr	r2, [pc, #272]	; (8004880 <UART_SetConfig+0x2dc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d125      	bne.n	80047c0 <UART_SetConfig+0x21c>
 8004774:	4b3e      	ldr	r3, [pc, #248]	; (8004870 <UART_SetConfig+0x2cc>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800477e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004782:	d017      	beq.n	80047b4 <UART_SetConfig+0x210>
 8004784:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004788:	d817      	bhi.n	80047ba <UART_SetConfig+0x216>
 800478a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800478e:	d00b      	beq.n	80047a8 <UART_SetConfig+0x204>
 8004790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004794:	d811      	bhi.n	80047ba <UART_SetConfig+0x216>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <UART_SetConfig+0x1fe>
 800479a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800479e:	d006      	beq.n	80047ae <UART_SetConfig+0x20a>
 80047a0:	e00b      	b.n	80047ba <UART_SetConfig+0x216>
 80047a2:	2300      	movs	r3, #0
 80047a4:	77fb      	strb	r3, [r7, #31]
 80047a6:	e0a1      	b.n	80048ec <UART_SetConfig+0x348>
 80047a8:	2302      	movs	r3, #2
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e09e      	b.n	80048ec <UART_SetConfig+0x348>
 80047ae:	2304      	movs	r3, #4
 80047b0:	77fb      	strb	r3, [r7, #31]
 80047b2:	e09b      	b.n	80048ec <UART_SetConfig+0x348>
 80047b4:	2308      	movs	r3, #8
 80047b6:	77fb      	strb	r3, [r7, #31]
 80047b8:	e098      	b.n	80048ec <UART_SetConfig+0x348>
 80047ba:	2310      	movs	r3, #16
 80047bc:	77fb      	strb	r3, [r7, #31]
 80047be:	e095      	b.n	80048ec <UART_SetConfig+0x348>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a2f      	ldr	r2, [pc, #188]	; (8004884 <UART_SetConfig+0x2e0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d125      	bne.n	8004816 <UART_SetConfig+0x272>
 80047ca:	4b29      	ldr	r3, [pc, #164]	; (8004870 <UART_SetConfig+0x2cc>)
 80047cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047d8:	d017      	beq.n	800480a <UART_SetConfig+0x266>
 80047da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047de:	d817      	bhi.n	8004810 <UART_SetConfig+0x26c>
 80047e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e4:	d00b      	beq.n	80047fe <UART_SetConfig+0x25a>
 80047e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ea:	d811      	bhi.n	8004810 <UART_SetConfig+0x26c>
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <UART_SetConfig+0x254>
 80047f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f4:	d006      	beq.n	8004804 <UART_SetConfig+0x260>
 80047f6:	e00b      	b.n	8004810 <UART_SetConfig+0x26c>
 80047f8:	2301      	movs	r3, #1
 80047fa:	77fb      	strb	r3, [r7, #31]
 80047fc:	e076      	b.n	80048ec <UART_SetConfig+0x348>
 80047fe:	2302      	movs	r3, #2
 8004800:	77fb      	strb	r3, [r7, #31]
 8004802:	e073      	b.n	80048ec <UART_SetConfig+0x348>
 8004804:	2304      	movs	r3, #4
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e070      	b.n	80048ec <UART_SetConfig+0x348>
 800480a:	2308      	movs	r3, #8
 800480c:	77fb      	strb	r3, [r7, #31]
 800480e:	e06d      	b.n	80048ec <UART_SetConfig+0x348>
 8004810:	2310      	movs	r3, #16
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e06a      	b.n	80048ec <UART_SetConfig+0x348>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <UART_SetConfig+0x2e4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d138      	bne.n	8004892 <UART_SetConfig+0x2ee>
 8004820:	4b13      	ldr	r3, [pc, #76]	; (8004870 <UART_SetConfig+0x2cc>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004826:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800482a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800482e:	d017      	beq.n	8004860 <UART_SetConfig+0x2bc>
 8004830:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004834:	d82a      	bhi.n	800488c <UART_SetConfig+0x2e8>
 8004836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483a:	d00b      	beq.n	8004854 <UART_SetConfig+0x2b0>
 800483c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004840:	d824      	bhi.n	800488c <UART_SetConfig+0x2e8>
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <UART_SetConfig+0x2aa>
 8004846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484a:	d006      	beq.n	800485a <UART_SetConfig+0x2b6>
 800484c:	e01e      	b.n	800488c <UART_SetConfig+0x2e8>
 800484e:	2300      	movs	r3, #0
 8004850:	77fb      	strb	r3, [r7, #31]
 8004852:	e04b      	b.n	80048ec <UART_SetConfig+0x348>
 8004854:	2302      	movs	r3, #2
 8004856:	77fb      	strb	r3, [r7, #31]
 8004858:	e048      	b.n	80048ec <UART_SetConfig+0x348>
 800485a:	2304      	movs	r3, #4
 800485c:	77fb      	strb	r3, [r7, #31]
 800485e:	e045      	b.n	80048ec <UART_SetConfig+0x348>
 8004860:	2308      	movs	r3, #8
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e042      	b.n	80048ec <UART_SetConfig+0x348>
 8004866:	bf00      	nop
 8004868:	efff69f3 	.word	0xefff69f3
 800486c:	40011000 	.word	0x40011000
 8004870:	40023800 	.word	0x40023800
 8004874:	40004400 	.word	0x40004400
 8004878:	40004800 	.word	0x40004800
 800487c:	40004c00 	.word	0x40004c00
 8004880:	40005000 	.word	0x40005000
 8004884:	40011400 	.word	0x40011400
 8004888:	40007800 	.word	0x40007800
 800488c:	2310      	movs	r3, #16
 800488e:	77fb      	strb	r3, [r7, #31]
 8004890:	e02c      	b.n	80048ec <UART_SetConfig+0x348>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a72      	ldr	r2, [pc, #456]	; (8004a60 <UART_SetConfig+0x4bc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d125      	bne.n	80048e8 <UART_SetConfig+0x344>
 800489c:	4b71      	ldr	r3, [pc, #452]	; (8004a64 <UART_SetConfig+0x4c0>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048aa:	d017      	beq.n	80048dc <UART_SetConfig+0x338>
 80048ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048b0:	d817      	bhi.n	80048e2 <UART_SetConfig+0x33e>
 80048b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b6:	d00b      	beq.n	80048d0 <UART_SetConfig+0x32c>
 80048b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048bc:	d811      	bhi.n	80048e2 <UART_SetConfig+0x33e>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <UART_SetConfig+0x326>
 80048c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048c6:	d006      	beq.n	80048d6 <UART_SetConfig+0x332>
 80048c8:	e00b      	b.n	80048e2 <UART_SetConfig+0x33e>
 80048ca:	2300      	movs	r3, #0
 80048cc:	77fb      	strb	r3, [r7, #31]
 80048ce:	e00d      	b.n	80048ec <UART_SetConfig+0x348>
 80048d0:	2302      	movs	r3, #2
 80048d2:	77fb      	strb	r3, [r7, #31]
 80048d4:	e00a      	b.n	80048ec <UART_SetConfig+0x348>
 80048d6:	2304      	movs	r3, #4
 80048d8:	77fb      	strb	r3, [r7, #31]
 80048da:	e007      	b.n	80048ec <UART_SetConfig+0x348>
 80048dc:	2308      	movs	r3, #8
 80048de:	77fb      	strb	r3, [r7, #31]
 80048e0:	e004      	b.n	80048ec <UART_SetConfig+0x348>
 80048e2:	2310      	movs	r3, #16
 80048e4:	77fb      	strb	r3, [r7, #31]
 80048e6:	e001      	b.n	80048ec <UART_SetConfig+0x348>
 80048e8:	2310      	movs	r3, #16
 80048ea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f4:	d15b      	bne.n	80049ae <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80048f6:	7ffb      	ldrb	r3, [r7, #31]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d828      	bhi.n	800494e <UART_SetConfig+0x3aa>
 80048fc:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <UART_SetConfig+0x360>)
 80048fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004902:	bf00      	nop
 8004904:	08004929 	.word	0x08004929
 8004908:	08004931 	.word	0x08004931
 800490c:	08004939 	.word	0x08004939
 8004910:	0800494f 	.word	0x0800494f
 8004914:	0800493f 	.word	0x0800493f
 8004918:	0800494f 	.word	0x0800494f
 800491c:	0800494f 	.word	0x0800494f
 8004920:	0800494f 	.word	0x0800494f
 8004924:	08004947 	.word	0x08004947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004928:	f7fe fdc4 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 800492c:	61b8      	str	r0, [r7, #24]
        break;
 800492e:	e013      	b.n	8004958 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004930:	f7fe fdd4 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 8004934:	61b8      	str	r0, [r7, #24]
        break;
 8004936:	e00f      	b.n	8004958 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004938:	4b4b      	ldr	r3, [pc, #300]	; (8004a68 <UART_SetConfig+0x4c4>)
 800493a:	61bb      	str	r3, [r7, #24]
        break;
 800493c:	e00c      	b.n	8004958 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800493e:	f7fe fce7 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 8004942:	61b8      	str	r0, [r7, #24]
        break;
 8004944:	e008      	b.n	8004958 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800494a:	61bb      	str	r3, [r7, #24]
        break;
 800494c:	e004      	b.n	8004958 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	77bb      	strb	r3, [r7, #30]
        break;
 8004956:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d074      	beq.n	8004a48 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	005a      	lsls	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	441a      	add	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004972:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b0f      	cmp	r3, #15
 8004978:	d916      	bls.n	80049a8 <UART_SetConfig+0x404>
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004980:	d212      	bcs.n	80049a8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	b29b      	uxth	r3, r3
 8004986:	f023 030f 	bic.w	r3, r3, #15
 800498a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	085b      	lsrs	r3, r3, #1
 8004990:	b29b      	uxth	r3, r3
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	b29a      	uxth	r2, r3
 8004998:	89fb      	ldrh	r3, [r7, #14]
 800499a:	4313      	orrs	r3, r2
 800499c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	89fa      	ldrh	r2, [r7, #14]
 80049a4:	60da      	str	r2, [r3, #12]
 80049a6:	e04f      	b.n	8004a48 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	77bb      	strb	r3, [r7, #30]
 80049ac:	e04c      	b.n	8004a48 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049ae:	7ffb      	ldrb	r3, [r7, #31]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d828      	bhi.n	8004a06 <UART_SetConfig+0x462>
 80049b4:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <UART_SetConfig+0x418>)
 80049b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ba:	bf00      	nop
 80049bc:	080049e1 	.word	0x080049e1
 80049c0:	080049e9 	.word	0x080049e9
 80049c4:	080049f1 	.word	0x080049f1
 80049c8:	08004a07 	.word	0x08004a07
 80049cc:	080049f7 	.word	0x080049f7
 80049d0:	08004a07 	.word	0x08004a07
 80049d4:	08004a07 	.word	0x08004a07
 80049d8:	08004a07 	.word	0x08004a07
 80049dc:	080049ff 	.word	0x080049ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049e0:	f7fe fd68 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 80049e4:	61b8      	str	r0, [r7, #24]
        break;
 80049e6:	e013      	b.n	8004a10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e8:	f7fe fd78 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 80049ec:	61b8      	str	r0, [r7, #24]
        break;
 80049ee:	e00f      	b.n	8004a10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049f0:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <UART_SetConfig+0x4c4>)
 80049f2:	61bb      	str	r3, [r7, #24]
        break;
 80049f4:	e00c      	b.n	8004a10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049f6:	f7fe fc8b 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 80049fa:	61b8      	str	r0, [r7, #24]
        break;
 80049fc:	e008      	b.n	8004a10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a02:	61bb      	str	r3, [r7, #24]
        break;
 8004a04:	e004      	b.n	8004a10 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	77bb      	strb	r3, [r7, #30]
        break;
 8004a0e:	bf00      	nop
    }

    if (pclk != 0U)
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d018      	beq.n	8004a48 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	085a      	lsrs	r2, r3, #1
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	441a      	add	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b0f      	cmp	r3, #15
 8004a2e:	d909      	bls.n	8004a44 <UART_SetConfig+0x4a0>
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a36:	d205      	bcs.n	8004a44 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	60da      	str	r2, [r3, #12]
 8004a42:	e001      	b.n	8004a48 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004a54:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40007c00 	.word	0x40007c00
 8004a64:	40023800 	.word	0x40023800
 8004a68:	00f42400 	.word	0x00f42400

08004a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01a      	beq.n	8004b82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b6a:	d10a      	bne.n	8004b82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	605a      	str	r2, [r3, #4]
  }
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bc0:	f7fc fb40 	bl	8001244 <HAL_GetTick>
 8004bc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d10e      	bne.n	8004bf2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f831 	bl	8004c4a <UART_WaitOnFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e027      	b.n	8004c42 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d10e      	bne.n	8004c1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f81b 	bl	8004c4a <UART_WaitOnFlagUntilTimeout>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e011      	b.n	8004c42 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b09c      	sub	sp, #112	; 0x70
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	4613      	mov	r3, r2
 8004c58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c5a:	e0a7      	b.n	8004dac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c62:	f000 80a3 	beq.w	8004dac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c66:	f7fc faed 	bl	8001244 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d302      	bcc.n	8004c7c <UART_WaitOnFlagUntilTimeout+0x32>
 8004c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d13f      	bne.n	8004cfc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c84:	e853 3f00 	ldrex	r3, [r3]
 8004c88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c90:	667b      	str	r3, [r7, #100]	; 0x64
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c9c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ca0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ca2:	e841 2300 	strex	r3, r2, [r1]
 8004ca6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1e6      	bne.n	8004c7c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3308      	adds	r3, #8
 8004cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb8:	e853 3f00 	ldrex	r3, [r3]
 8004cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc0:	f023 0301 	bic.w	r3, r3, #1
 8004cc4:	663b      	str	r3, [r7, #96]	; 0x60
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3308      	adds	r3, #8
 8004ccc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cce:	64ba      	str	r2, [r7, #72]	; 0x48
 8004cd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1e5      	bne.n	8004cae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e068      	b.n	8004dce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d050      	beq.n	8004dac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d18:	d148      	bne.n	8004dac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d22:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d42:	637b      	str	r3, [r7, #52]	; 0x34
 8004d44:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e6      	bne.n	8004d24 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	613b      	str	r3, [r7, #16]
   return(result);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f023 0301 	bic.w	r3, r3, #1
 8004d6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3308      	adds	r3, #8
 8004d74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d76:	623a      	str	r2, [r7, #32]
 8004d78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	69f9      	ldr	r1, [r7, #28]
 8004d7c:	6a3a      	ldr	r2, [r7, #32]
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e5      	bne.n	8004d56 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e010      	b.n	8004dce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	69da      	ldr	r2, [r3, #28]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4013      	ands	r3, r2
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	bf0c      	ite	eq
 8004dbc:	2301      	moveq	r3, #1
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	79fb      	ldrb	r3, [r7, #7]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	f43f af48 	beq.w	8004c5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3770      	adds	r7, #112	; 0x70
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b097      	sub	sp, #92	; 0x5c
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	4613      	mov	r3, r2
 8004de4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	88fa      	ldrh	r2, [r7, #6]
 8004df0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	88fa      	ldrh	r2, [r7, #6]
 8004df8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0a:	d10e      	bne.n	8004e2a <UART_Start_Receive_IT+0x52>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d105      	bne.n	8004e20 <UART_Start_Receive_IT+0x48>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004e1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e1e:	e02d      	b.n	8004e7c <UART_Start_Receive_IT+0xa4>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	22ff      	movs	r2, #255	; 0xff
 8004e24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e28:	e028      	b.n	8004e7c <UART_Start_Receive_IT+0xa4>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10d      	bne.n	8004e4e <UART_Start_Receive_IT+0x76>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d104      	bne.n	8004e44 <UART_Start_Receive_IT+0x6c>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	22ff      	movs	r2, #255	; 0xff
 8004e3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e42:	e01b      	b.n	8004e7c <UART_Start_Receive_IT+0xa4>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	227f      	movs	r2, #127	; 0x7f
 8004e48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e4c:	e016      	b.n	8004e7c <UART_Start_Receive_IT+0xa4>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e56:	d10d      	bne.n	8004e74 <UART_Start_Receive_IT+0x9c>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d104      	bne.n	8004e6a <UART_Start_Receive_IT+0x92>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	227f      	movs	r2, #127	; 0x7f
 8004e64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e68:	e008      	b.n	8004e7c <UART_Start_Receive_IT+0xa4>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	223f      	movs	r2, #63	; 0x3f
 8004e6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e72:	e003      	b.n	8004e7c <UART_Start_Receive_IT+0xa4>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2222      	movs	r2, #34	; 0x22
 8004e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3308      	adds	r3, #8
 8004e92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9e:	f043 0301 	orr.w	r3, r3, #1
 8004ea2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3308      	adds	r3, #8
 8004eaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004eac:	64ba      	str	r2, [r7, #72]	; 0x48
 8004eae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e5      	bne.n	8004e8c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec8:	d107      	bne.n	8004eda <UART_Start_Receive_IT+0x102>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d103      	bne.n	8004eda <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4a21      	ldr	r2, [pc, #132]	; (8004f5c <UART_Start_Receive_IT+0x184>)
 8004ed6:	669a      	str	r2, [r3, #104]	; 0x68
 8004ed8:	e002      	b.n	8004ee0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4a20      	ldr	r2, [pc, #128]	; (8004f60 <UART_Start_Receive_IT+0x188>)
 8004ede:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d019      	beq.n	8004f1c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef0:	e853 3f00 	ldrex	r3, [r3]
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004efc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f06:	637b      	str	r3, [r7, #52]	; 0x34
 8004f08:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1e6      	bne.n	8004ee8 <UART_Start_Receive_IT+0x110>
 8004f1a:	e018      	b.n	8004f4e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	613b      	str	r3, [r7, #16]
   return(result);
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f043 0320 	orr.w	r3, r3, #32
 8004f30:	653b      	str	r3, [r7, #80]	; 0x50
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f3a:	623b      	str	r3, [r7, #32]
 8004f3c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	69f9      	ldr	r1, [r7, #28]
 8004f40:	6a3a      	ldr	r2, [r7, #32]
 8004f42:	e841 2300 	strex	r3, r2, [r1]
 8004f46:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e6      	bne.n	8004f1c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	375c      	adds	r7, #92	; 0x5c
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	08005213 	.word	0x08005213
 8004f60:	080050ad 	.word	0x080050ad

08004f64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b095      	sub	sp, #84	; 0x54
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f74:	e853 3f00 	ldrex	r3, [r3]
 8004f78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f8a:	643b      	str	r3, [r7, #64]	; 0x40
 8004f8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e6      	bne.n	8004f6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	e853 3f00 	ldrex	r3, [r3]
 8004fac:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f023 0301 	bic.w	r3, r3, #1
 8004fb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3308      	adds	r3, #8
 8004fbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc6:	e841 2300 	strex	r3, r2, [r1]
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1e5      	bne.n	8004f9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d118      	bne.n	800500c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	e853 3f00 	ldrex	r3, [r3]
 8004fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f023 0310 	bic.w	r3, r3, #16
 8004fee:	647b      	str	r3, [r7, #68]	; 0x44
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffc:	6979      	ldr	r1, [r7, #20]
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	e841 2300 	strex	r3, r2, [r1]
 8005004:	613b      	str	r3, [r7, #16]
   return(result);
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e6      	bne.n	8004fda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005020:	bf00      	nop
 8005022:	3754      	adds	r7, #84	; 0x54
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f7ff fa8a 	bl	8004564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005050:	bf00      	nop
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	60bb      	str	r3, [r7, #8]
   return(result);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005074:	61fb      	str	r3, [r7, #28]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	61bb      	str	r3, [r7, #24]
 8005080:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6979      	ldr	r1, [r7, #20]
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	613b      	str	r3, [r7, #16]
   return(result);
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e6      	bne.n	8005060 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7ff fa56 	bl	8004550 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050a4:	bf00      	nop
 80050a6:	3720      	adds	r7, #32
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b096      	sub	sp, #88	; 0x58
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80050ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050c4:	2b22      	cmp	r3, #34	; 0x22
 80050c6:	f040 8098 	bne.w	80051fa <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80050d4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80050d8:	b2d9      	uxtb	r1, r3
 80050da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e4:	400a      	ands	r2, r1
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b29a      	uxth	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d17b      	bne.n	800520a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511a:	e853 3f00 	ldrex	r3, [r3]
 800511e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005122:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005126:	653b      	str	r3, [r7, #80]	; 0x50
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	461a      	mov	r2, r3
 800512e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005130:	647b      	str	r3, [r7, #68]	; 0x44
 8005132:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005134:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005138:	e841 2300 	strex	r3, r2, [r1]
 800513c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800513e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e6      	bne.n	8005112 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3308      	adds	r3, #8
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	623b      	str	r3, [r7, #32]
   return(result);
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3308      	adds	r3, #8
 8005162:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005164:	633a      	str	r2, [r7, #48]	; 0x30
 8005166:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800516a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800516c:	e841 2300 	strex	r3, r2, [r1]
 8005170:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e5      	bne.n	8005144 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005190:	2b01      	cmp	r3, #1
 8005192:	d12e      	bne.n	80051f2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	e853 3f00 	ldrex	r3, [r3]
 80051a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0310 	bic.w	r3, r3, #16
 80051ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	461a      	mov	r2, r3
 80051b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	69b9      	ldr	r1, [r7, #24]
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	e841 2300 	strex	r3, r2, [r1]
 80051c4:	617b      	str	r3, [r7, #20]
   return(result);
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e6      	bne.n	800519a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	2b10      	cmp	r3, #16
 80051d8:	d103      	bne.n	80051e2 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2210      	movs	r2, #16
 80051e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051e8:	4619      	mov	r1, r3
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7ff f9c4 	bl	8004578 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051f0:	e00b      	b.n	800520a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7fb fd4e 	bl	8000c94 <HAL_UART_RxCpltCallback>
}
 80051f8:	e007      	b.n	800520a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	699a      	ldr	r2, [r3, #24]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f042 0208 	orr.w	r2, r2, #8
 8005208:	619a      	str	r2, [r3, #24]
}
 800520a:	bf00      	nop
 800520c:	3758      	adds	r7, #88	; 0x58
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b096      	sub	sp, #88	; 0x58
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005220:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800522a:	2b22      	cmp	r3, #34	; 0x22
 800522c:	f040 8098 	bne.w	8005360 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005240:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005244:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005248:	4013      	ands	r3, r2
 800524a:	b29a      	uxth	r2, r3
 800524c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800524e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005254:	1c9a      	adds	r2, r3, #2
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005272:	b29b      	uxth	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d17b      	bne.n	8005370 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800528c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005296:	643b      	str	r3, [r7, #64]	; 0x40
 8005298:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800529c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e6      	bne.n	8005278 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3308      	adds	r3, #8
 80052b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3308      	adds	r3, #8
 80052c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e5      	bne.n	80052aa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d12e      	bne.n	8005358 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	60bb      	str	r3, [r7, #8]
   return(result);
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f023 0310 	bic.w	r3, r3, #16
 8005314:	647b      	str	r3, [r7, #68]	; 0x44
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531e:	61bb      	str	r3, [r7, #24]
 8005320:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	6979      	ldr	r1, [r7, #20]
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	e841 2300 	strex	r3, r2, [r1]
 800532a:	613b      	str	r3, [r7, #16]
   return(result);
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1e6      	bne.n	8005300 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	f003 0310 	and.w	r3, r3, #16
 800533c:	2b10      	cmp	r3, #16
 800533e:	d103      	bne.n	8005348 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2210      	movs	r2, #16
 8005346:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800534e:	4619      	mov	r1, r3
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7ff f911 	bl	8004578 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005356:	e00b      	b.n	8005370 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7fb fc9b 	bl	8000c94 <HAL_UART_RxCpltCallback>
}
 800535e:	e007      	b.n	8005370 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699a      	ldr	r2, [r3, #24]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0208 	orr.w	r2, r2, #8
 800536e:	619a      	str	r2, [r3, #24]
}
 8005370:	bf00      	nop
 8005372:	3758      	adds	r7, #88	; 0x58
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <siprintf>:
 8005378:	b40e      	push	{r1, r2, r3}
 800537a:	b500      	push	{lr}
 800537c:	b09c      	sub	sp, #112	; 0x70
 800537e:	ab1d      	add	r3, sp, #116	; 0x74
 8005380:	9002      	str	r0, [sp, #8]
 8005382:	9006      	str	r0, [sp, #24]
 8005384:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005388:	4809      	ldr	r0, [pc, #36]	; (80053b0 <siprintf+0x38>)
 800538a:	9107      	str	r1, [sp, #28]
 800538c:	9104      	str	r1, [sp, #16]
 800538e:	4909      	ldr	r1, [pc, #36]	; (80053b4 <siprintf+0x3c>)
 8005390:	f853 2b04 	ldr.w	r2, [r3], #4
 8005394:	9105      	str	r1, [sp, #20]
 8005396:	6800      	ldr	r0, [r0, #0]
 8005398:	9301      	str	r3, [sp, #4]
 800539a:	a902      	add	r1, sp, #8
 800539c:	f000 f992 	bl	80056c4 <_svfiprintf_r>
 80053a0:	9b02      	ldr	r3, [sp, #8]
 80053a2:	2200      	movs	r2, #0
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	b01c      	add	sp, #112	; 0x70
 80053a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80053ac:	b003      	add	sp, #12
 80053ae:	4770      	bx	lr
 80053b0:	200000c0 	.word	0x200000c0
 80053b4:	ffff0208 	.word	0xffff0208

080053b8 <memset>:
 80053b8:	4402      	add	r2, r0
 80053ba:	4603      	mov	r3, r0
 80053bc:	4293      	cmp	r3, r2
 80053be:	d100      	bne.n	80053c2 <memset+0xa>
 80053c0:	4770      	bx	lr
 80053c2:	f803 1b01 	strb.w	r1, [r3], #1
 80053c6:	e7f9      	b.n	80053bc <memset+0x4>

080053c8 <__errno>:
 80053c8:	4b01      	ldr	r3, [pc, #4]	; (80053d0 <__errno+0x8>)
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	200000c0 	.word	0x200000c0

080053d4 <__libc_init_array>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	4d0d      	ldr	r5, [pc, #52]	; (800540c <__libc_init_array+0x38>)
 80053d8:	4c0d      	ldr	r4, [pc, #52]	; (8005410 <__libc_init_array+0x3c>)
 80053da:	1b64      	subs	r4, r4, r5
 80053dc:	10a4      	asrs	r4, r4, #2
 80053de:	2600      	movs	r6, #0
 80053e0:	42a6      	cmp	r6, r4
 80053e2:	d109      	bne.n	80053f8 <__libc_init_array+0x24>
 80053e4:	4d0b      	ldr	r5, [pc, #44]	; (8005414 <__libc_init_array+0x40>)
 80053e6:	4c0c      	ldr	r4, [pc, #48]	; (8005418 <__libc_init_array+0x44>)
 80053e8:	f000 fc6a 	bl	8005cc0 <_init>
 80053ec:	1b64      	subs	r4, r4, r5
 80053ee:	10a4      	asrs	r4, r4, #2
 80053f0:	2600      	movs	r6, #0
 80053f2:	42a6      	cmp	r6, r4
 80053f4:	d105      	bne.n	8005402 <__libc_init_array+0x2e>
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
 80053f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fc:	4798      	blx	r3
 80053fe:	3601      	adds	r6, #1
 8005400:	e7ee      	b.n	80053e0 <__libc_init_array+0xc>
 8005402:	f855 3b04 	ldr.w	r3, [r5], #4
 8005406:	4798      	blx	r3
 8005408:	3601      	adds	r6, #1
 800540a:	e7f2      	b.n	80053f2 <__libc_init_array+0x1e>
 800540c:	08005d88 	.word	0x08005d88
 8005410:	08005d88 	.word	0x08005d88
 8005414:	08005d88 	.word	0x08005d88
 8005418:	08005d8c 	.word	0x08005d8c

0800541c <__retarget_lock_acquire_recursive>:
 800541c:	4770      	bx	lr

0800541e <__retarget_lock_release_recursive>:
 800541e:	4770      	bx	lr

08005420 <_free_r>:
 8005420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005422:	2900      	cmp	r1, #0
 8005424:	d044      	beq.n	80054b0 <_free_r+0x90>
 8005426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800542a:	9001      	str	r0, [sp, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	f1a1 0404 	sub.w	r4, r1, #4
 8005432:	bfb8      	it	lt
 8005434:	18e4      	addlt	r4, r4, r3
 8005436:	f000 f8df 	bl	80055f8 <__malloc_lock>
 800543a:	4a1e      	ldr	r2, [pc, #120]	; (80054b4 <_free_r+0x94>)
 800543c:	9801      	ldr	r0, [sp, #4]
 800543e:	6813      	ldr	r3, [r2, #0]
 8005440:	b933      	cbnz	r3, 8005450 <_free_r+0x30>
 8005442:	6063      	str	r3, [r4, #4]
 8005444:	6014      	str	r4, [r2, #0]
 8005446:	b003      	add	sp, #12
 8005448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800544c:	f000 b8da 	b.w	8005604 <__malloc_unlock>
 8005450:	42a3      	cmp	r3, r4
 8005452:	d908      	bls.n	8005466 <_free_r+0x46>
 8005454:	6825      	ldr	r5, [r4, #0]
 8005456:	1961      	adds	r1, r4, r5
 8005458:	428b      	cmp	r3, r1
 800545a:	bf01      	itttt	eq
 800545c:	6819      	ldreq	r1, [r3, #0]
 800545e:	685b      	ldreq	r3, [r3, #4]
 8005460:	1949      	addeq	r1, r1, r5
 8005462:	6021      	streq	r1, [r4, #0]
 8005464:	e7ed      	b.n	8005442 <_free_r+0x22>
 8005466:	461a      	mov	r2, r3
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	b10b      	cbz	r3, 8005470 <_free_r+0x50>
 800546c:	42a3      	cmp	r3, r4
 800546e:	d9fa      	bls.n	8005466 <_free_r+0x46>
 8005470:	6811      	ldr	r1, [r2, #0]
 8005472:	1855      	adds	r5, r2, r1
 8005474:	42a5      	cmp	r5, r4
 8005476:	d10b      	bne.n	8005490 <_free_r+0x70>
 8005478:	6824      	ldr	r4, [r4, #0]
 800547a:	4421      	add	r1, r4
 800547c:	1854      	adds	r4, r2, r1
 800547e:	42a3      	cmp	r3, r4
 8005480:	6011      	str	r1, [r2, #0]
 8005482:	d1e0      	bne.n	8005446 <_free_r+0x26>
 8005484:	681c      	ldr	r4, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	6053      	str	r3, [r2, #4]
 800548a:	440c      	add	r4, r1
 800548c:	6014      	str	r4, [r2, #0]
 800548e:	e7da      	b.n	8005446 <_free_r+0x26>
 8005490:	d902      	bls.n	8005498 <_free_r+0x78>
 8005492:	230c      	movs	r3, #12
 8005494:	6003      	str	r3, [r0, #0]
 8005496:	e7d6      	b.n	8005446 <_free_r+0x26>
 8005498:	6825      	ldr	r5, [r4, #0]
 800549a:	1961      	adds	r1, r4, r5
 800549c:	428b      	cmp	r3, r1
 800549e:	bf04      	itt	eq
 80054a0:	6819      	ldreq	r1, [r3, #0]
 80054a2:	685b      	ldreq	r3, [r3, #4]
 80054a4:	6063      	str	r3, [r4, #4]
 80054a6:	bf04      	itt	eq
 80054a8:	1949      	addeq	r1, r1, r5
 80054aa:	6021      	streq	r1, [r4, #0]
 80054ac:	6054      	str	r4, [r2, #4]
 80054ae:	e7ca      	b.n	8005446 <_free_r+0x26>
 80054b0:	b003      	add	sp, #12
 80054b2:	bd30      	pop	{r4, r5, pc}
 80054b4:	20000514 	.word	0x20000514

080054b8 <sbrk_aligned>:
 80054b8:	b570      	push	{r4, r5, r6, lr}
 80054ba:	4e0e      	ldr	r6, [pc, #56]	; (80054f4 <sbrk_aligned+0x3c>)
 80054bc:	460c      	mov	r4, r1
 80054be:	6831      	ldr	r1, [r6, #0]
 80054c0:	4605      	mov	r5, r0
 80054c2:	b911      	cbnz	r1, 80054ca <sbrk_aligned+0x12>
 80054c4:	f000 fba6 	bl	8005c14 <_sbrk_r>
 80054c8:	6030      	str	r0, [r6, #0]
 80054ca:	4621      	mov	r1, r4
 80054cc:	4628      	mov	r0, r5
 80054ce:	f000 fba1 	bl	8005c14 <_sbrk_r>
 80054d2:	1c43      	adds	r3, r0, #1
 80054d4:	d00a      	beq.n	80054ec <sbrk_aligned+0x34>
 80054d6:	1cc4      	adds	r4, r0, #3
 80054d8:	f024 0403 	bic.w	r4, r4, #3
 80054dc:	42a0      	cmp	r0, r4
 80054de:	d007      	beq.n	80054f0 <sbrk_aligned+0x38>
 80054e0:	1a21      	subs	r1, r4, r0
 80054e2:	4628      	mov	r0, r5
 80054e4:	f000 fb96 	bl	8005c14 <_sbrk_r>
 80054e8:	3001      	adds	r0, #1
 80054ea:	d101      	bne.n	80054f0 <sbrk_aligned+0x38>
 80054ec:	f04f 34ff 	mov.w	r4, #4294967295
 80054f0:	4620      	mov	r0, r4
 80054f2:	bd70      	pop	{r4, r5, r6, pc}
 80054f4:	20000518 	.word	0x20000518

080054f8 <_malloc_r>:
 80054f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054fc:	1ccd      	adds	r5, r1, #3
 80054fe:	f025 0503 	bic.w	r5, r5, #3
 8005502:	3508      	adds	r5, #8
 8005504:	2d0c      	cmp	r5, #12
 8005506:	bf38      	it	cc
 8005508:	250c      	movcc	r5, #12
 800550a:	2d00      	cmp	r5, #0
 800550c:	4607      	mov	r7, r0
 800550e:	db01      	blt.n	8005514 <_malloc_r+0x1c>
 8005510:	42a9      	cmp	r1, r5
 8005512:	d905      	bls.n	8005520 <_malloc_r+0x28>
 8005514:	230c      	movs	r3, #12
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	2600      	movs	r6, #0
 800551a:	4630      	mov	r0, r6
 800551c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005520:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80055f4 <_malloc_r+0xfc>
 8005524:	f000 f868 	bl	80055f8 <__malloc_lock>
 8005528:	f8d8 3000 	ldr.w	r3, [r8]
 800552c:	461c      	mov	r4, r3
 800552e:	bb5c      	cbnz	r4, 8005588 <_malloc_r+0x90>
 8005530:	4629      	mov	r1, r5
 8005532:	4638      	mov	r0, r7
 8005534:	f7ff ffc0 	bl	80054b8 <sbrk_aligned>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	4604      	mov	r4, r0
 800553c:	d155      	bne.n	80055ea <_malloc_r+0xf2>
 800553e:	f8d8 4000 	ldr.w	r4, [r8]
 8005542:	4626      	mov	r6, r4
 8005544:	2e00      	cmp	r6, #0
 8005546:	d145      	bne.n	80055d4 <_malloc_r+0xdc>
 8005548:	2c00      	cmp	r4, #0
 800554a:	d048      	beq.n	80055de <_malloc_r+0xe6>
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	4631      	mov	r1, r6
 8005550:	4638      	mov	r0, r7
 8005552:	eb04 0903 	add.w	r9, r4, r3
 8005556:	f000 fb5d 	bl	8005c14 <_sbrk_r>
 800555a:	4581      	cmp	r9, r0
 800555c:	d13f      	bne.n	80055de <_malloc_r+0xe6>
 800555e:	6821      	ldr	r1, [r4, #0]
 8005560:	1a6d      	subs	r5, r5, r1
 8005562:	4629      	mov	r1, r5
 8005564:	4638      	mov	r0, r7
 8005566:	f7ff ffa7 	bl	80054b8 <sbrk_aligned>
 800556a:	3001      	adds	r0, #1
 800556c:	d037      	beq.n	80055de <_malloc_r+0xe6>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	442b      	add	r3, r5
 8005572:	6023      	str	r3, [r4, #0]
 8005574:	f8d8 3000 	ldr.w	r3, [r8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d038      	beq.n	80055ee <_malloc_r+0xf6>
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	42a2      	cmp	r2, r4
 8005580:	d12b      	bne.n	80055da <_malloc_r+0xe2>
 8005582:	2200      	movs	r2, #0
 8005584:	605a      	str	r2, [r3, #4]
 8005586:	e00f      	b.n	80055a8 <_malloc_r+0xb0>
 8005588:	6822      	ldr	r2, [r4, #0]
 800558a:	1b52      	subs	r2, r2, r5
 800558c:	d41f      	bmi.n	80055ce <_malloc_r+0xd6>
 800558e:	2a0b      	cmp	r2, #11
 8005590:	d917      	bls.n	80055c2 <_malloc_r+0xca>
 8005592:	1961      	adds	r1, r4, r5
 8005594:	42a3      	cmp	r3, r4
 8005596:	6025      	str	r5, [r4, #0]
 8005598:	bf18      	it	ne
 800559a:	6059      	strne	r1, [r3, #4]
 800559c:	6863      	ldr	r3, [r4, #4]
 800559e:	bf08      	it	eq
 80055a0:	f8c8 1000 	streq.w	r1, [r8]
 80055a4:	5162      	str	r2, [r4, r5]
 80055a6:	604b      	str	r3, [r1, #4]
 80055a8:	4638      	mov	r0, r7
 80055aa:	f104 060b 	add.w	r6, r4, #11
 80055ae:	f000 f829 	bl	8005604 <__malloc_unlock>
 80055b2:	f026 0607 	bic.w	r6, r6, #7
 80055b6:	1d23      	adds	r3, r4, #4
 80055b8:	1af2      	subs	r2, r6, r3
 80055ba:	d0ae      	beq.n	800551a <_malloc_r+0x22>
 80055bc:	1b9b      	subs	r3, r3, r6
 80055be:	50a3      	str	r3, [r4, r2]
 80055c0:	e7ab      	b.n	800551a <_malloc_r+0x22>
 80055c2:	42a3      	cmp	r3, r4
 80055c4:	6862      	ldr	r2, [r4, #4]
 80055c6:	d1dd      	bne.n	8005584 <_malloc_r+0x8c>
 80055c8:	f8c8 2000 	str.w	r2, [r8]
 80055cc:	e7ec      	b.n	80055a8 <_malloc_r+0xb0>
 80055ce:	4623      	mov	r3, r4
 80055d0:	6864      	ldr	r4, [r4, #4]
 80055d2:	e7ac      	b.n	800552e <_malloc_r+0x36>
 80055d4:	4634      	mov	r4, r6
 80055d6:	6876      	ldr	r6, [r6, #4]
 80055d8:	e7b4      	b.n	8005544 <_malloc_r+0x4c>
 80055da:	4613      	mov	r3, r2
 80055dc:	e7cc      	b.n	8005578 <_malloc_r+0x80>
 80055de:	230c      	movs	r3, #12
 80055e0:	603b      	str	r3, [r7, #0]
 80055e2:	4638      	mov	r0, r7
 80055e4:	f000 f80e 	bl	8005604 <__malloc_unlock>
 80055e8:	e797      	b.n	800551a <_malloc_r+0x22>
 80055ea:	6025      	str	r5, [r4, #0]
 80055ec:	e7dc      	b.n	80055a8 <_malloc_r+0xb0>
 80055ee:	605b      	str	r3, [r3, #4]
 80055f0:	deff      	udf	#255	; 0xff
 80055f2:	bf00      	nop
 80055f4:	20000514 	.word	0x20000514

080055f8 <__malloc_lock>:
 80055f8:	4801      	ldr	r0, [pc, #4]	; (8005600 <__malloc_lock+0x8>)
 80055fa:	f7ff bf0f 	b.w	800541c <__retarget_lock_acquire_recursive>
 80055fe:	bf00      	nop
 8005600:	20000510 	.word	0x20000510

08005604 <__malloc_unlock>:
 8005604:	4801      	ldr	r0, [pc, #4]	; (800560c <__malloc_unlock+0x8>)
 8005606:	f7ff bf0a 	b.w	800541e <__retarget_lock_release_recursive>
 800560a:	bf00      	nop
 800560c:	20000510 	.word	0x20000510

08005610 <__ssputs_r>:
 8005610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005614:	688e      	ldr	r6, [r1, #8]
 8005616:	461f      	mov	r7, r3
 8005618:	42be      	cmp	r6, r7
 800561a:	680b      	ldr	r3, [r1, #0]
 800561c:	4682      	mov	sl, r0
 800561e:	460c      	mov	r4, r1
 8005620:	4690      	mov	r8, r2
 8005622:	d82c      	bhi.n	800567e <__ssputs_r+0x6e>
 8005624:	898a      	ldrh	r2, [r1, #12]
 8005626:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800562a:	d026      	beq.n	800567a <__ssputs_r+0x6a>
 800562c:	6965      	ldr	r5, [r4, #20]
 800562e:	6909      	ldr	r1, [r1, #16]
 8005630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005634:	eba3 0901 	sub.w	r9, r3, r1
 8005638:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800563c:	1c7b      	adds	r3, r7, #1
 800563e:	444b      	add	r3, r9
 8005640:	106d      	asrs	r5, r5, #1
 8005642:	429d      	cmp	r5, r3
 8005644:	bf38      	it	cc
 8005646:	461d      	movcc	r5, r3
 8005648:	0553      	lsls	r3, r2, #21
 800564a:	d527      	bpl.n	800569c <__ssputs_r+0x8c>
 800564c:	4629      	mov	r1, r5
 800564e:	f7ff ff53 	bl	80054f8 <_malloc_r>
 8005652:	4606      	mov	r6, r0
 8005654:	b360      	cbz	r0, 80056b0 <__ssputs_r+0xa0>
 8005656:	6921      	ldr	r1, [r4, #16]
 8005658:	464a      	mov	r2, r9
 800565a:	f000 faeb 	bl	8005c34 <memcpy>
 800565e:	89a3      	ldrh	r3, [r4, #12]
 8005660:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005668:	81a3      	strh	r3, [r4, #12]
 800566a:	6126      	str	r6, [r4, #16]
 800566c:	6165      	str	r5, [r4, #20]
 800566e:	444e      	add	r6, r9
 8005670:	eba5 0509 	sub.w	r5, r5, r9
 8005674:	6026      	str	r6, [r4, #0]
 8005676:	60a5      	str	r5, [r4, #8]
 8005678:	463e      	mov	r6, r7
 800567a:	42be      	cmp	r6, r7
 800567c:	d900      	bls.n	8005680 <__ssputs_r+0x70>
 800567e:	463e      	mov	r6, r7
 8005680:	6820      	ldr	r0, [r4, #0]
 8005682:	4632      	mov	r2, r6
 8005684:	4641      	mov	r1, r8
 8005686:	f000 faab 	bl	8005be0 <memmove>
 800568a:	68a3      	ldr	r3, [r4, #8]
 800568c:	1b9b      	subs	r3, r3, r6
 800568e:	60a3      	str	r3, [r4, #8]
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	4433      	add	r3, r6
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	2000      	movs	r0, #0
 8005698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569c:	462a      	mov	r2, r5
 800569e:	f000 fad7 	bl	8005c50 <_realloc_r>
 80056a2:	4606      	mov	r6, r0
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d1e0      	bne.n	800566a <__ssputs_r+0x5a>
 80056a8:	6921      	ldr	r1, [r4, #16]
 80056aa:	4650      	mov	r0, sl
 80056ac:	f7ff feb8 	bl	8005420 <_free_r>
 80056b0:	230c      	movs	r3, #12
 80056b2:	f8ca 3000 	str.w	r3, [sl]
 80056b6:	89a3      	ldrh	r3, [r4, #12]
 80056b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056bc:	81a3      	strh	r3, [r4, #12]
 80056be:	f04f 30ff 	mov.w	r0, #4294967295
 80056c2:	e7e9      	b.n	8005698 <__ssputs_r+0x88>

080056c4 <_svfiprintf_r>:
 80056c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c8:	4698      	mov	r8, r3
 80056ca:	898b      	ldrh	r3, [r1, #12]
 80056cc:	061b      	lsls	r3, r3, #24
 80056ce:	b09d      	sub	sp, #116	; 0x74
 80056d0:	4607      	mov	r7, r0
 80056d2:	460d      	mov	r5, r1
 80056d4:	4614      	mov	r4, r2
 80056d6:	d50e      	bpl.n	80056f6 <_svfiprintf_r+0x32>
 80056d8:	690b      	ldr	r3, [r1, #16]
 80056da:	b963      	cbnz	r3, 80056f6 <_svfiprintf_r+0x32>
 80056dc:	2140      	movs	r1, #64	; 0x40
 80056de:	f7ff ff0b 	bl	80054f8 <_malloc_r>
 80056e2:	6028      	str	r0, [r5, #0]
 80056e4:	6128      	str	r0, [r5, #16]
 80056e6:	b920      	cbnz	r0, 80056f2 <_svfiprintf_r+0x2e>
 80056e8:	230c      	movs	r3, #12
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	f04f 30ff 	mov.w	r0, #4294967295
 80056f0:	e0d0      	b.n	8005894 <_svfiprintf_r+0x1d0>
 80056f2:	2340      	movs	r3, #64	; 0x40
 80056f4:	616b      	str	r3, [r5, #20]
 80056f6:	2300      	movs	r3, #0
 80056f8:	9309      	str	r3, [sp, #36]	; 0x24
 80056fa:	2320      	movs	r3, #32
 80056fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005700:	f8cd 800c 	str.w	r8, [sp, #12]
 8005704:	2330      	movs	r3, #48	; 0x30
 8005706:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80058ac <_svfiprintf_r+0x1e8>
 800570a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800570e:	f04f 0901 	mov.w	r9, #1
 8005712:	4623      	mov	r3, r4
 8005714:	469a      	mov	sl, r3
 8005716:	f813 2b01 	ldrb.w	r2, [r3], #1
 800571a:	b10a      	cbz	r2, 8005720 <_svfiprintf_r+0x5c>
 800571c:	2a25      	cmp	r2, #37	; 0x25
 800571e:	d1f9      	bne.n	8005714 <_svfiprintf_r+0x50>
 8005720:	ebba 0b04 	subs.w	fp, sl, r4
 8005724:	d00b      	beq.n	800573e <_svfiprintf_r+0x7a>
 8005726:	465b      	mov	r3, fp
 8005728:	4622      	mov	r2, r4
 800572a:	4629      	mov	r1, r5
 800572c:	4638      	mov	r0, r7
 800572e:	f7ff ff6f 	bl	8005610 <__ssputs_r>
 8005732:	3001      	adds	r0, #1
 8005734:	f000 80a9 	beq.w	800588a <_svfiprintf_r+0x1c6>
 8005738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800573a:	445a      	add	r2, fp
 800573c:	9209      	str	r2, [sp, #36]	; 0x24
 800573e:	f89a 3000 	ldrb.w	r3, [sl]
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 80a1 	beq.w	800588a <_svfiprintf_r+0x1c6>
 8005748:	2300      	movs	r3, #0
 800574a:	f04f 32ff 	mov.w	r2, #4294967295
 800574e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005752:	f10a 0a01 	add.w	sl, sl, #1
 8005756:	9304      	str	r3, [sp, #16]
 8005758:	9307      	str	r3, [sp, #28]
 800575a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800575e:	931a      	str	r3, [sp, #104]	; 0x68
 8005760:	4654      	mov	r4, sl
 8005762:	2205      	movs	r2, #5
 8005764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005768:	4850      	ldr	r0, [pc, #320]	; (80058ac <_svfiprintf_r+0x1e8>)
 800576a:	f7fa fd71 	bl	8000250 <memchr>
 800576e:	9a04      	ldr	r2, [sp, #16]
 8005770:	b9d8      	cbnz	r0, 80057aa <_svfiprintf_r+0xe6>
 8005772:	06d0      	lsls	r0, r2, #27
 8005774:	bf44      	itt	mi
 8005776:	2320      	movmi	r3, #32
 8005778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800577c:	0711      	lsls	r1, r2, #28
 800577e:	bf44      	itt	mi
 8005780:	232b      	movmi	r3, #43	; 0x2b
 8005782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005786:	f89a 3000 	ldrb.w	r3, [sl]
 800578a:	2b2a      	cmp	r3, #42	; 0x2a
 800578c:	d015      	beq.n	80057ba <_svfiprintf_r+0xf6>
 800578e:	9a07      	ldr	r2, [sp, #28]
 8005790:	4654      	mov	r4, sl
 8005792:	2000      	movs	r0, #0
 8005794:	f04f 0c0a 	mov.w	ip, #10
 8005798:	4621      	mov	r1, r4
 800579a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800579e:	3b30      	subs	r3, #48	; 0x30
 80057a0:	2b09      	cmp	r3, #9
 80057a2:	d94d      	bls.n	8005840 <_svfiprintf_r+0x17c>
 80057a4:	b1b0      	cbz	r0, 80057d4 <_svfiprintf_r+0x110>
 80057a6:	9207      	str	r2, [sp, #28]
 80057a8:	e014      	b.n	80057d4 <_svfiprintf_r+0x110>
 80057aa:	eba0 0308 	sub.w	r3, r0, r8
 80057ae:	fa09 f303 	lsl.w	r3, r9, r3
 80057b2:	4313      	orrs	r3, r2
 80057b4:	9304      	str	r3, [sp, #16]
 80057b6:	46a2      	mov	sl, r4
 80057b8:	e7d2      	b.n	8005760 <_svfiprintf_r+0x9c>
 80057ba:	9b03      	ldr	r3, [sp, #12]
 80057bc:	1d19      	adds	r1, r3, #4
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	9103      	str	r1, [sp, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	bfbb      	ittet	lt
 80057c6:	425b      	neglt	r3, r3
 80057c8:	f042 0202 	orrlt.w	r2, r2, #2
 80057cc:	9307      	strge	r3, [sp, #28]
 80057ce:	9307      	strlt	r3, [sp, #28]
 80057d0:	bfb8      	it	lt
 80057d2:	9204      	strlt	r2, [sp, #16]
 80057d4:	7823      	ldrb	r3, [r4, #0]
 80057d6:	2b2e      	cmp	r3, #46	; 0x2e
 80057d8:	d10c      	bne.n	80057f4 <_svfiprintf_r+0x130>
 80057da:	7863      	ldrb	r3, [r4, #1]
 80057dc:	2b2a      	cmp	r3, #42	; 0x2a
 80057de:	d134      	bne.n	800584a <_svfiprintf_r+0x186>
 80057e0:	9b03      	ldr	r3, [sp, #12]
 80057e2:	1d1a      	adds	r2, r3, #4
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	9203      	str	r2, [sp, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	bfb8      	it	lt
 80057ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80057f0:	3402      	adds	r4, #2
 80057f2:	9305      	str	r3, [sp, #20]
 80057f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80058bc <_svfiprintf_r+0x1f8>
 80057f8:	7821      	ldrb	r1, [r4, #0]
 80057fa:	2203      	movs	r2, #3
 80057fc:	4650      	mov	r0, sl
 80057fe:	f7fa fd27 	bl	8000250 <memchr>
 8005802:	b138      	cbz	r0, 8005814 <_svfiprintf_r+0x150>
 8005804:	9b04      	ldr	r3, [sp, #16]
 8005806:	eba0 000a 	sub.w	r0, r0, sl
 800580a:	2240      	movs	r2, #64	; 0x40
 800580c:	4082      	lsls	r2, r0
 800580e:	4313      	orrs	r3, r2
 8005810:	3401      	adds	r4, #1
 8005812:	9304      	str	r3, [sp, #16]
 8005814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005818:	4825      	ldr	r0, [pc, #148]	; (80058b0 <_svfiprintf_r+0x1ec>)
 800581a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800581e:	2206      	movs	r2, #6
 8005820:	f7fa fd16 	bl	8000250 <memchr>
 8005824:	2800      	cmp	r0, #0
 8005826:	d038      	beq.n	800589a <_svfiprintf_r+0x1d6>
 8005828:	4b22      	ldr	r3, [pc, #136]	; (80058b4 <_svfiprintf_r+0x1f0>)
 800582a:	bb1b      	cbnz	r3, 8005874 <_svfiprintf_r+0x1b0>
 800582c:	9b03      	ldr	r3, [sp, #12]
 800582e:	3307      	adds	r3, #7
 8005830:	f023 0307 	bic.w	r3, r3, #7
 8005834:	3308      	adds	r3, #8
 8005836:	9303      	str	r3, [sp, #12]
 8005838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800583a:	4433      	add	r3, r6
 800583c:	9309      	str	r3, [sp, #36]	; 0x24
 800583e:	e768      	b.n	8005712 <_svfiprintf_r+0x4e>
 8005840:	fb0c 3202 	mla	r2, ip, r2, r3
 8005844:	460c      	mov	r4, r1
 8005846:	2001      	movs	r0, #1
 8005848:	e7a6      	b.n	8005798 <_svfiprintf_r+0xd4>
 800584a:	2300      	movs	r3, #0
 800584c:	3401      	adds	r4, #1
 800584e:	9305      	str	r3, [sp, #20]
 8005850:	4619      	mov	r1, r3
 8005852:	f04f 0c0a 	mov.w	ip, #10
 8005856:	4620      	mov	r0, r4
 8005858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800585c:	3a30      	subs	r2, #48	; 0x30
 800585e:	2a09      	cmp	r2, #9
 8005860:	d903      	bls.n	800586a <_svfiprintf_r+0x1a6>
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0c6      	beq.n	80057f4 <_svfiprintf_r+0x130>
 8005866:	9105      	str	r1, [sp, #20]
 8005868:	e7c4      	b.n	80057f4 <_svfiprintf_r+0x130>
 800586a:	fb0c 2101 	mla	r1, ip, r1, r2
 800586e:	4604      	mov	r4, r0
 8005870:	2301      	movs	r3, #1
 8005872:	e7f0      	b.n	8005856 <_svfiprintf_r+0x192>
 8005874:	ab03      	add	r3, sp, #12
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	462a      	mov	r2, r5
 800587a:	4b0f      	ldr	r3, [pc, #60]	; (80058b8 <_svfiprintf_r+0x1f4>)
 800587c:	a904      	add	r1, sp, #16
 800587e:	4638      	mov	r0, r7
 8005880:	f3af 8000 	nop.w
 8005884:	1c42      	adds	r2, r0, #1
 8005886:	4606      	mov	r6, r0
 8005888:	d1d6      	bne.n	8005838 <_svfiprintf_r+0x174>
 800588a:	89ab      	ldrh	r3, [r5, #12]
 800588c:	065b      	lsls	r3, r3, #25
 800588e:	f53f af2d 	bmi.w	80056ec <_svfiprintf_r+0x28>
 8005892:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005894:	b01d      	add	sp, #116	; 0x74
 8005896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800589a:	ab03      	add	r3, sp, #12
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	462a      	mov	r2, r5
 80058a0:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <_svfiprintf_r+0x1f4>)
 80058a2:	a904      	add	r1, sp, #16
 80058a4:	4638      	mov	r0, r7
 80058a6:	f000 f879 	bl	800599c <_printf_i>
 80058aa:	e7eb      	b.n	8005884 <_svfiprintf_r+0x1c0>
 80058ac:	08005d4c 	.word	0x08005d4c
 80058b0:	08005d56 	.word	0x08005d56
 80058b4:	00000000 	.word	0x00000000
 80058b8:	08005611 	.word	0x08005611
 80058bc:	08005d52 	.word	0x08005d52

080058c0 <_printf_common>:
 80058c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058c4:	4616      	mov	r6, r2
 80058c6:	4699      	mov	r9, r3
 80058c8:	688a      	ldr	r2, [r1, #8]
 80058ca:	690b      	ldr	r3, [r1, #16]
 80058cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058d0:	4293      	cmp	r3, r2
 80058d2:	bfb8      	it	lt
 80058d4:	4613      	movlt	r3, r2
 80058d6:	6033      	str	r3, [r6, #0]
 80058d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058dc:	4607      	mov	r7, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	b10a      	cbz	r2, 80058e6 <_printf_common+0x26>
 80058e2:	3301      	adds	r3, #1
 80058e4:	6033      	str	r3, [r6, #0]
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	0699      	lsls	r1, r3, #26
 80058ea:	bf42      	ittt	mi
 80058ec:	6833      	ldrmi	r3, [r6, #0]
 80058ee:	3302      	addmi	r3, #2
 80058f0:	6033      	strmi	r3, [r6, #0]
 80058f2:	6825      	ldr	r5, [r4, #0]
 80058f4:	f015 0506 	ands.w	r5, r5, #6
 80058f8:	d106      	bne.n	8005908 <_printf_common+0x48>
 80058fa:	f104 0a19 	add.w	sl, r4, #25
 80058fe:	68e3      	ldr	r3, [r4, #12]
 8005900:	6832      	ldr	r2, [r6, #0]
 8005902:	1a9b      	subs	r3, r3, r2
 8005904:	42ab      	cmp	r3, r5
 8005906:	dc26      	bgt.n	8005956 <_printf_common+0x96>
 8005908:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800590c:	1e13      	subs	r3, r2, #0
 800590e:	6822      	ldr	r2, [r4, #0]
 8005910:	bf18      	it	ne
 8005912:	2301      	movne	r3, #1
 8005914:	0692      	lsls	r2, r2, #26
 8005916:	d42b      	bmi.n	8005970 <_printf_common+0xb0>
 8005918:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800591c:	4649      	mov	r1, r9
 800591e:	4638      	mov	r0, r7
 8005920:	47c0      	blx	r8
 8005922:	3001      	adds	r0, #1
 8005924:	d01e      	beq.n	8005964 <_printf_common+0xa4>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	6922      	ldr	r2, [r4, #16]
 800592a:	f003 0306 	and.w	r3, r3, #6
 800592e:	2b04      	cmp	r3, #4
 8005930:	bf02      	ittt	eq
 8005932:	68e5      	ldreq	r5, [r4, #12]
 8005934:	6833      	ldreq	r3, [r6, #0]
 8005936:	1aed      	subeq	r5, r5, r3
 8005938:	68a3      	ldr	r3, [r4, #8]
 800593a:	bf0c      	ite	eq
 800593c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005940:	2500      	movne	r5, #0
 8005942:	4293      	cmp	r3, r2
 8005944:	bfc4      	itt	gt
 8005946:	1a9b      	subgt	r3, r3, r2
 8005948:	18ed      	addgt	r5, r5, r3
 800594a:	2600      	movs	r6, #0
 800594c:	341a      	adds	r4, #26
 800594e:	42b5      	cmp	r5, r6
 8005950:	d11a      	bne.n	8005988 <_printf_common+0xc8>
 8005952:	2000      	movs	r0, #0
 8005954:	e008      	b.n	8005968 <_printf_common+0xa8>
 8005956:	2301      	movs	r3, #1
 8005958:	4652      	mov	r2, sl
 800595a:	4649      	mov	r1, r9
 800595c:	4638      	mov	r0, r7
 800595e:	47c0      	blx	r8
 8005960:	3001      	adds	r0, #1
 8005962:	d103      	bne.n	800596c <_printf_common+0xac>
 8005964:	f04f 30ff 	mov.w	r0, #4294967295
 8005968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800596c:	3501      	adds	r5, #1
 800596e:	e7c6      	b.n	80058fe <_printf_common+0x3e>
 8005970:	18e1      	adds	r1, r4, r3
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	2030      	movs	r0, #48	; 0x30
 8005976:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800597a:	4422      	add	r2, r4
 800597c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005980:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005984:	3302      	adds	r3, #2
 8005986:	e7c7      	b.n	8005918 <_printf_common+0x58>
 8005988:	2301      	movs	r3, #1
 800598a:	4622      	mov	r2, r4
 800598c:	4649      	mov	r1, r9
 800598e:	4638      	mov	r0, r7
 8005990:	47c0      	blx	r8
 8005992:	3001      	adds	r0, #1
 8005994:	d0e6      	beq.n	8005964 <_printf_common+0xa4>
 8005996:	3601      	adds	r6, #1
 8005998:	e7d9      	b.n	800594e <_printf_common+0x8e>
	...

0800599c <_printf_i>:
 800599c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059a0:	7e0f      	ldrb	r7, [r1, #24]
 80059a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059a4:	2f78      	cmp	r7, #120	; 0x78
 80059a6:	4691      	mov	r9, r2
 80059a8:	4680      	mov	r8, r0
 80059aa:	460c      	mov	r4, r1
 80059ac:	469a      	mov	sl, r3
 80059ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059b2:	d807      	bhi.n	80059c4 <_printf_i+0x28>
 80059b4:	2f62      	cmp	r7, #98	; 0x62
 80059b6:	d80a      	bhi.n	80059ce <_printf_i+0x32>
 80059b8:	2f00      	cmp	r7, #0
 80059ba:	f000 80d4 	beq.w	8005b66 <_printf_i+0x1ca>
 80059be:	2f58      	cmp	r7, #88	; 0x58
 80059c0:	f000 80c0 	beq.w	8005b44 <_printf_i+0x1a8>
 80059c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059cc:	e03a      	b.n	8005a44 <_printf_i+0xa8>
 80059ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059d2:	2b15      	cmp	r3, #21
 80059d4:	d8f6      	bhi.n	80059c4 <_printf_i+0x28>
 80059d6:	a101      	add	r1, pc, #4	; (adr r1, 80059dc <_printf_i+0x40>)
 80059d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059dc:	08005a35 	.word	0x08005a35
 80059e0:	08005a49 	.word	0x08005a49
 80059e4:	080059c5 	.word	0x080059c5
 80059e8:	080059c5 	.word	0x080059c5
 80059ec:	080059c5 	.word	0x080059c5
 80059f0:	080059c5 	.word	0x080059c5
 80059f4:	08005a49 	.word	0x08005a49
 80059f8:	080059c5 	.word	0x080059c5
 80059fc:	080059c5 	.word	0x080059c5
 8005a00:	080059c5 	.word	0x080059c5
 8005a04:	080059c5 	.word	0x080059c5
 8005a08:	08005b4d 	.word	0x08005b4d
 8005a0c:	08005a75 	.word	0x08005a75
 8005a10:	08005b07 	.word	0x08005b07
 8005a14:	080059c5 	.word	0x080059c5
 8005a18:	080059c5 	.word	0x080059c5
 8005a1c:	08005b6f 	.word	0x08005b6f
 8005a20:	080059c5 	.word	0x080059c5
 8005a24:	08005a75 	.word	0x08005a75
 8005a28:	080059c5 	.word	0x080059c5
 8005a2c:	080059c5 	.word	0x080059c5
 8005a30:	08005b0f 	.word	0x08005b0f
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	1d1a      	adds	r2, r3, #4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	602a      	str	r2, [r5, #0]
 8005a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a44:	2301      	movs	r3, #1
 8005a46:	e09f      	b.n	8005b88 <_printf_i+0x1ec>
 8005a48:	6820      	ldr	r0, [r4, #0]
 8005a4a:	682b      	ldr	r3, [r5, #0]
 8005a4c:	0607      	lsls	r7, r0, #24
 8005a4e:	f103 0104 	add.w	r1, r3, #4
 8005a52:	6029      	str	r1, [r5, #0]
 8005a54:	d501      	bpl.n	8005a5a <_printf_i+0xbe>
 8005a56:	681e      	ldr	r6, [r3, #0]
 8005a58:	e003      	b.n	8005a62 <_printf_i+0xc6>
 8005a5a:	0646      	lsls	r6, r0, #25
 8005a5c:	d5fb      	bpl.n	8005a56 <_printf_i+0xba>
 8005a5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a62:	2e00      	cmp	r6, #0
 8005a64:	da03      	bge.n	8005a6e <_printf_i+0xd2>
 8005a66:	232d      	movs	r3, #45	; 0x2d
 8005a68:	4276      	negs	r6, r6
 8005a6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a6e:	485a      	ldr	r0, [pc, #360]	; (8005bd8 <_printf_i+0x23c>)
 8005a70:	230a      	movs	r3, #10
 8005a72:	e012      	b.n	8005a9a <_printf_i+0xfe>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	6820      	ldr	r0, [r4, #0]
 8005a78:	1d19      	adds	r1, r3, #4
 8005a7a:	6029      	str	r1, [r5, #0]
 8005a7c:	0605      	lsls	r5, r0, #24
 8005a7e:	d501      	bpl.n	8005a84 <_printf_i+0xe8>
 8005a80:	681e      	ldr	r6, [r3, #0]
 8005a82:	e002      	b.n	8005a8a <_printf_i+0xee>
 8005a84:	0641      	lsls	r1, r0, #25
 8005a86:	d5fb      	bpl.n	8005a80 <_printf_i+0xe4>
 8005a88:	881e      	ldrh	r6, [r3, #0]
 8005a8a:	4853      	ldr	r0, [pc, #332]	; (8005bd8 <_printf_i+0x23c>)
 8005a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8005a8e:	bf0c      	ite	eq
 8005a90:	2308      	moveq	r3, #8
 8005a92:	230a      	movne	r3, #10
 8005a94:	2100      	movs	r1, #0
 8005a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a9a:	6865      	ldr	r5, [r4, #4]
 8005a9c:	60a5      	str	r5, [r4, #8]
 8005a9e:	2d00      	cmp	r5, #0
 8005aa0:	bfa2      	ittt	ge
 8005aa2:	6821      	ldrge	r1, [r4, #0]
 8005aa4:	f021 0104 	bicge.w	r1, r1, #4
 8005aa8:	6021      	strge	r1, [r4, #0]
 8005aaa:	b90e      	cbnz	r6, 8005ab0 <_printf_i+0x114>
 8005aac:	2d00      	cmp	r5, #0
 8005aae:	d04b      	beq.n	8005b48 <_printf_i+0x1ac>
 8005ab0:	4615      	mov	r5, r2
 8005ab2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ab6:	fb03 6711 	mls	r7, r3, r1, r6
 8005aba:	5dc7      	ldrb	r7, [r0, r7]
 8005abc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ac0:	4637      	mov	r7, r6
 8005ac2:	42bb      	cmp	r3, r7
 8005ac4:	460e      	mov	r6, r1
 8005ac6:	d9f4      	bls.n	8005ab2 <_printf_i+0x116>
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d10b      	bne.n	8005ae4 <_printf_i+0x148>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	07de      	lsls	r6, r3, #31
 8005ad0:	d508      	bpl.n	8005ae4 <_printf_i+0x148>
 8005ad2:	6923      	ldr	r3, [r4, #16]
 8005ad4:	6861      	ldr	r1, [r4, #4]
 8005ad6:	4299      	cmp	r1, r3
 8005ad8:	bfde      	ittt	le
 8005ada:	2330      	movle	r3, #48	; 0x30
 8005adc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ae0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ae4:	1b52      	subs	r2, r2, r5
 8005ae6:	6122      	str	r2, [r4, #16]
 8005ae8:	f8cd a000 	str.w	sl, [sp]
 8005aec:	464b      	mov	r3, r9
 8005aee:	aa03      	add	r2, sp, #12
 8005af0:	4621      	mov	r1, r4
 8005af2:	4640      	mov	r0, r8
 8005af4:	f7ff fee4 	bl	80058c0 <_printf_common>
 8005af8:	3001      	adds	r0, #1
 8005afa:	d14a      	bne.n	8005b92 <_printf_i+0x1f6>
 8005afc:	f04f 30ff 	mov.w	r0, #4294967295
 8005b00:	b004      	add	sp, #16
 8005b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	f043 0320 	orr.w	r3, r3, #32
 8005b0c:	6023      	str	r3, [r4, #0]
 8005b0e:	4833      	ldr	r0, [pc, #204]	; (8005bdc <_printf_i+0x240>)
 8005b10:	2778      	movs	r7, #120	; 0x78
 8005b12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	6829      	ldr	r1, [r5, #0]
 8005b1a:	061f      	lsls	r7, r3, #24
 8005b1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b20:	d402      	bmi.n	8005b28 <_printf_i+0x18c>
 8005b22:	065f      	lsls	r7, r3, #25
 8005b24:	bf48      	it	mi
 8005b26:	b2b6      	uxthmi	r6, r6
 8005b28:	07df      	lsls	r7, r3, #31
 8005b2a:	bf48      	it	mi
 8005b2c:	f043 0320 	orrmi.w	r3, r3, #32
 8005b30:	6029      	str	r1, [r5, #0]
 8005b32:	bf48      	it	mi
 8005b34:	6023      	strmi	r3, [r4, #0]
 8005b36:	b91e      	cbnz	r6, 8005b40 <_printf_i+0x1a4>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	f023 0320 	bic.w	r3, r3, #32
 8005b3e:	6023      	str	r3, [r4, #0]
 8005b40:	2310      	movs	r3, #16
 8005b42:	e7a7      	b.n	8005a94 <_printf_i+0xf8>
 8005b44:	4824      	ldr	r0, [pc, #144]	; (8005bd8 <_printf_i+0x23c>)
 8005b46:	e7e4      	b.n	8005b12 <_printf_i+0x176>
 8005b48:	4615      	mov	r5, r2
 8005b4a:	e7bd      	b.n	8005ac8 <_printf_i+0x12c>
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	6826      	ldr	r6, [r4, #0]
 8005b50:	6961      	ldr	r1, [r4, #20]
 8005b52:	1d18      	adds	r0, r3, #4
 8005b54:	6028      	str	r0, [r5, #0]
 8005b56:	0635      	lsls	r5, r6, #24
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	d501      	bpl.n	8005b60 <_printf_i+0x1c4>
 8005b5c:	6019      	str	r1, [r3, #0]
 8005b5e:	e002      	b.n	8005b66 <_printf_i+0x1ca>
 8005b60:	0670      	lsls	r0, r6, #25
 8005b62:	d5fb      	bpl.n	8005b5c <_printf_i+0x1c0>
 8005b64:	8019      	strh	r1, [r3, #0]
 8005b66:	2300      	movs	r3, #0
 8005b68:	6123      	str	r3, [r4, #16]
 8005b6a:	4615      	mov	r5, r2
 8005b6c:	e7bc      	b.n	8005ae8 <_printf_i+0x14c>
 8005b6e:	682b      	ldr	r3, [r5, #0]
 8005b70:	1d1a      	adds	r2, r3, #4
 8005b72:	602a      	str	r2, [r5, #0]
 8005b74:	681d      	ldr	r5, [r3, #0]
 8005b76:	6862      	ldr	r2, [r4, #4]
 8005b78:	2100      	movs	r1, #0
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	f7fa fb68 	bl	8000250 <memchr>
 8005b80:	b108      	cbz	r0, 8005b86 <_printf_i+0x1ea>
 8005b82:	1b40      	subs	r0, r0, r5
 8005b84:	6060      	str	r0, [r4, #4]
 8005b86:	6863      	ldr	r3, [r4, #4]
 8005b88:	6123      	str	r3, [r4, #16]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b90:	e7aa      	b.n	8005ae8 <_printf_i+0x14c>
 8005b92:	6923      	ldr	r3, [r4, #16]
 8005b94:	462a      	mov	r2, r5
 8005b96:	4649      	mov	r1, r9
 8005b98:	4640      	mov	r0, r8
 8005b9a:	47d0      	blx	sl
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	d0ad      	beq.n	8005afc <_printf_i+0x160>
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	079b      	lsls	r3, r3, #30
 8005ba4:	d413      	bmi.n	8005bce <_printf_i+0x232>
 8005ba6:	68e0      	ldr	r0, [r4, #12]
 8005ba8:	9b03      	ldr	r3, [sp, #12]
 8005baa:	4298      	cmp	r0, r3
 8005bac:	bfb8      	it	lt
 8005bae:	4618      	movlt	r0, r3
 8005bb0:	e7a6      	b.n	8005b00 <_printf_i+0x164>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	4632      	mov	r2, r6
 8005bb6:	4649      	mov	r1, r9
 8005bb8:	4640      	mov	r0, r8
 8005bba:	47d0      	blx	sl
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	d09d      	beq.n	8005afc <_printf_i+0x160>
 8005bc0:	3501      	adds	r5, #1
 8005bc2:	68e3      	ldr	r3, [r4, #12]
 8005bc4:	9903      	ldr	r1, [sp, #12]
 8005bc6:	1a5b      	subs	r3, r3, r1
 8005bc8:	42ab      	cmp	r3, r5
 8005bca:	dcf2      	bgt.n	8005bb2 <_printf_i+0x216>
 8005bcc:	e7eb      	b.n	8005ba6 <_printf_i+0x20a>
 8005bce:	2500      	movs	r5, #0
 8005bd0:	f104 0619 	add.w	r6, r4, #25
 8005bd4:	e7f5      	b.n	8005bc2 <_printf_i+0x226>
 8005bd6:	bf00      	nop
 8005bd8:	08005d5d 	.word	0x08005d5d
 8005bdc:	08005d6e 	.word	0x08005d6e

08005be0 <memmove>:
 8005be0:	4288      	cmp	r0, r1
 8005be2:	b510      	push	{r4, lr}
 8005be4:	eb01 0402 	add.w	r4, r1, r2
 8005be8:	d902      	bls.n	8005bf0 <memmove+0x10>
 8005bea:	4284      	cmp	r4, r0
 8005bec:	4623      	mov	r3, r4
 8005bee:	d807      	bhi.n	8005c00 <memmove+0x20>
 8005bf0:	1e43      	subs	r3, r0, #1
 8005bf2:	42a1      	cmp	r1, r4
 8005bf4:	d008      	beq.n	8005c08 <memmove+0x28>
 8005bf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bfe:	e7f8      	b.n	8005bf2 <memmove+0x12>
 8005c00:	4402      	add	r2, r0
 8005c02:	4601      	mov	r1, r0
 8005c04:	428a      	cmp	r2, r1
 8005c06:	d100      	bne.n	8005c0a <memmove+0x2a>
 8005c08:	bd10      	pop	{r4, pc}
 8005c0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c12:	e7f7      	b.n	8005c04 <memmove+0x24>

08005c14 <_sbrk_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	4d06      	ldr	r5, [pc, #24]	; (8005c30 <_sbrk_r+0x1c>)
 8005c18:	2300      	movs	r3, #0
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	4608      	mov	r0, r1
 8005c1e:	602b      	str	r3, [r5, #0]
 8005c20:	f7fb fa4e 	bl	80010c0 <_sbrk>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d102      	bne.n	8005c2e <_sbrk_r+0x1a>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	b103      	cbz	r3, 8005c2e <_sbrk_r+0x1a>
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	2000050c 	.word	0x2000050c

08005c34 <memcpy>:
 8005c34:	440a      	add	r2, r1
 8005c36:	4291      	cmp	r1, r2
 8005c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c3c:	d100      	bne.n	8005c40 <memcpy+0xc>
 8005c3e:	4770      	bx	lr
 8005c40:	b510      	push	{r4, lr}
 8005c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c4a:	4291      	cmp	r1, r2
 8005c4c:	d1f9      	bne.n	8005c42 <memcpy+0xe>
 8005c4e:	bd10      	pop	{r4, pc}

08005c50 <_realloc_r>:
 8005c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c54:	4680      	mov	r8, r0
 8005c56:	4614      	mov	r4, r2
 8005c58:	460e      	mov	r6, r1
 8005c5a:	b921      	cbnz	r1, 8005c66 <_realloc_r+0x16>
 8005c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c60:	4611      	mov	r1, r2
 8005c62:	f7ff bc49 	b.w	80054f8 <_malloc_r>
 8005c66:	b92a      	cbnz	r2, 8005c74 <_realloc_r+0x24>
 8005c68:	f7ff fbda 	bl	8005420 <_free_r>
 8005c6c:	4625      	mov	r5, r4
 8005c6e:	4628      	mov	r0, r5
 8005c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c74:	f000 f81b 	bl	8005cae <_malloc_usable_size_r>
 8005c78:	4284      	cmp	r4, r0
 8005c7a:	4607      	mov	r7, r0
 8005c7c:	d802      	bhi.n	8005c84 <_realloc_r+0x34>
 8005c7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c82:	d812      	bhi.n	8005caa <_realloc_r+0x5a>
 8005c84:	4621      	mov	r1, r4
 8005c86:	4640      	mov	r0, r8
 8005c88:	f7ff fc36 	bl	80054f8 <_malloc_r>
 8005c8c:	4605      	mov	r5, r0
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d0ed      	beq.n	8005c6e <_realloc_r+0x1e>
 8005c92:	42bc      	cmp	r4, r7
 8005c94:	4622      	mov	r2, r4
 8005c96:	4631      	mov	r1, r6
 8005c98:	bf28      	it	cs
 8005c9a:	463a      	movcs	r2, r7
 8005c9c:	f7ff ffca 	bl	8005c34 <memcpy>
 8005ca0:	4631      	mov	r1, r6
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	f7ff fbbc 	bl	8005420 <_free_r>
 8005ca8:	e7e1      	b.n	8005c6e <_realloc_r+0x1e>
 8005caa:	4635      	mov	r5, r6
 8005cac:	e7df      	b.n	8005c6e <_realloc_r+0x1e>

08005cae <_malloc_usable_size_r>:
 8005cae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cb2:	1f18      	subs	r0, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	bfbc      	itt	lt
 8005cb8:	580b      	ldrlt	r3, [r1, r0]
 8005cba:	18c0      	addlt	r0, r0, r3
 8005cbc:	4770      	bx	lr
	...

08005cc0 <_init>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	bf00      	nop
 8005cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc6:	bc08      	pop	{r3}
 8005cc8:	469e      	mov	lr, r3
 8005cca:	4770      	bx	lr

08005ccc <_fini>:
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	bf00      	nop
 8005cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd2:	bc08      	pop	{r3}
 8005cd4:	469e      	mov	lr, r3
 8005cd6:	4770      	bx	lr
