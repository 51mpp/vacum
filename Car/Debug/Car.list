
Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ba4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007da4  08007da4  00017da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dfc  08007dfc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007dfc  08007dfc  00017dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e04  08007e04  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e04  08007e04  00017e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e08  08007e08  00017e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000918  20000070  08007e7c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000988  08007e7c  00020988  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a63  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f16  00000000  00000000  00037b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a0  00000000  00000000  0003aa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000102f  00000000  00000000  0003bf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028fbc  00000000  00000000  0003cf2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019d49  00000000  00000000  00065eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fedae  00000000  00000000  0007fc34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d80  00000000  00000000  0017e9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00184764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08007d8c 	.word	0x08007d8c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08007d8c 	.word	0x08007d8c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <delay>:
uint8_t value = 200;

#define TRIG_PIN GPIO_PIN_8
#define TRIG_PORT GPIOE

void delay(uint16_t microsec) {
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <delay+0x30>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2200      	movs	r2, #0
 80005fc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < microsec)
 80005fe:	bf00      	nop
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <delay+0x30>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	429a      	cmp	r2, r3
 800060a:	d3f9      	bcc.n	8000600 <delay+0x14>
		;

}
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	200000e0 	.word	0x200000e0

08000620 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	7f1b      	ldrb	r3, [r3, #28]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d17a      	bne.n	8000726 <HAL_TIM_IC_CaptureCallback+0x106>
			{
		if (Is_First_Captured == 0) // if the first value is not captured
 8000630:	4b41      	ldr	r3, [pc, #260]	; (8000738 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d11a      	bne.n	800066e <HAL_TIM_IC_CaptureCallback+0x4e>
				{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000638:	2100      	movs	r1, #0
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f004 fafc 	bl	8004c38 <HAL_TIM_ReadCapturedValue>
 8000640:	4603      	mov	r3, r0
 8000642:	4a3e      	ldr	r2, [pc, #248]	; (800073c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000644:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000646:	4b3c      	ldr	r3, [pc, #240]	; (8000738 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000648:	2201      	movs	r2, #1
 800064a:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	6a1a      	ldr	r2, [r3, #32]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f022 020a 	bic.w	r2, r2, #10
 800065a:	621a      	str	r2, [r3, #32]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	6a1a      	ldr	r2, [r3, #32]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f042 0202 	orr.w	r2, r2, #2
 800066a:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 800066c:	e05b      	b.n	8000726 <HAL_TIM_IC_CaptureCallback+0x106>
		else if (Is_First_Captured == 1)   // if the first is already captured
 800066e:	4b32      	ldr	r3, [pc, #200]	; (8000738 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d157      	bne.n	8000726 <HAL_TIM_IC_CaptureCallback+0x106>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8000676:	2100      	movs	r1, #0
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f004 fadd 	bl	8004c38 <HAL_TIM_ReadCapturedValue>
 800067e:	4603      	mov	r3, r0
 8000680:	4a2f      	ldr	r2, [pc, #188]	; (8000740 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000682:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2200      	movs	r2, #0
 800068a:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 800068c:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <HAL_TIM_IC_CaptureCallback+0x120>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b2a      	ldr	r3, [pc, #168]	; (800073c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	429a      	cmp	r2, r3
 8000696:	d907      	bls.n	80006a8 <HAL_TIM_IC_CaptureCallback+0x88>
				Difference = IC_Val2 - IC_Val1;
 8000698:	4b29      	ldr	r3, [pc, #164]	; (8000740 <HAL_TIM_IC_CaptureCallback+0x120>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <HAL_TIM_IC_CaptureCallback+0x11c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	4a28      	ldr	r2, [pc, #160]	; (8000744 <HAL_TIM_IC_CaptureCallback+0x124>)
 80006a4:	6013      	str	r3, [r2, #0]
 80006a6:	e00f      	b.n	80006c8 <HAL_TIM_IC_CaptureCallback+0xa8>
			else if (IC_Val1 > IC_Val2) {
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4b24      	ldr	r3, [pc, #144]	; (8000740 <HAL_TIM_IC_CaptureCallback+0x120>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d909      	bls.n	80006c8 <HAL_TIM_IC_CaptureCallback+0xa8>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <HAL_TIM_IC_CaptureCallback+0x120>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b20      	ldr	r3, [pc, #128]	; (800073c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	1ad2      	subs	r2, r2, r3
 80006be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006c2:	4413      	add	r3, r2
 80006c4:	4a1f      	ldr	r2, [pc, #124]	; (8000744 <HAL_TIM_IC_CaptureCallback+0x124>)
 80006c6:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034 / 2;
 80006c8:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <HAL_TIM_IC_CaptureCallback+0x124>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	ee07 3a90 	vmov	s15, r3
 80006d0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80006d4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000730 <HAL_TIM_IC_CaptureCallback+0x110>
 80006d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006dc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80006e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	edc7 7a00 	vstr	s15, [r7]
 80006ec:	783b      	ldrb	r3, [r7, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_TIM_IC_CaptureCallback+0x128>)
 80006f2:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 80006f4:	4b10      	ldr	r3, [pc, #64]	; (8000738 <HAL_TIM_IC_CaptureCallback+0x118>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	6a1a      	ldr	r2, [r3, #32]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f022 020a 	bic.w	r2, r2, #10
 8000708:	621a      	str	r2, [r3, #32]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	6a12      	ldr	r2, [r2, #32]
 8000714:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	68da      	ldr	r2, [r3, #12]
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f022 0202 	bic.w	r2, r2, #2
 8000724:	60da      	str	r2, [r3, #12]
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	b020c49c 	.word	0xb020c49c
 8000734:	3fa16872 	.word	0x3fa16872
 8000738:	200007ec 	.word	0x200007ec
 800073c:	200007e0 	.word	0x200007e0
 8000740:	200007e4 	.word	0x200007e4
 8000744:	200007e8 	.word	0x200007e8
 8000748:	200007ed 	.word	0x200007ed
 800074c:	200000e0 	.word	0x200000e0

08000750 <HCSR04_Read>:
void HCSR04_Read(void) {
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <HCSR04_Read+0x38>)
 800075c:	f001 ff12 	bl	8002584 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000760:	200a      	movs	r0, #10
 8000762:	f7ff ff43 	bl	80005ec <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4806      	ldr	r0, [pc, #24]	; (8000788 <HCSR04_Read+0x38>)
 800076e:	f001 ff09 	bl	8002584 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HCSR04_Read+0x3c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	68da      	ldr	r2, [r3, #12]
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <HCSR04_Read+0x3c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f042 0202 	orr.w	r2, r2, #2
 8000780:	60da      	str	r2, [r3, #12]
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000
 800078c:	200000e0 	.word	0x200000e0

08000790 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b09c      	sub	sp, #112	; 0x70
 8000794:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000796:	f001 fb24 	bl	8001de2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800079a:	f000 f9e7 	bl	8000b6c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800079e:	f000 fca5 	bl	80010ec <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80007a2:	f000 fc45 	bl	8001030 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80007a6:	f000 fc73 	bl	8001090 <MX_USB_OTG_FS_PCD_Init>
	MX_USART1_UART_Init();
 80007aa:	f000 fc11 	bl	8000fd0 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 80007ae:	f000 fae9 	bl	8000d84 <MX_TIM2_Init>
	MX_TIM1_Init();
 80007b2:	f000 fa8d 	bl	8000cd0 <MX_TIM1_Init>
	MX_I2C1_Init();
 80007b6:	f000 fa4b 	bl	8000c50 <MX_I2C1_Init>
	MX_TIM3_Init();
 80007ba:	f000 fb7b 	bl	8000eb4 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
//	HAL_UART_Receive_IT(&huart1, (uint16_t*) &state, 64);
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80007be:	2201      	movs	r2, #1
 80007c0:	49b0      	ldr	r1, [pc, #704]	; (8000a84 <main+0x2f4>)
 80007c2:	48b1      	ldr	r0, [pc, #708]	; (8000a88 <main+0x2f8>)
 80007c4:	f005 f909 	bl	80059da <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007c8:	2100      	movs	r1, #0
 80007ca:	48b0      	ldr	r0, [pc, #704]	; (8000a8c <main+0x2fc>)
 80007cc:	f003 fb78 	bl	8003ec0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80007d0:	2104      	movs	r1, #4
 80007d2:	48ae      	ldr	r0, [pc, #696]	; (8000a8c <main+0x2fc>)
 80007d4:	f003 fb74 	bl	8003ec0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80007d8:	2108      	movs	r1, #8
 80007da:	48ac      	ldr	r0, [pc, #688]	; (8000a8c <main+0x2fc>)
 80007dc:	f003 fb70 	bl	8003ec0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80007e0:	210c      	movs	r1, #12
 80007e2:	48aa      	ldr	r0, [pc, #680]	; (8000a8c <main+0x2fc>)
 80007e4:	f003 fb6c 	bl	8003ec0 <HAL_TIM_PWM_Start>
	char strdistance[100];
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80007e8:	2100      	movs	r1, #0
 80007ea:	48a9      	ldr	r0, [pc, #676]	; (8000a90 <main+0x300>)
 80007ec:	f003 fd3a 	bl	8004264 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007f0:	2100      	movs	r1, #0
 80007f2:	48a8      	ldr	r0, [pc, #672]	; (8000a94 <main+0x304>)
 80007f4:	f003 fb64 	bl	8003ec0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80007f8:	2104      	movs	r1, #4
 80007fa:	48a6      	ldr	r0, [pc, #664]	; (8000a94 <main+0x304>)
 80007fc:	f003 fb60 	bl	8003ec0 <HAL_TIM_PWM_Start>
	int average(int x);
	float red = 0.0;
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	66fb      	str	r3, [r7, #108]	; 0x6c
	float green = 0.0;
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	66bb      	str	r3, [r7, #104]	; 0x68
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		htim2.Instance->CCR1 = (1000 - 1) * ena_1;
 800080c:	4ba2      	ldr	r3, [pc, #648]	; (8000a98 <main+0x308>)
 800080e:	edd3 7a00 	vldr	s15, [r3]
 8000812:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8000a9c <main+0x30c>
 8000816:	ee67 7a87 	vmul.f32	s15, s15, s14
 800081a:	4b9c      	ldr	r3, [pc, #624]	; (8000a8c <main+0x2fc>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000822:	ee17 2a90 	vmov	r2, s15
 8000826:	635a      	str	r2, [r3, #52]	; 0x34
		htim2.Instance->CCR2 = (1000 - 1) * enb_1;
 8000828:	4b9d      	ldr	r3, [pc, #628]	; (8000aa0 <main+0x310>)
 800082a:	edd3 7a00 	vldr	s15, [r3]
 800082e:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8000a9c <main+0x30c>
 8000832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000836:	4b95      	ldr	r3, [pc, #596]	; (8000a8c <main+0x2fc>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800083e:	ee17 2a90 	vmov	r2, s15
 8000842:	639a      	str	r2, [r3, #56]	; 0x38
		htim2.Instance->CCR3 = (1000 - 1) * ena_2;
 8000844:	4b97      	ldr	r3, [pc, #604]	; (8000aa4 <main+0x314>)
 8000846:	edd3 7a00 	vldr	s15, [r3]
 800084a:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8000a9c <main+0x30c>
 800084e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000852:	4b8e      	ldr	r3, [pc, #568]	; (8000a8c <main+0x2fc>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800085a:	ee17 2a90 	vmov	r2, s15
 800085e:	63da      	str	r2, [r3, #60]	; 0x3c
		htim2.Instance->CCR4 = (1000 - 1) * enb_2;
 8000860:	4b91      	ldr	r3, [pc, #580]	; (8000aa8 <main+0x318>)
 8000862:	edd3 7a00 	vldr	s15, [r3]
 8000866:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8000a9c <main+0x30c>
 800086a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800086e:	4b87      	ldr	r3, [pc, #540]	; (8000a8c <main+0x2fc>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000876:	ee17 2a90 	vmov	r2, s15
 800087a:	641a      	str	r2, [r3, #64]	; 0x40
		htim3.Instance->CCR1 = (1000 - 1) * red;
 800087c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000880:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8000a9c <main+0x30c>
 8000884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000888:	4b82      	ldr	r3, [pc, #520]	; (8000a94 <main+0x304>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000890:	ee17 2a90 	vmov	r2, s15
 8000894:	635a      	str	r2, [r3, #52]	; 0x34
		htim3.Instance->CCR2 = (1000 - 1) * green;
 8000896:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800089a:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8000a9c <main+0x30c>
 800089e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008a2:	4b7c      	ldr	r3, [pc, #496]	; (8000a94 <main+0x304>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008aa:	ee17 2a90 	vmov	r2, s15
 80008ae:	639a      	str	r2, [r3, #56]	; 0x38
		HCSR04_Read();
 80008b0:	f7ff ff4e 	bl	8000750 <HCSR04_Read>
		delay(10000);
 80008b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80008b8:	f7ff fe98 	bl	80005ec <delay>
		avDis = average(Distance);
 80008bc:	4b7b      	ldr	r3, [pc, #492]	; (8000aac <main+0x31c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 febd 	bl	8001640 <average>
 80008c6:	4603      	mov	r3, r0
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b79      	ldr	r3, [pc, #484]	; (8000ab0 <main+0x320>)
 80008cc:	701a      	strb	r2, [r3, #0]
		sprintf(strdistance, "%d\n\r", avDis);
 80008ce:	4b78      	ldr	r3, [pc, #480]	; (8000ab0 <main+0x320>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	461a      	mov	r2, r3
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4977      	ldr	r1, [pc, #476]	; (8000ab4 <main+0x324>)
 80008d8:	4618      	mov	r0, r3
 80008da:	f006 fdb3 	bl	8007444 <siprintf>

		HAL_UART_Transmit(&huart3, (uint8_t*) strdistance, strlen(strdistance),1000);
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fcad 	bl	8000240 <strlen>
 80008e6:	4603      	mov	r3, r0
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	1d39      	adds	r1, r7, #4
 80008ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f0:	4871      	ldr	r0, [pc, #452]	; (8000ab8 <main+0x328>)
 80008f2:	f004 ffef 	bl	80058d4 <HAL_UART_Transmit>
		if (mode == 0) {
 80008f6:	4b71      	ldr	r3, [pc, #452]	; (8000abc <main+0x32c>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d12d      	bne.n	800095a <main+0x1ca>
			if (avDis <= 15) {
 80008fe:	4b6c      	ldr	r3, [pc, #432]	; (8000ab0 <main+0x320>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b0f      	cmp	r3, #15
 8000904:	d814      	bhi.n	8000930 <main+0x1a0>
				light = 0;
 8000906:	4b6e      	ldr	r3, [pc, #440]	; (8000ac0 <main+0x330>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1,  &light, 1, 1000);
 800090c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000910:	2201      	movs	r2, #1
 8000912:	496b      	ldr	r1, [pc, #428]	; (8000ac0 <main+0x330>)
 8000914:	485c      	ldr	r0, [pc, #368]	; (8000a88 <main+0x2f8>)
 8000916:	f004 ffdd 	bl	80058d4 <HAL_UART_Transmit>

				//					HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
				//					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
				//					pwm = (GPIOA->IDR & GPIO_PIN_6) >> 10;
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800091a:	2108      	movs	r1, #8
 800091c:	485d      	ldr	r0, [pc, #372]	; (8000a94 <main+0x304>)
 800091e:	f003 facf 	bl	8003ec0 <HAL_TIM_PWM_Start>
				//					htim3.Instance->CCR1 = value;
				red = 1.0;
 8000922:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000926:	66fb      	str	r3, [r7, #108]	; 0x6c
				green = 0.0;
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	66bb      	str	r3, [r7, #104]	; 0x68
 800092e:	e00f      	b.n	8000950 <main+0x1c0>

			} else {
				light =1;
 8000930:	4b63      	ldr	r3, [pc, #396]	; (8000ac0 <main+0x330>)
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1,  &light, 1, 1000);
 8000936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093a:	2201      	movs	r2, #1
 800093c:	4960      	ldr	r1, [pc, #384]	; (8000ac0 <main+0x330>)
 800093e:	4852      	ldr	r0, [pc, #328]	; (8000a88 <main+0x2f8>)
 8000940:	f004 ffc8 	bl	80058d4 <HAL_UART_Transmit>

				//					HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
				//					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
				//					pwm = (GPIOA->IDR & GPIO_PIN_7) >> 10;
				red = 0.0;
 8000944:	f04f 0300 	mov.w	r3, #0
 8000948:	66fb      	str	r3, [r7, #108]	; 0x6c
				green = 1.0;
 800094a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800094e:	66bb      	str	r3, [r7, #104]	; 0x68
			}
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8000950:	2108      	movs	r1, #8
 8000952:	4850      	ldr	r0, [pc, #320]	; (8000a94 <main+0x304>)
 8000954:	f003 fbae 	bl	80040b4 <HAL_TIM_PWM_Stop>
 8000958:	e758      	b.n	800080c <main+0x7c>
		} else if (mode == 1) {
 800095a:	4b58      	ldr	r3, [pc, #352]	; (8000abc <main+0x32c>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b01      	cmp	r3, #1
 8000960:	f47f af54 	bne.w	800080c <main+0x7c>
			light=0;
 8000964:	4b56      	ldr	r3, [pc, #344]	; (8000ac0 <main+0x330>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,  &light, 1, 1000);
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	2201      	movs	r2, #1
 8000970:	4953      	ldr	r1, [pc, #332]	; (8000ac0 <main+0x330>)
 8000972:	4845      	ldr	r0, [pc, #276]	; (8000a88 <main+0x2f8>)
 8000974:	f004 ffae 	bl	80058d4 <HAL_UART_Transmit>
			ena_1 =1.0;
 8000978:	4b47      	ldr	r3, [pc, #284]	; (8000a98 <main+0x308>)
 800097a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800097e:	601a      	str	r2, [r3, #0]
			enb_1 =1.0;
 8000980:	4b47      	ldr	r3, [pc, #284]	; (8000aa0 <main+0x310>)
 8000982:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000986:	601a      	str	r2, [r3, #0]
			ena_2 = 1.0;
 8000988:	4b46      	ldr	r3, [pc, #280]	; (8000aa4 <main+0x314>)
 800098a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800098e:	601a      	str	r2, [r3, #0]
			enb_2 = 1.0;
 8000990:	4b45      	ldr	r3, [pc, #276]	; (8000aa8 <main+0x318>)
 8000992:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000996:	601a      	str	r2, [r3, #0]
			if (avDis <= 15) {
 8000998:	4b45      	ldr	r3, [pc, #276]	; (8000ab0 <main+0x320>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	f200 809b 	bhi.w	8000ad8 <main+0x348>
				//					HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
				//					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
				//					pwm = (GPIOA->IDR & GPIO_PIN_6) >> 10;
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80009a2:	2108      	movs	r1, #8
 80009a4:	483b      	ldr	r0, [pc, #236]	; (8000a94 <main+0x304>)
 80009a6:	f003 fa8b 	bl	8003ec0 <HAL_TIM_PWM_Start>
				//					htim3.Instance->CCR1 = value;
				HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2101      	movs	r1, #1
 80009ae:	4845      	ldr	r0, [pc, #276]	; (8000ac4 <main+0x334>)
 80009b0:	f001 fde8 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, 1);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2108      	movs	r1, #8
 80009b8:	4842      	ldr	r0, [pc, #264]	; (8000ac4 <main+0x334>)
 80009ba:	f001 fde3 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, 1);
 80009be:	2201      	movs	r2, #1
 80009c0:	2108      	movs	r1, #8
 80009c2:	4841      	ldr	r0, [pc, #260]	; (8000ac8 <main+0x338>)
 80009c4:	f001 fdde 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2120      	movs	r1, #32
 80009cc:	483e      	ldr	r0, [pc, #248]	; (8000ac8 <main+0x338>)
 80009ce:	f001 fdd9 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2140      	movs	r1, #64	; 0x40
 80009d6:	483d      	ldr	r0, [pc, #244]	; (8000acc <main+0x33c>)
 80009d8:	f001 fdd4 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, 1);
 80009dc:	2201      	movs	r2, #1
 80009de:	2120      	movs	r1, #32
 80009e0:	483a      	ldr	r0, [pc, #232]	; (8000acc <main+0x33c>)
 80009e2:	f001 fdcf 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, 1);
 80009e6:	2201      	movs	r2, #1
 80009e8:	2110      	movs	r1, #16
 80009ea:	4838      	ldr	r0, [pc, #224]	; (8000acc <main+0x33c>)
 80009ec:	f001 fdca 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2108      	movs	r1, #8
 80009f4:	4835      	ldr	r0, [pc, #212]	; (8000acc <main+0x33c>)
 80009f6:	f001 fdc5 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 80009fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009fe:	f001 fa4d 	bl	8001e9c <HAL_Delay>



				ena_1 =1.0;
 8000a02:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <main+0x308>)
 8000a04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000a08:	601a      	str	r2, [r3, #0]
							enb_1 =1.0;
 8000a0a:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <main+0x310>)
 8000a0c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000a10:	601a      	str	r2, [r3, #0]
							ena_2 = 0.3;
 8000a12:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <main+0x314>)
 8000a14:	4a2e      	ldr	r2, [pc, #184]	; (8000ad0 <main+0x340>)
 8000a16:	601a      	str	r2, [r3, #0]
							enb_2 = 0.8;
 8000a18:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <main+0x318>)
 8000a1a:	4a2e      	ldr	r2, [pc, #184]	; (8000ad4 <main+0x344>)
 8000a1c:	601a      	str	r2, [r3, #0]
				red = 1.0;
 8000a1e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000a22:	66fb      	str	r3, [r7, #108]	; 0x6c
				green = 0.0;
 8000a24:	f04f 0300 	mov.w	r3, #0
 8000a28:	66bb      	str	r3, [r7, #104]	; 0x68
								HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, 1);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4825      	ldr	r0, [pc, #148]	; (8000ac4 <main+0x334>)
 8000a30:	f001 fda8 	bl	8002584 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2108      	movs	r1, #8
 8000a38:	4822      	ldr	r0, [pc, #136]	; (8000ac4 <main+0x334>)
 8000a3a:	f001 fda3 	bl	8002584 <HAL_GPIO_WritePin>
								//
								HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2108      	movs	r1, #8
 8000a42:	4821      	ldr	r0, [pc, #132]	; (8000ac8 <main+0x338>)
 8000a44:	f001 fd9e 	bl	8002584 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, 1);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2120      	movs	r1, #32
 8000a4c:	481e      	ldr	r0, [pc, #120]	; (8000ac8 <main+0x338>)
 8000a4e:	f001 fd99 	bl	8002584 <HAL_GPIO_WritePin>
								//
								HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2140      	movs	r1, #64	; 0x40
 8000a56:	481d      	ldr	r0, [pc, #116]	; (8000acc <main+0x33c>)
 8000a58:	f001 fd94 	bl	8002584 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, 1);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2120      	movs	r1, #32
 8000a60:	481a      	ldr	r0, [pc, #104]	; (8000acc <main+0x33c>)
 8000a62:	f001 fd8f 	bl	8002584 <HAL_GPIO_WritePin>
								//
								HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, 1);
 8000a66:	2201      	movs	r2, #1
 8000a68:	2110      	movs	r1, #16
 8000a6a:	4818      	ldr	r0, [pc, #96]	; (8000acc <main+0x33c>)
 8000a6c:	f001 fd8a 	bl	8002584 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2108      	movs	r1, #8
 8000a74:	4815      	ldr	r0, [pc, #84]	; (8000acc <main+0x33c>)
 8000a76:	f001 fd85 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_Delay(900);
 8000a7a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000a7e:	f001 fa0d 	bl	8001e9c <HAL_Delay>
 8000a82:	e061      	b.n	8000b48 <main+0x3b8>
 8000a84:	200007dd 	.word	0x200007dd
 8000a88:	200001c4 	.word	0x200001c4
 8000a8c:	2000012c 	.word	0x2000012c
 8000a90:	200000e0 	.word	0x200000e0
 8000a94:	20000178 	.word	0x20000178
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	4479c000 	.word	0x4479c000
 8000aa0:	20000004 	.word	0x20000004
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	2000000c 	.word	0x2000000c
 8000aac:	200007ed 	.word	0x200007ed
 8000ab0:	200007de 	.word	0x200007de
 8000ab4:	08007da4 	.word	0x08007da4
 8000ab8:	2000024c 	.word	0x2000024c
 8000abc:	200007dc 	.word	0x200007dc
 8000ac0:	20000010 	.word	0x20000010
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40021400 	.word	0x40021400
 8000acc:	40020c00 	.word	0x40020c00
 8000ad0:	3e99999a 	.word	0x3e99999a
 8000ad4:	3f4ccccd 	.word	0x3f4ccccd
//				HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, 1);
//				HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, 0);
//				HAL_Delay(300);

			} else {
				light=1;
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <main+0x3c4>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1,  &light, 1, 1000);
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	491b      	ldr	r1, [pc, #108]	; (8000b54 <main+0x3c4>)
 8000ae6:	481c      	ldr	r0, [pc, #112]	; (8000b58 <main+0x3c8>)
 8000ae8:	f004 fef4 	bl	80058d4 <HAL_UART_Transmit>

				//					HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
				//					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
				//					pwm = (GPIOA->IDR & GPIO_PIN_7) >> 10;
				red = 0.0;
 8000aec:	f04f 0300 	mov.w	r3, #0
 8000af0:	66fb      	str	r3, [r7, #108]	; 0x6c
				green = 1.0;
 8000af2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000af6:	66bb      	str	r3, [r7, #104]	; 0x68
				HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, 1);		//ขวาบน
 8000af8:	2201      	movs	r2, #1
 8000afa:	2101      	movs	r1, #1
 8000afc:	4817      	ldr	r0, [pc, #92]	; (8000b5c <main+0x3cc>)
 8000afe:	f001 fd41 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2108      	movs	r1, #8
 8000b06:	4815      	ldr	r0, [pc, #84]	; (8000b5c <main+0x3cc>)
 8000b08:	f001 fd3c 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2108      	movs	r1, #8
 8000b10:	4813      	ldr	r0, [pc, #76]	; (8000b60 <main+0x3d0>)
 8000b12:	f001 fd37 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, 1);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2120      	movs	r1, #32
 8000b1a:	4811      	ldr	r0, [pc, #68]	; (8000b60 <main+0x3d0>)
 8000b1c:	f001 fd32 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, 1);	//ซ้ายล่าง
 8000b20:	2201      	movs	r2, #1
 8000b22:	2140      	movs	r1, #64	; 0x40
 8000b24:	480f      	ldr	r0, [pc, #60]	; (8000b64 <main+0x3d4>)
 8000b26:	f001 fd2d 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2120      	movs	r1, #32
 8000b2e:	480d      	ldr	r0, [pc, #52]	; (8000b64 <main+0x3d4>)
 8000b30:	f001 fd28 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, 0);		//ซ้ายบน
 8000b34:	2200      	movs	r2, #0
 8000b36:	2110      	movs	r1, #16
 8000b38:	480a      	ldr	r0, [pc, #40]	; (8000b64 <main+0x3d4>)
 8000b3a:	f001 fd23 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, 1);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2108      	movs	r1, #8
 8000b42:	4808      	ldr	r0, [pc, #32]	; (8000b64 <main+0x3d4>)
 8000b44:	f001 fd1e 	bl	8002584 <HAL_GPIO_WritePin>
			}
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8000b48:	2108      	movs	r1, #8
 8000b4a:	4807      	ldr	r0, [pc, #28]	; (8000b68 <main+0x3d8>)
 8000b4c:	f003 fab2 	bl	80040b4 <HAL_TIM_PWM_Stop>
	while (1) {
 8000b50:	e65c      	b.n	800080c <main+0x7c>
 8000b52:	bf00      	nop
 8000b54:	20000010 	.word	0x20000010
 8000b58:	200001c4 	.word	0x200001c4
 8000b5c:	40020800 	.word	0x40020800
 8000b60:	40021400 	.word	0x40021400
 8000b64:	40020c00 	.word	0x40020c00
 8000b68:	20000178 	.word	0x20000178

08000b6c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b094      	sub	sp, #80	; 0x50
 8000b70:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	2234      	movs	r2, #52	; 0x34
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f006 fc82 	bl	8007484 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000b90:	f001 ff82 	bl	8002a98 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000b94:	4b2c      	ldr	r3, [pc, #176]	; (8000c48 <SystemClock_Config+0xdc>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	4a2b      	ldr	r2, [pc, #172]	; (8000c48 <SystemClock_Config+0xdc>)
 8000b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba0:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <SystemClock_Config+0xdc>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bac:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <SystemClock_Config+0xe0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bb4:	4a25      	ldr	r2, [pc, #148]	; (8000c4c <SystemClock_Config+0xe0>)
 8000bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <SystemClock_Config+0xe0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bcc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bd0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bda:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000bdc:	2304      	movs	r3, #4
 8000bde:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000be0:	2360      	movs	r3, #96	; 0x60
 8000be2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000be8:	2304      	movs	r3, #4
 8000bea:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000bec:	2302      	movs	r3, #2
 8000bee:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 ffaf 	bl	8002b58 <HAL_RCC_OscConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x98>
		Error_Handler();
 8000c00:	f000 fd52 	bl	80016a8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000c04:	f001 ff58 	bl	8002ab8 <HAL_PWREx_EnableOverDrive>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0xa6>
		Error_Handler();
 8000c0e:	f000 fd4b 	bl	80016a8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c12:	230f      	movs	r3, #15
 8000c14:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c16:	2302      	movs	r3, #2
 8000c18:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c22:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	2103      	movs	r1, #3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f002 fa40 	bl	80030b4 <HAL_RCC_ClockConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0xd2>
		Error_Handler();
 8000c3a:	f000 fd35 	bl	80016a8 <Error_Handler>
	}
}
 8000c3e:	bf00      	nop
 8000c40:	3750      	adds	r7, #80	; 0x50
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40007000 	.word	0x40007000

08000c50 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_I2C1_Init+0x74>)
 8000c56:	4a1c      	ldr	r2, [pc, #112]	; (8000cc8 <MX_I2C1_Init+0x78>)
 8000c58:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20303E5D;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_I2C1_Init+0x74>)
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <MX_I2C1_Init+0x7c>)
 8000c5e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_I2C1_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_I2C1_Init+0x74>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_I2C1_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_I2C1_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <MX_I2C1_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_I2C1_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <MX_I2C1_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000c8a:	480e      	ldr	r0, [pc, #56]	; (8000cc4 <MX_I2C1_Init+0x74>)
 8000c8c:	f001 fc94 	bl	80025b8 <HAL_I2C_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000c96:	f000 fd07 	bl	80016a8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <MX_I2C1_Init+0x74>)
 8000c9e:	f001 fd1b 	bl	80026d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000ca8:	f000 fcfe 	bl	80016a8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000cac:	2100      	movs	r1, #0
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_I2C1_Init+0x74>)
 8000cb0:	f001 fd5d 	bl	800276e <HAL_I2CEx_ConfigDigitalFilter>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000cba:	f000 fcf5 	bl	80016a8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2000008c 	.word	0x2000008c
 8000cc8:	40005400 	.word	0x40005400
 8000ccc:	20303e5d 	.word	0x20303e5d

08000cd0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000cee:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <MX_TIM1_Init+0xac>)
 8000cf0:	4a23      	ldr	r2, [pc, #140]	; (8000d80 <MX_TIM1_Init+0xb0>)
 8000cf2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 96 - 1;
 8000cf4:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <MX_TIM1_Init+0xac>)
 8000cf6:	225f      	movs	r2, #95	; 0x5f
 8000cf8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <MX_TIM1_Init+0xac>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535 - 1;
 8000d00:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <MX_TIM1_Init+0xac>)
 8000d02:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d06:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_TIM1_Init+0xac>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <MX_TIM1_Init+0xac>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d14:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <MX_TIM1_Init+0xac>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 8000d1a:	4818      	ldr	r0, [pc, #96]	; (8000d7c <MX_TIM1_Init+0xac>)
 8000d1c:	f003 fa4a 	bl	80041b4 <HAL_TIM_IC_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM1_Init+0x5a>
		Error_Handler();
 8000d26:	f000 fcbf 	bl	80016a8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	480f      	ldr	r0, [pc, #60]	; (8000d7c <MX_TIM1_Init+0xac>)
 8000d3e:	f004 fccf 	bl	80056e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM1_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000d48:	f000 fcae 	bl	80016a8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d50:	2301      	movs	r3, #1
 8000d52:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_TIM1_Init+0xac>)
 8000d64:	f003 fced 	bl	8004742 <HAL_TIM_IC_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM1_Init+0xa2>
		Error_Handler();
 8000d6e:	f000 fc9b 	bl	80016a8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3720      	adds	r7, #32
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000e0 	.word	0x200000e0
 8000d80:	40010000 	.word	0x40010000

08000d84 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08e      	sub	sp, #56	; 0x38
 8000d88:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000da4:	463b      	mov	r3, r7
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]
 8000db2:	615a      	str	r2, [r3, #20]
 8000db4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000db6:	4b3e      	ldr	r3, [pc, #248]	; (8000eb0 <MX_TIM2_Init+0x12c>)
 8000db8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dbc:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 84 - 1;
 8000dbe:	4b3c      	ldr	r3, [pc, #240]	; (8000eb0 <MX_TIM2_Init+0x12c>)
 8000dc0:	2253      	movs	r2, #83	; 0x53
 8000dc2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b3a      	ldr	r3, [pc, #232]	; (8000eb0 <MX_TIM2_Init+0x12c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8000dca:	4b39      	ldr	r3, [pc, #228]	; (8000eb0 <MX_TIM2_Init+0x12c>)
 8000dcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dd0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd2:	4b37      	ldr	r3, [pc, #220]	; (8000eb0 <MX_TIM2_Init+0x12c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd8:	4b35      	ldr	r3, [pc, #212]	; (8000eb0 <MX_TIM2_Init+0x12c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000dde:	4834      	ldr	r0, [pc, #208]	; (8000eb0 <MX_TIM2_Init+0x12c>)
 8000de0:	f002 ffb6 	bl	8003d50 <HAL_TIM_Base_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM2_Init+0x6a>
		Error_Handler();
 8000dea:	f000 fc5d 	bl	80016a8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000df4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	482d      	ldr	r0, [pc, #180]	; (8000eb0 <MX_TIM2_Init+0x12c>)
 8000dfc:	f003 fe52 	bl	8004aa4 <HAL_TIM_ConfigClockSource>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM2_Init+0x86>
		Error_Handler();
 8000e06:	f000 fc4f 	bl	80016a8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000e0a:	4829      	ldr	r0, [pc, #164]	; (8000eb0 <MX_TIM2_Init+0x12c>)
 8000e0c:	f002 fff7 	bl	8003dfe <HAL_TIM_PWM_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM2_Init+0x96>
		Error_Handler();
 8000e16:	f000 fc47 	bl	80016a8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	4821      	ldr	r0, [pc, #132]	; (8000eb0 <MX_TIM2_Init+0x12c>)
 8000e2a:	f004 fc59 	bl	80056e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8000e34:	f000 fc38 	bl	80016a8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e38:	2360      	movs	r3, #96	; 0x60
 8000e3a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000e48:	463b      	mov	r3, r7
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <MX_TIM2_Init+0x12c>)
 8000e50:	f003 fd14 	bl	800487c <HAL_TIM_PWM_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8000e5a:	f000 fc25 	bl	80016a8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	2204      	movs	r2, #4
 8000e62:	4619      	mov	r1, r3
 8000e64:	4812      	ldr	r0, [pc, #72]	; (8000eb0 <MX_TIM2_Init+0x12c>)
 8000e66:	f003 fd09 	bl	800487c <HAL_TIM_PWM_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM2_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 8000e70:	f000 fc1a 	bl	80016a8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8000e74:	463b      	mov	r3, r7
 8000e76:	2208      	movs	r2, #8
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <MX_TIM2_Init+0x12c>)
 8000e7c:	f003 fcfe 	bl	800487c <HAL_TIM_PWM_ConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM2_Init+0x106>
			!= HAL_OK) {
		Error_Handler();
 8000e86:	f000 fc0f 	bl	80016a8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	220c      	movs	r2, #12
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <MX_TIM2_Init+0x12c>)
 8000e92:	f003 fcf3 	bl	800487c <HAL_TIM_PWM_ConfigChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM2_Init+0x11c>
			!= HAL_OK) {
		Error_Handler();
 8000e9c:	f000 fc04 	bl	80016a8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000ea0:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <MX_TIM2_Init+0x12c>)
 8000ea2:	f000 fd09 	bl	80018b8 <HAL_TIM_MspPostInit>

}
 8000ea6:	bf00      	nop
 8000ea8:	3738      	adds	r7, #56	; 0x38
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000012c 	.word	0x2000012c

08000eb4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08e      	sub	sp, #56	; 0x38
 8000eb8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000eba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]
 8000ee2:	615a      	str	r2, [r3, #20]
 8000ee4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000ee6:	4b38      	ldr	r3, [pc, #224]	; (8000fc8 <MX_TIM3_Init+0x114>)
 8000ee8:	4a38      	ldr	r2, [pc, #224]	; (8000fcc <MX_TIM3_Init+0x118>)
 8000eea:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 96 - 1;
 8000eec:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <MX_TIM3_Init+0x114>)
 8000eee:	225f      	movs	r2, #95	; 0x5f
 8000ef0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef2:	4b35      	ldr	r3, [pc, #212]	; (8000fc8 <MX_TIM3_Init+0x114>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 8000ef8:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <MX_TIM3_Init+0x114>)
 8000efa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000efe:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f00:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <MX_TIM3_Init+0x114>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f06:	4b30      	ldr	r3, [pc, #192]	; (8000fc8 <MX_TIM3_Init+0x114>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000f0c:	482e      	ldr	r0, [pc, #184]	; (8000fc8 <MX_TIM3_Init+0x114>)
 8000f0e:	f002 ff1f 	bl	8003d50 <HAL_TIM_Base_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM3_Init+0x68>
		Error_Handler();
 8000f18:	f000 fbc6 	bl	80016a8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f26:	4619      	mov	r1, r3
 8000f28:	4827      	ldr	r0, [pc, #156]	; (8000fc8 <MX_TIM3_Init+0x114>)
 8000f2a:	f003 fdbb 	bl	8004aa4 <HAL_TIM_ConfigClockSource>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM3_Init+0x84>
		Error_Handler();
 8000f34:	f000 fbb8 	bl	80016a8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000f38:	4823      	ldr	r0, [pc, #140]	; (8000fc8 <MX_TIM3_Init+0x114>)
 8000f3a:	f002 ff60 	bl	8003dfe <HAL_TIM_PWM_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM3_Init+0x94>
		Error_Handler();
 8000f44:	f000 fbb0 	bl	80016a8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	481c      	ldr	r0, [pc, #112]	; (8000fc8 <MX_TIM3_Init+0x114>)
 8000f58:	f004 fbc2 	bl	80056e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8000f62:	f000 fba1 	bl	80016a8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f66:	2360      	movs	r3, #96	; 0x60
 8000f68:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000f76:	463b      	mov	r3, r7
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4812      	ldr	r0, [pc, #72]	; (8000fc8 <MX_TIM3_Init+0x114>)
 8000f7e:	f003 fc7d 	bl	800487c <HAL_TIM_PWM_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8000f88:	f000 fb8e 	bl	80016a8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	2204      	movs	r2, #4
 8000f90:	4619      	mov	r1, r3
 8000f92:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <MX_TIM3_Init+0x114>)
 8000f94:	f003 fc72 	bl	800487c <HAL_TIM_PWM_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM3_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8000f9e:	f000 fb83 	bl	80016a8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <MX_TIM3_Init+0x114>)
 8000faa:	f003 fc67 	bl	800487c <HAL_TIM_PWM_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM3_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 8000fb4:	f000 fb78 	bl	80016a8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <MX_TIM3_Init+0x114>)
 8000fba:	f000 fc7d 	bl	80018b8 <HAL_TIM_MspPostInit>

}
 8000fbe:	bf00      	nop
 8000fc0:	3738      	adds	r7, #56	; 0x38
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000178 	.word	0x20000178
 8000fcc:	40000400 	.word	0x40000400

08000fd0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8000fd6:	4a15      	ldr	r2, [pc, #84]	; (800102c <MX_USART1_UART_Init+0x5c>)
 8000fd8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8000fdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_USART1_UART_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8001014:	f004 fc10 	bl	8005838 <HAL_UART_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 800101e:	f000 fb43 	bl	80016a8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200001c4 	.word	0x200001c4
 800102c:	40011000 	.word	0x40011000

08001030 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_USART3_UART_Init+0x58>)
 8001036:	4a15      	ldr	r2, [pc, #84]	; (800108c <MX_USART3_UART_Init+0x5c>)
 8001038:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_USART3_UART_Init+0x58>)
 800103c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001040:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_USART3_UART_Init+0x58>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_USART3_UART_Init+0x58>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_USART3_UART_Init+0x58>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_USART3_UART_Init+0x58>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_USART3_UART_Init+0x58>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_USART3_UART_Init+0x58>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_USART3_UART_Init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_USART3_UART_Init+0x58>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_USART3_UART_Init+0x58>)
 8001074:	f004 fbe0 	bl	8005838 <HAL_UART_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 800107e:	f000 fb13 	bl	80016a8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2000024c 	.word	0x2000024c
 800108c:	40004800 	.word	0x40004800

08001090 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001096:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800109a:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800109e:	2206      	movs	r2, #6
 80010a0:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010a4:	2202      	movs	r2, #2
 80010a6:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010b0:	2202      	movs	r2, #2
 80010b2:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010d4:	f001 fb97 	bl	8002806 <HAL_PCD_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 80010de:	f000 fae3 	bl	80016a8 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200002d4 	.word	0x200002d4

080010ec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08e      	sub	sp, #56	; 0x38
 80010f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	4b9b      	ldr	r3, [pc, #620]	; (8001370 <MX_GPIO_Init+0x284>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a9a      	ldr	r2, [pc, #616]	; (8001370 <MX_GPIO_Init+0x284>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b98      	ldr	r3, [pc, #608]	; (8001370 <MX_GPIO_Init+0x284>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	623b      	str	r3, [r7, #32]
 8001118:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800111a:	4b95      	ldr	r3, [pc, #596]	; (8001370 <MX_GPIO_Init+0x284>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a94      	ldr	r2, [pc, #592]	; (8001370 <MX_GPIO_Init+0x284>)
 8001120:	f043 0320 	orr.w	r3, r3, #32
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b92      	ldr	r3, [pc, #584]	; (8001370 <MX_GPIO_Init+0x284>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0320 	and.w	r3, r3, #32
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001132:	4b8f      	ldr	r3, [pc, #572]	; (8001370 <MX_GPIO_Init+0x284>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a8e      	ldr	r2, [pc, #568]	; (8001370 <MX_GPIO_Init+0x284>)
 8001138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b8c      	ldr	r3, [pc, #560]	; (8001370 <MX_GPIO_Init+0x284>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	4b89      	ldr	r3, [pc, #548]	; (8001370 <MX_GPIO_Init+0x284>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a88      	ldr	r2, [pc, #544]	; (8001370 <MX_GPIO_Init+0x284>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b86      	ldr	r3, [pc, #536]	; (8001370 <MX_GPIO_Init+0x284>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	4b83      	ldr	r3, [pc, #524]	; (8001370 <MX_GPIO_Init+0x284>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a82      	ldr	r2, [pc, #520]	; (8001370 <MX_GPIO_Init+0x284>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b80      	ldr	r3, [pc, #512]	; (8001370 <MX_GPIO_Init+0x284>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800117a:	4b7d      	ldr	r3, [pc, #500]	; (8001370 <MX_GPIO_Init+0x284>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a7c      	ldr	r2, [pc, #496]	; (8001370 <MX_GPIO_Init+0x284>)
 8001180:	f043 0310 	orr.w	r3, r3, #16
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b7a      	ldr	r3, [pc, #488]	; (8001370 <MX_GPIO_Init+0x284>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0310 	and.w	r3, r3, #16
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001192:	4b77      	ldr	r3, [pc, #476]	; (8001370 <MX_GPIO_Init+0x284>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a76      	ldr	r2, [pc, #472]	; (8001370 <MX_GPIO_Init+0x284>)
 8001198:	f043 0308 	orr.w	r3, r3, #8
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b74      	ldr	r3, [pc, #464]	; (8001370 <MX_GPIO_Init+0x284>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80011aa:	4b71      	ldr	r3, [pc, #452]	; (8001370 <MX_GPIO_Init+0x284>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a70      	ldr	r2, [pc, #448]	; (8001370 <MX_GPIO_Init+0x284>)
 80011b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b6e      	ldr	r3, [pc, #440]	; (8001370 <MX_GPIO_Init+0x284>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, IN3_1_Pin | IN4_1_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2128      	movs	r1, #40	; 0x28
 80011c6:	486b      	ldr	r0, [pc, #428]	; (8001374 <MX_GPIO_Init+0x288>)
 80011c8:	f001 f9dc 	bl	8002584 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, IN1_1_Pin | IN2_1_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2109      	movs	r1, #9
 80011d0:	4869      	ldr	r0, [pc, #420]	; (8001378 <MX_GPIO_Init+0x28c>)
 80011d2:	f001 f9d7 	bl	8002584 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f244 0181 	movw	r1, #16513	; 0x4081
 80011dc:	4867      	ldr	r0, [pc, #412]	; (800137c <MX_GPIO_Init+0x290>)
 80011de:	f001 f9d1 	bl	8002584 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e8:	4865      	ldr	r0, [pc, #404]	; (8001380 <MX_GPIO_Init+0x294>)
 80011ea:	f001 f9cb 	bl	8002584 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80011ee:	2200      	movs	r2, #0
 80011f0:	2140      	movs	r1, #64	; 0x40
 80011f2:	4864      	ldr	r0, [pc, #400]	; (8001384 <MX_GPIO_Init+0x298>)
 80011f4:	f001 f9c6 	bl	8002584 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, IN4_2_Pin | IN3_2_Pin | IN2_2_Pin | IN1_2_Pin,
 80011f8:	2200      	movs	r2, #0
 80011fa:	2178      	movs	r1, #120	; 0x78
 80011fc:	4862      	ldr	r0, [pc, #392]	; (8001388 <MX_GPIO_Init+0x29c>)
 80011fe:	f001 f9c1 	bl	8002584 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001208:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001216:	4619      	mov	r1, r3
 8001218:	4857      	ldr	r0, [pc, #348]	; (8001378 <MX_GPIO_Init+0x28c>)
 800121a:	f001 f807 	bl	800222c <HAL_GPIO_Init>

	/*Configure GPIO pins : IN3_1_Pin IN4_1_Pin */
	GPIO_InitStruct.Pin = IN3_1_Pin | IN4_1_Pin;
 800121e:	2328      	movs	r3, #40	; 0x28
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800122e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001232:	4619      	mov	r1, r3
 8001234:	484f      	ldr	r0, [pc, #316]	; (8001374 <MX_GPIO_Init+0x288>)
 8001236:	f000 fff9 	bl	800222c <HAL_GPIO_Init>

	/*Configure GPIO pins : IN1_1_Pin IN2_1_Pin */
	GPIO_InitStruct.Pin = IN1_1_Pin | IN2_1_Pin;
 800123a:	2309      	movs	r3, #9
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	4619      	mov	r1, r3
 8001250:	4849      	ldr	r0, [pc, #292]	; (8001378 <MX_GPIO_Init+0x28c>)
 8001252:	f000 ffeb 	bl	800222c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8001256:	2332      	movs	r3, #50	; 0x32
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001266:	230b      	movs	r3, #11
 8001268:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126e:	4619      	mov	r1, r3
 8001270:	4841      	ldr	r0, [pc, #260]	; (8001378 <MX_GPIO_Init+0x28c>)
 8001272:	f000 ffdb 	bl	800222c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin;
 8001276:	2306      	movs	r3, #6
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001286:	230b      	movs	r3, #11
 8001288:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128e:	4619      	mov	r1, r3
 8001290:	483e      	ldr	r0, [pc, #248]	; (800138c <MX_GPIO_Init+0x2a0>)
 8001292:	f000 ffcb 	bl	800222c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8001296:	f244 0381 	movw	r3, #16513	; 0x4081
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ac:	4619      	mov	r1, r3
 80012ae:	4833      	ldr	r0, [pc, #204]	; (800137c <MX_GPIO_Init+0x290>)
 80012b0:	f000 ffbc 	bl	800222c <HAL_GPIO_Init>

	/*Configure GPIO pin : PE8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ca:	4619      	mov	r1, r3
 80012cc:	482c      	ldr	r0, [pc, #176]	; (8001380 <MX_GPIO_Init+0x294>)
 80012ce:	f000 ffad 	bl	800222c <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e4:	230b      	movs	r3, #11
 80012e6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ec:	4619      	mov	r1, r3
 80012ee:	4823      	ldr	r0, [pc, #140]	; (800137c <MX_GPIO_Init+0x290>)
 80012f0:	f000 ff9c 	bl	800222c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012f4:	2340      	movs	r3, #64	; 0x40
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	4619      	mov	r1, r3
 800130a:	481e      	ldr	r0, [pc, #120]	; (8001384 <MX_GPIO_Init+0x298>)
 800130c:	f000 ff8e 	bl	800222c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001320:	4619      	mov	r1, r3
 8001322:	4818      	ldr	r0, [pc, #96]	; (8001384 <MX_GPIO_Init+0x298>)
 8001324:	f000 ff82 	bl	800222c <HAL_GPIO_Init>

	/*Configure GPIO pins : IN4_2_Pin IN3_2_Pin IN2_2_Pin IN1_2_Pin */
	GPIO_InitStruct.Pin = IN4_2_Pin | IN3_2_Pin | IN2_2_Pin | IN1_2_Pin;
 8001328:	2378      	movs	r3, #120	; 0x78
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133c:	4619      	mov	r1, r3
 800133e:	4812      	ldr	r0, [pc, #72]	; (8001388 <MX_GPIO_Init+0x29c>)
 8001340:	f000 ff74 	bl	800222c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8001344:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001356:	230b      	movs	r3, #11
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	4619      	mov	r1, r3
 8001360:	4808      	ldr	r0, [pc, #32]	; (8001384 <MX_GPIO_Init+0x298>)
 8001362:	f000 ff63 	bl	800222c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001366:	bf00      	nop
 8001368:	3738      	adds	r7, #56	; 0x38
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40021400 	.word	0x40021400
 8001378:	40020800 	.word	0x40020800
 800137c:	40020400 	.word	0x40020400
 8001380:	40021000 	.word	0x40021000
 8001384:	40021800 	.word	0x40021800
 8001388:	40020c00 	.word	0x40020c00
 800138c:	40020000 	.word	0x40020000

08001390 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b090      	sub	sp, #64	; 0x40
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);

	if (huart->Instance == huart1.Instance) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b9c      	ldr	r3, [pc, #624]	; (8001610 <HAL_UART_RxCpltCallback+0x280>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	f040 8131 	bne.w	8001608 <HAL_UART_RxCpltCallback+0x278>
		ena_1 = 1.0;
 80013a6:	4b9b      	ldr	r3, [pc, #620]	; (8001614 <HAL_UART_RxCpltCallback+0x284>)
 80013a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013ac:	601a      	str	r2, [r3, #0]
		enb_1 = 1.0;
 80013ae:	4b9a      	ldr	r3, [pc, #616]	; (8001618 <HAL_UART_RxCpltCallback+0x288>)
 80013b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013b4:	601a      	str	r2, [r3, #0]
		ena_2 = 1.0;
 80013b6:	4b99      	ldr	r3, [pc, #612]	; (800161c <HAL_UART_RxCpltCallback+0x28c>)
 80013b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013bc:	601a      	str	r2, [r3, #0]
		enb_2 = 1.0;
 80013be:	4b98      	ldr	r3, [pc, #608]	; (8001620 <HAL_UART_RxCpltCallback+0x290>)
 80013c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013c4:	601a      	str	r2, [r3, #0]
		if (mode == 0) {
 80013c6:	4b97      	ldr	r3, [pc, #604]	; (8001624 <HAL_UART_RxCpltCallback+0x294>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f040 80fc 	bne.w	80015c8 <HAL_UART_RxCpltCallback+0x238>
			if (rxData == 'B') {
 80013d0:	4b95      	ldr	r3, [pc, #596]	; (8001628 <HAL_UART_RxCpltCallback+0x298>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b42      	cmp	r3, #66	; 0x42
 80013d6:	d128      	bne.n	800142a <HAL_UART_RxCpltCallback+0x9a>
				//
				HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2101      	movs	r1, #1
 80013dc:	4893      	ldr	r0, [pc, #588]	; (800162c <HAL_UART_RxCpltCallback+0x29c>)
 80013de:	f001 f8d1 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2108      	movs	r1, #8
 80013e6:	4891      	ldr	r0, [pc, #580]	; (800162c <HAL_UART_RxCpltCallback+0x29c>)
 80013e8:	f001 f8cc 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2108      	movs	r1, #8
 80013f0:	488f      	ldr	r0, [pc, #572]	; (8001630 <HAL_UART_RxCpltCallback+0x2a0>)
 80013f2:	f001 f8c7 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2120      	movs	r1, #32
 80013fa:	488d      	ldr	r0, [pc, #564]	; (8001630 <HAL_UART_RxCpltCallback+0x2a0>)
 80013fc:	f001 f8c2 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2140      	movs	r1, #64	; 0x40
 8001404:	488b      	ldr	r0, [pc, #556]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 8001406:	f001 f8bd 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2120      	movs	r1, #32
 800140e:	4889      	ldr	r0, [pc, #548]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 8001410:	f001 f8b8 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2110      	movs	r1, #16
 8001418:	4886      	ldr	r0, [pc, #536]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 800141a:	f001 f8b3 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2108      	movs	r1, #8
 8001422:	4884      	ldr	r0, [pc, #528]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 8001424:	f001 f8ae 	bl	8002584 <HAL_GPIO_WritePin>
 8001428:	e0d9      	b.n	80015de <HAL_UART_RxCpltCallback+0x24e>
			} else if (rxData == 'W') {
 800142a:	4b7f      	ldr	r3, [pc, #508]	; (8001628 <HAL_UART_RxCpltCallback+0x298>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b57      	cmp	r3, #87	; 0x57
 8001430:	d128      	bne.n	8001484 <HAL_UART_RxCpltCallback+0xf4>
				HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, 1);		//ขวาบน
 8001432:	2201      	movs	r2, #1
 8001434:	2101      	movs	r1, #1
 8001436:	487d      	ldr	r0, [pc, #500]	; (800162c <HAL_UART_RxCpltCallback+0x29c>)
 8001438:	f001 f8a4 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2108      	movs	r1, #8
 8001440:	487a      	ldr	r0, [pc, #488]	; (800162c <HAL_UART_RxCpltCallback+0x29c>)
 8001442:	f001 f89f 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2108      	movs	r1, #8
 800144a:	4879      	ldr	r0, [pc, #484]	; (8001630 <HAL_UART_RxCpltCallback+0x2a0>)
 800144c:	f001 f89a 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, 1);
 8001450:	2201      	movs	r2, #1
 8001452:	2120      	movs	r1, #32
 8001454:	4876      	ldr	r0, [pc, #472]	; (8001630 <HAL_UART_RxCpltCallback+0x2a0>)
 8001456:	f001 f895 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, 1);	//ซ้ายล่าง
 800145a:	2201      	movs	r2, #1
 800145c:	2140      	movs	r1, #64	; 0x40
 800145e:	4875      	ldr	r0, [pc, #468]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 8001460:	f001 f890 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, 0);
 8001464:	2200      	movs	r2, #0
 8001466:	2120      	movs	r1, #32
 8001468:	4872      	ldr	r0, [pc, #456]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 800146a:	f001 f88b 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, 0);		//ซ้ายบน
 800146e:	2200      	movs	r2, #0
 8001470:	2110      	movs	r1, #16
 8001472:	4870      	ldr	r0, [pc, #448]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 8001474:	f001 f886 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, 1);
 8001478:	2201      	movs	r2, #1
 800147a:	2108      	movs	r1, #8
 800147c:	486d      	ldr	r0, [pc, #436]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 800147e:	f001 f881 	bl	8002584 <HAL_GPIO_WritePin>
 8001482:	e0ac      	b.n	80015de <HAL_UART_RxCpltCallback+0x24e>
			} else if (rxData == 'S') {
 8001484:	4b68      	ldr	r3, [pc, #416]	; (8001628 <HAL_UART_RxCpltCallback+0x298>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b53      	cmp	r3, #83	; 0x53
 800148a:	d130      	bne.n	80014ee <HAL_UART_RxCpltCallback+0x15e>
				HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2101      	movs	r1, #1
 8001490:	4866      	ldr	r0, [pc, #408]	; (800162c <HAL_UART_RxCpltCallback+0x29c>)
 8001492:	f001 f877 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, 1);
 8001496:	2201      	movs	r2, #1
 8001498:	2108      	movs	r1, #8
 800149a:	4864      	ldr	r0, [pc, #400]	; (800162c <HAL_UART_RxCpltCallback+0x29c>)
 800149c:	f001 f872 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, 1);
 80014a0:	2201      	movs	r2, #1
 80014a2:	2108      	movs	r1, #8
 80014a4:	4862      	ldr	r0, [pc, #392]	; (8001630 <HAL_UART_RxCpltCallback+0x2a0>)
 80014a6:	f001 f86d 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2120      	movs	r1, #32
 80014ae:	4860      	ldr	r0, [pc, #384]	; (8001630 <HAL_UART_RxCpltCallback+0x2a0>)
 80014b0:	f001 f868 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2140      	movs	r1, #64	; 0x40
 80014b8:	485e      	ldr	r0, [pc, #376]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 80014ba:	f001 f863 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, 1);
 80014be:	2201      	movs	r2, #1
 80014c0:	2120      	movs	r1, #32
 80014c2:	485c      	ldr	r0, [pc, #368]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 80014c4:	f001 f85e 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, 1);
 80014c8:	2201      	movs	r2, #1
 80014ca:	2110      	movs	r1, #16
 80014cc:	4859      	ldr	r0, [pc, #356]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 80014ce:	f001 f859 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2108      	movs	r1, #8
 80014d6:	4857      	ldr	r0, [pc, #348]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 80014d8:	f001 f854 	bl	8002584 <HAL_GPIO_WritePin>
				ena_2 = 0.5;
 80014dc:	4b4f      	ldr	r3, [pc, #316]	; (800161c <HAL_UART_RxCpltCallback+0x28c>)
 80014de:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80014e2:	601a      	str	r2, [r3, #0]
				enb_2 = 0.5;
 80014e4:	4b4e      	ldr	r3, [pc, #312]	; (8001620 <HAL_UART_RxCpltCallback+0x290>)
 80014e6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	e077      	b.n	80015de <HAL_UART_RxCpltCallback+0x24e>
			} else if (rxData == 'A') {
 80014ee:	4b4e      	ldr	r3, [pc, #312]	; (8001628 <HAL_UART_RxCpltCallback+0x298>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b41      	cmp	r3, #65	; 0x41
 80014f4:	d130      	bne.n	8001558 <HAL_UART_RxCpltCallback+0x1c8>
				HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, 1);
 80014f6:	2201      	movs	r2, #1
 80014f8:	2101      	movs	r1, #1
 80014fa:	484c      	ldr	r0, [pc, #304]	; (800162c <HAL_UART_RxCpltCallback+0x29c>)
 80014fc:	f001 f842 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2108      	movs	r1, #8
 8001504:	4849      	ldr	r0, [pc, #292]	; (800162c <HAL_UART_RxCpltCallback+0x29c>)
 8001506:	f001 f83d 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2108      	movs	r1, #8
 800150e:	4848      	ldr	r0, [pc, #288]	; (8001630 <HAL_UART_RxCpltCallback+0x2a0>)
 8001510:	f001 f838 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, 1);
 8001514:	2201      	movs	r2, #1
 8001516:	2120      	movs	r1, #32
 8001518:	4845      	ldr	r0, [pc, #276]	; (8001630 <HAL_UART_RxCpltCallback+0x2a0>)
 800151a:	f001 f833 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2140      	movs	r1, #64	; 0x40
 8001522:	4844      	ldr	r0, [pc, #272]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 8001524:	f001 f82e 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, 1);
 8001528:	2201      	movs	r2, #1
 800152a:	2120      	movs	r1, #32
 800152c:	4841      	ldr	r0, [pc, #260]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 800152e:	f001 f829 	bl	8002584 <HAL_GPIO_WritePin>
				//
				ena_1 = 0.5;
 8001532:	4b38      	ldr	r3, [pc, #224]	; (8001614 <HAL_UART_RxCpltCallback+0x284>)
 8001534:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001538:	601a      	str	r2, [r3, #0]
				enb_1 = 0.5;
 800153a:	4b37      	ldr	r3, [pc, #220]	; (8001618 <HAL_UART_RxCpltCallback+0x288>)
 800153c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001540:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, 1);
 8001542:	2201      	movs	r2, #1
 8001544:	2110      	movs	r1, #16
 8001546:	483b      	ldr	r0, [pc, #236]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 8001548:	f001 f81c 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2108      	movs	r1, #8
 8001550:	4838      	ldr	r0, [pc, #224]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 8001552:	f001 f817 	bl	8002584 <HAL_GPIO_WritePin>
 8001556:	e042      	b.n	80015de <HAL_UART_RxCpltCallback+0x24e>
			} else if (rxData == 'D') {
 8001558:	4b33      	ldr	r3, [pc, #204]	; (8001628 <HAL_UART_RxCpltCallback+0x298>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b44      	cmp	r3, #68	; 0x44
 800155e:	d128      	bne.n	80015b2 <HAL_UART_RxCpltCallback+0x222>
				HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	2101      	movs	r1, #1
 8001564:	4831      	ldr	r0, [pc, #196]	; (800162c <HAL_UART_RxCpltCallback+0x29c>)
 8001566:	f001 f80d 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, 1);
 800156a:	2201      	movs	r2, #1
 800156c:	2108      	movs	r1, #8
 800156e:	482f      	ldr	r0, [pc, #188]	; (800162c <HAL_UART_RxCpltCallback+0x29c>)
 8001570:	f001 f808 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, 1);
 8001574:	2201      	movs	r2, #1
 8001576:	2108      	movs	r1, #8
 8001578:	482d      	ldr	r0, [pc, #180]	; (8001630 <HAL_UART_RxCpltCallback+0x2a0>)
 800157a:	f001 f803 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2120      	movs	r1, #32
 8001582:	482b      	ldr	r0, [pc, #172]	; (8001630 <HAL_UART_RxCpltCallback+0x2a0>)
 8001584:	f000 fffe 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, 1);
 8001588:	2201      	movs	r2, #1
 800158a:	2140      	movs	r1, #64	; 0x40
 800158c:	4829      	ldr	r0, [pc, #164]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 800158e:	f000 fff9 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2120      	movs	r1, #32
 8001596:	4827      	ldr	r0, [pc, #156]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 8001598:	f000 fff4 	bl	8002584 <HAL_GPIO_WritePin>
				//
				HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	2110      	movs	r1, #16
 80015a0:	4824      	ldr	r0, [pc, #144]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 80015a2:	f000 ffef 	bl	8002584 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, 1);
 80015a6:	2201      	movs	r2, #1
 80015a8:	2108      	movs	r1, #8
 80015aa:	4822      	ldr	r0, [pc, #136]	; (8001634 <HAL_UART_RxCpltCallback+0x2a4>)
 80015ac:	f000 ffea 	bl	8002584 <HAL_GPIO_WritePin>
 80015b0:	e015      	b.n	80015de <HAL_UART_RxCpltCallback+0x24e>
			} else if (rxData == 'M') {
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HAL_UART_RxCpltCallback+0x298>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b4d      	cmp	r3, #77	; 0x4d
 80015b8:	d111      	bne.n	80015de <HAL_UART_RxCpltCallback+0x24e>
				mode = 1;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <HAL_UART_RxCpltCallback+0x294>)
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
				rxData = 66;
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_UART_RxCpltCallback+0x298>)
 80015c2:	2242      	movs	r2, #66	; 0x42
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	e00a      	b.n	80015de <HAL_UART_RxCpltCallback+0x24e>
			}

		} else if (mode == 1) {
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_UART_RxCpltCallback+0x294>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d106      	bne.n	80015de <HAL_UART_RxCpltCallback+0x24e>
			if (rxData == 'N') {
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_UART_RxCpltCallback+0x298>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b4e      	cmp	r3, #78	; 0x4e
 80015d6:	d102      	bne.n	80015de <HAL_UART_RxCpltCallback+0x24e>
				mode = 0;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_UART_RxCpltCallback+0x294>)
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
			}
		}
		char temp[50];
		sprintf(temp, "%d", mode);
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_UART_RxCpltCallback+0x294>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	4913      	ldr	r1, [pc, #76]	; (8001638 <HAL_UART_RxCpltCallback+0x2a8>)
 80015ea:	4618      	mov	r0, r3
 80015ec:	f005 ff2a 	bl	8007444 <siprintf>
		HAL_UART_Transmit(&huart3, &rxData, 1, 1000);
 80015f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f4:	2201      	movs	r2, #1
 80015f6:	490c      	ldr	r1, [pc, #48]	; (8001628 <HAL_UART_RxCpltCallback+0x298>)
 80015f8:	4810      	ldr	r0, [pc, #64]	; (800163c <HAL_UART_RxCpltCallback+0x2ac>)
 80015fa:	f004 f96b 	bl	80058d4 <HAL_UART_Transmit>

		HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80015fe:	2201      	movs	r2, #1
 8001600:	4909      	ldr	r1, [pc, #36]	; (8001628 <HAL_UART_RxCpltCallback+0x298>)
 8001602:	4803      	ldr	r0, [pc, #12]	; (8001610 <HAL_UART_RxCpltCallback+0x280>)
 8001604:	f004 f9e9 	bl	80059da <HAL_UART_Receive_IT>

	}

}
 8001608:	bf00      	nop
 800160a:	3740      	adds	r7, #64	; 0x40
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200001c4 	.word	0x200001c4
 8001614:	20000000 	.word	0x20000000
 8001618:	20000004 	.word	0x20000004
 800161c:	20000008 	.word	0x20000008
 8001620:	2000000c 	.word	0x2000000c
 8001624:	200007dc 	.word	0x200007dc
 8001628:	200007dd 	.word	0x200007dd
 800162c:	40020800 	.word	0x40020800
 8001630:	40021400 	.word	0x40021400
 8001634:	40020c00 	.word	0x40020c00
 8001638:	08007dac 	.word	0x08007dac
 800163c:	2000024c 	.word	0x2000024c

08001640 <average>:
int average(int x) {
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	static int samples[16];
	static int i = 0;
	static int total = 0;
	total += x - samples[i];
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <average+0x5c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <average+0x60>)
 800164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	1ad2      	subs	r2, r2, r3
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <average+0x64>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <average+0x64>)
 800165e:	6013      	str	r3, [r2, #0]
	samples[i] = x;
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <average+0x5c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	490e      	ldr	r1, [pc, #56]	; (80016a0 <average+0x60>)
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	i = (i == 15 ? 0 : i + 1);
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <average+0x5c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d003      	beq.n	800167c <average+0x3c>
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <average+0x5c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	3301      	adds	r3, #1
 800167a:	e000      	b.n	800167e <average+0x3e>
 800167c:	2300      	movs	r3, #0
 800167e:	4a07      	ldr	r2, [pc, #28]	; (800169c <average+0x5c>)
 8001680:	6013      	str	r3, [r2, #0]
	return total / 16;
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <average+0x64>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	da00      	bge.n	800168c <average+0x4c>
 800168a:	330f      	adds	r3, #15
 800168c:	111b      	asrs	r3, r3, #4
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	200007f0 	.word	0x200007f0
 80016a0:	200007f4 	.word	0x200007f4
 80016a4:	20000834 	.word	0x20000834

080016a8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ac:	b672      	cpsid	i
}
 80016ae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016b0:	e7fe      	b.n	80016b0 <Error_Handler+0x8>
	...

080016b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_MspInit+0x44>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <HAL_MspInit+0x44>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_MspInit+0x44>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_MspInit+0x44>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <HAL_MspInit+0x44>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_MspInit+0x44>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b0ae      	sub	sp, #184	; 0xb8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	2290      	movs	r2, #144	; 0x90
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f005 feb1 	bl	8007484 <memset>
  if(hi2c->Instance==I2C1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a22      	ldr	r2, [pc, #136]	; (80017b0 <HAL_I2C_MspInit+0xb4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d13c      	bne.n	80017a6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800172c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001730:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001732:	2300      	movs	r3, #0
 8001734:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4618      	mov	r0, r3
 800173c:	f001 fee0 	bl	8003500 <HAL_RCCEx_PeriphCLKConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001746:	f7ff ffaf 	bl	80016a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <HAL_I2C_MspInit+0xb8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a19      	ldr	r2, [pc, #100]	; (80017b4 <HAL_I2C_MspInit+0xb8>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_I2C_MspInit+0xb8>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001762:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176a:	2312      	movs	r3, #18
 800176c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800177c:	2304      	movs	r3, #4
 800177e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001782:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001786:	4619      	mov	r1, r3
 8001788:	480b      	ldr	r0, [pc, #44]	; (80017b8 <HAL_I2C_MspInit+0xbc>)
 800178a:	f000 fd4f 	bl	800222c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_I2C_MspInit+0xb8>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_I2C_MspInit+0xb8>)
 8001794:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_I2C_MspInit+0xb8>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017a6:	bf00      	nop
 80017a8:	37b8      	adds	r7, #184	; 0xb8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40005400 	.word	0x40005400
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020400 	.word	0x40020400

080017bc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <HAL_TIM_IC_MspInit+0x8c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d130      	bne.n	8001840 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017de:	4b1b      	ldr	r3, [pc, #108]	; (800184c <HAL_TIM_IC_MspInit+0x90>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a1a      	ldr	r2, [pc, #104]	; (800184c <HAL_TIM_IC_MspInit+0x90>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_TIM_IC_MspInit+0x90>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_TIM_IC_MspInit+0x90>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a14      	ldr	r2, [pc, #80]	; (800184c <HAL_TIM_IC_MspInit+0x90>)
 80017fc:	f043 0310 	orr.w	r3, r3, #16
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_TIM_IC_MspInit+0x90>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0310 	and.w	r3, r3, #16
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800180e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001820:	2301      	movs	r3, #1
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4619      	mov	r1, r3
 800182a:	4809      	ldr	r0, [pc, #36]	; (8001850 <HAL_TIM_IC_MspInit+0x94>)
 800182c:	f000 fcfe 	bl	800222c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2100      	movs	r1, #0
 8001834:	201b      	movs	r0, #27
 8001836:	f000 fc30 	bl	800209a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800183a:	201b      	movs	r0, #27
 800183c:	f000 fc49 	bl	80020d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001840:	bf00      	nop
 8001842:	3728      	adds	r7, #40	; 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40010000 	.word	0x40010000
 800184c:	40023800 	.word	0x40023800
 8001850:	40021000 	.word	0x40021000

08001854 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001864:	d10c      	bne.n	8001880 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_TIM_Base_MspInit+0x5c>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a11      	ldr	r2, [pc, #68]	; (80018b0 <HAL_TIM_Base_MspInit+0x5c>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_TIM_Base_MspInit+0x5c>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800187e:	e010      	b.n	80018a2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <HAL_TIM_Base_MspInit+0x60>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d10b      	bne.n	80018a2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_TIM_Base_MspInit+0x5c>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <HAL_TIM_Base_MspInit+0x5c>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_TIM_Base_MspInit+0x5c>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
}
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40000400 	.word	0x40000400

080018b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	; 0x30
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 031c 	add.w	r3, r7, #28
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d8:	d139      	bne.n	800194e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	4b3e      	ldr	r3, [pc, #248]	; (80019d4 <HAL_TIM_MspPostInit+0x11c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a3d      	ldr	r2, [pc, #244]	; (80019d4 <HAL_TIM_MspPostInit+0x11c>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b3b      	ldr	r3, [pc, #236]	; (80019d4 <HAL_TIM_MspPostInit+0x11c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f2:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <HAL_TIM_MspPostInit+0x11c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a37      	ldr	r2, [pc, #220]	; (80019d4 <HAL_TIM_MspPostInit+0x11c>)
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b35      	ldr	r3, [pc, #212]	; (80019d4 <HAL_TIM_MspPostInit+0x11c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENB2_Pin|ENA1_Pin;
 800190a:	2328      	movs	r3, #40	; 0x28
 800190c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800191a:	2301      	movs	r3, #1
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4619      	mov	r1, r3
 8001924:	482c      	ldr	r0, [pc, #176]	; (80019d8 <HAL_TIM_MspPostInit+0x120>)
 8001926:	f000 fc81 	bl	800222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENA2_Pin|ENB1_Pin;
 800192a:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800192e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800193c:	2301      	movs	r3, #1
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	4619      	mov	r1, r3
 8001946:	4825      	ldr	r0, [pc, #148]	; (80019dc <HAL_TIM_MspPostInit+0x124>)
 8001948:	f000 fc70 	bl	800222c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800194c:	e03d      	b.n	80019ca <HAL_TIM_MspPostInit+0x112>
  else if(htim->Instance==TIM3)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a23      	ldr	r2, [pc, #140]	; (80019e0 <HAL_TIM_MspPostInit+0x128>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d138      	bne.n	80019ca <HAL_TIM_MspPostInit+0x112>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <HAL_TIM_MspPostInit+0x11c>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <HAL_TIM_MspPostInit+0x11c>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6313      	str	r3, [r2, #48]	; 0x30
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <HAL_TIM_MspPostInit+0x11c>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001970:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <HAL_TIM_MspPostInit+0x11c>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	4a17      	ldr	r2, [pc, #92]	; (80019d4 <HAL_TIM_MspPostInit+0x11c>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	6313      	str	r3, [r2, #48]	; 0x30
 800197c:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_TIM_MspPostInit+0x11c>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001988:	23c0      	movs	r3, #192	; 0xc0
 800198a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2300      	movs	r3, #0
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001998:	2302      	movs	r3, #2
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	480d      	ldr	r0, [pc, #52]	; (80019d8 <HAL_TIM_MspPostInit+0x120>)
 80019a4:	f000 fc42 	bl	800222c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019ba:	2302      	movs	r3, #2
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	4807      	ldr	r0, [pc, #28]	; (80019e4 <HAL_TIM_MspPostInit+0x12c>)
 80019c6:	f000 fc31 	bl	800222c <HAL_GPIO_Init>
}
 80019ca:	bf00      	nop
 80019cc:	3730      	adds	r7, #48	; 0x30
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40000400 	.word	0x40000400
 80019e4:	40020800 	.word	0x40020800

080019e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b0b0      	sub	sp, #192	; 0xc0
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	2290      	movs	r2, #144	; 0x90
 8001a06:	2100      	movs	r1, #0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f005 fd3b 	bl	8007484 <memset>
  if(huart->Instance==USART1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a55      	ldr	r2, [pc, #340]	; (8001b68 <HAL_UART_MspInit+0x180>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d159      	bne.n	8001acc <HAL_UART_MspInit+0xe4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a18:	2340      	movs	r3, #64	; 0x40
 8001a1a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	4618      	mov	r0, r3
 8001a26:	f001 fd6b 	bl	8003500 <HAL_RCCEx_PeriphCLKConfig>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a30:	f7ff fe3a 	bl	80016a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a34:	4b4d      	ldr	r3, [pc, #308]	; (8001b6c <HAL_UART_MspInit+0x184>)
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	4a4c      	ldr	r2, [pc, #304]	; (8001b6c <HAL_UART_MspInit+0x184>)
 8001a3a:	f043 0310 	orr.w	r3, r3, #16
 8001a3e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a40:	4b4a      	ldr	r3, [pc, #296]	; (8001b6c <HAL_UART_MspInit+0x184>)
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	f003 0310 	and.w	r3, r3, #16
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4c:	4b47      	ldr	r3, [pc, #284]	; (8001b6c <HAL_UART_MspInit+0x184>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	4a46      	ldr	r2, [pc, #280]	; (8001b6c <HAL_UART_MspInit+0x184>)
 8001a52:	f043 0302 	orr.w	r3, r3, #2
 8001a56:	6313      	str	r3, [r2, #48]	; 0x30
 8001a58:	4b44      	ldr	r3, [pc, #272]	; (8001b6c <HAL_UART_MspInit+0x184>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001a7e:	2304      	movs	r3, #4
 8001a80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4839      	ldr	r0, [pc, #228]	; (8001b70 <HAL_UART_MspInit+0x188>)
 8001a8c:	f000 fbce 	bl	800222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a90:	2340      	movs	r3, #64	; 0x40
 8001a92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aa8:	2307      	movs	r3, #7
 8001aaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	482e      	ldr	r0, [pc, #184]	; (8001b70 <HAL_UART_MspInit+0x188>)
 8001ab6:	f000 fbb9 	bl	800222c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	2025      	movs	r0, #37	; 0x25
 8001ac0:	f000 faeb 	bl	800209a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ac4:	2025      	movs	r0, #37	; 0x25
 8001ac6:	f000 fb04 	bl	80020d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001aca:	e049      	b.n	8001b60 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART3)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a28      	ldr	r2, [pc, #160]	; (8001b74 <HAL_UART_MspInit+0x18c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d144      	bne.n	8001b60 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ada:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f001 fd0b 	bl	8003500 <HAL_RCCEx_PeriphCLKConfig>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_UART_MspInit+0x10c>
      Error_Handler();
 8001af0:	f7ff fdda 	bl	80016a8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001af4:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <HAL_UART_MspInit+0x184>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	4a1c      	ldr	r2, [pc, #112]	; (8001b6c <HAL_UART_MspInit+0x184>)
 8001afa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afe:	6413      	str	r3, [r2, #64]	; 0x40
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <HAL_UART_MspInit+0x184>)
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0c:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <HAL_UART_MspInit+0x184>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	4a16      	ldr	r2, [pc, #88]	; (8001b6c <HAL_UART_MspInit+0x184>)
 8001b12:	f043 0308 	orr.w	r3, r3, #8
 8001b16:	6313      	str	r3, [r2, #48]	; 0x30
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_UART_MspInit+0x184>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b3e:	2307      	movs	r3, #7
 8001b40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b44:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b48:	4619      	mov	r1, r3
 8001b4a:	480b      	ldr	r0, [pc, #44]	; (8001b78 <HAL_UART_MspInit+0x190>)
 8001b4c:	f000 fb6e 	bl	800222c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2100      	movs	r1, #0
 8001b54:	2027      	movs	r0, #39	; 0x27
 8001b56:	f000 faa0 	bl	800209a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b5a:	2027      	movs	r0, #39	; 0x27
 8001b5c:	f000 fab9 	bl	80020d2 <HAL_NVIC_EnableIRQ>
}
 8001b60:	bf00      	nop
 8001b62:	37c0      	adds	r7, #192	; 0xc0
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40011000 	.word	0x40011000
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020400 	.word	0x40020400
 8001b74:	40004800 	.word	0x40004800
 8001b78:	40020c00 	.word	0x40020c00

08001b7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b0ae      	sub	sp, #184	; 0xb8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	2290      	movs	r2, #144	; 0x90
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f005 fc71 	bl	8007484 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001baa:	d159      	bne.n	8001c60 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001bac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bb0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f001 fc9f 	bl	8003500 <HAL_RCCEx_PeriphCLKConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001bc8:	f7ff fd6e 	bl	80016a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bcc:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_PCD_MspInit+0xec>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	4a25      	ldr	r2, [pc, #148]	; (8001c68 <HAL_PCD_MspInit+0xec>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd8:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <HAL_PCD_MspInit+0xec>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001be4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001be8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001bfe:	230a      	movs	r3, #10
 8001c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4818      	ldr	r0, [pc, #96]	; (8001c6c <HAL_PCD_MspInit+0xf0>)
 8001c0c:	f000 fb0e 	bl	800222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4810      	ldr	r0, [pc, #64]	; (8001c6c <HAL_PCD_MspInit+0xf0>)
 8001c2c:	f000 fafe 	bl	800222c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_PCD_MspInit+0xec>)
 8001c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <HAL_PCD_MspInit+0xec>)
 8001c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c3a:	6353      	str	r3, [r2, #52]	; 0x34
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_PCD_MspInit+0xec>)
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <HAL_PCD_MspInit+0xec>)
 8001c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <HAL_PCD_MspInit+0xec>)
 8001c4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c52:	6453      	str	r3, [r2, #68]	; 0x44
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <HAL_PCD_MspInit+0xec>)
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c60:	bf00      	nop
 8001c62:	37b8      	adds	r7, #184	; 0xb8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020000 	.word	0x40020000

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <NMI_Handler+0x4>

08001c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <HardFault_Handler+0x4>

08001c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <MemManage_Handler+0x4>

08001c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <BusFault_Handler+0x4>

08001c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <UsageFault_Handler+0x4>

08001c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cbc:	f000 f8ce 	bl	8001e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cc8:	4802      	ldr	r0, [pc, #8]	; (8001cd4 <TIM1_CC_IRQHandler+0x10>)
 8001cca:	f002 fc1b 	bl	8004504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200000e0 	.word	0x200000e0

08001cd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <USART1_IRQHandler+0x10>)
 8001cde:	f003 fec1 	bl	8005a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200001c4 	.word	0x200001c4

08001cec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <USART3_IRQHandler+0x10>)
 8001cf2:	f003 feb7 	bl	8005a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	2000024c 	.word	0x2000024c

08001d00 <_sbrk>:
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <_sbrk+0x5c>)
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <_sbrk+0x60>)
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <_sbrk+0x22>
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <_sbrk+0x64>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <_sbrk+0x68>)
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d207      	bcs.n	8001d40 <_sbrk+0x40>
 8001d30:	f005 fbb0 	bl	8007494 <__errno>
 8001d34:	4603      	mov	r3, r0
 8001d36:	220c      	movs	r2, #12
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3e:	e009      	b.n	8001d54 <_sbrk+0x54>
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <_sbrk+0x64>)
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20080000 	.word	0x20080000
 8001d60:	00000400 	.word	0x00000400
 8001d64:	20000838 	.word	0x20000838
 8001d68:	20000988 	.word	0x20000988

08001d6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <SystemInit+0x20>)
 8001d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d76:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <SystemInit+0x20>)
 8001d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <Reset_Handler>:
 8001d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc8 <LoopFillZerobss+0x12>
 8001d94:	480d      	ldr	r0, [pc, #52]	; (8001dcc <LoopFillZerobss+0x16>)
 8001d96:	490e      	ldr	r1, [pc, #56]	; (8001dd0 <LoopFillZerobss+0x1a>)
 8001d98:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <LoopFillZerobss+0x1e>)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e002      	b.n	8001da4 <LoopCopyDataInit>

08001d9e <CopyDataInit>:
 8001d9e:	58d4      	ldr	r4, [r2, r3]
 8001da0:	50c4      	str	r4, [r0, r3]
 8001da2:	3304      	adds	r3, #4

08001da4 <LoopCopyDataInit>:
 8001da4:	18c4      	adds	r4, r0, r3
 8001da6:	428c      	cmp	r4, r1
 8001da8:	d3f9      	bcc.n	8001d9e <CopyDataInit>
 8001daa:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <LoopFillZerobss+0x22>)
 8001dac:	4c0b      	ldr	r4, [pc, #44]	; (8001ddc <LoopFillZerobss+0x26>)
 8001dae:	2300      	movs	r3, #0
 8001db0:	e001      	b.n	8001db6 <LoopFillZerobss>

08001db2 <FillZerobss>:
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	3204      	adds	r2, #4

08001db6 <LoopFillZerobss>:
 8001db6:	42a2      	cmp	r2, r4
 8001db8:	d3fb      	bcc.n	8001db2 <FillZerobss>
 8001dba:	f7ff ffd7 	bl	8001d6c <SystemInit>
 8001dbe:	f005 fb6f 	bl	80074a0 <__libc_init_array>
 8001dc2:	f7fe fce5 	bl	8000790 <main>
 8001dc6:	4770      	bx	lr
 8001dc8:	20080000 	.word	0x20080000
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	20000070 	.word	0x20000070
 8001dd4:	08007e0c 	.word	0x08007e0c
 8001dd8:	20000070 	.word	0x20000070
 8001ddc:	20000988 	.word	0x20000988

08001de0 <ADC_IRQHandler>:
 8001de0:	e7fe      	b.n	8001de0 <ADC_IRQHandler>

08001de2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de6:	2003      	movs	r0, #3
 8001de8:	f000 f94c 	bl	8002084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dec:	2000      	movs	r0, #0
 8001dee:	f000 f805 	bl	8001dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df2:	f7ff fc5f 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_InitTick+0x54>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_InitTick+0x58>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f967 	bl	80020ee <HAL_SYSTICK_Config>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e00e      	b.n	8001e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b0f      	cmp	r3, #15
 8001e2e:	d80a      	bhi.n	8001e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e30:	2200      	movs	r2, #0
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295
 8001e38:	f000 f92f 	bl	800209a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e3c:	4a06      	ldr	r2, [pc, #24]	; (8001e58 <HAL_InitTick+0x5c>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	e000      	b.n	8001e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000014 	.word	0x20000014
 8001e54:	2000001c 	.word	0x2000001c
 8001e58:	20000018 	.word	0x20000018

08001e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_IncTick+0x20>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_IncTick+0x24>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <HAL_IncTick+0x24>)
 8001e6e:	6013      	str	r3, [r2, #0]
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	2000001c 	.word	0x2000001c
 8001e80:	2000083c 	.word	0x2000083c

08001e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return uwTick;
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <HAL_GetTick+0x14>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	2000083c 	.word	0x2000083c

08001e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea4:	f7ff ffee 	bl	8001e84 <HAL_GetTick>
 8001ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb4:	d005      	beq.n	8001ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_Delay+0x44>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ec2:	bf00      	nop
 8001ec4:	f7ff ffde 	bl	8001e84 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d8f7      	bhi.n	8001ec4 <HAL_Delay+0x28>
  {
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	2000001c 	.word	0x2000001c

08001ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <__NVIC_SetPriorityGrouping+0x40>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f00:	4013      	ands	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f12:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <__NVIC_SetPriorityGrouping+0x40>)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	60d3      	str	r3, [r2, #12]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00
 8001f28:	05fa0000 	.word	0x05fa0000

08001f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <__NVIC_GetPriorityGrouping+0x18>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f003 0307 	and.w	r3, r3, #7
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	db0b      	blt.n	8001f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	f003 021f 	and.w	r2, r3, #31
 8001f60:	4907      	ldr	r1, [pc, #28]	; (8001f80 <__NVIC_EnableIRQ+0x38>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2001      	movs	r0, #1
 8001f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000e100 	.word	0xe000e100

08001f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6039      	str	r1, [r7, #0]
 8001f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	db0a      	blt.n	8001fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <__NVIC_SetPriority+0x4c>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	0112      	lsls	r2, r2, #4
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fac:	e00a      	b.n	8001fc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <__NVIC_SetPriority+0x50>)
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	3b04      	subs	r3, #4
 8001fbc:	0112      	lsls	r2, r2, #4
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	761a      	strb	r2, [r3, #24]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000e100 	.word	0xe000e100
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f1c3 0307 	rsb	r3, r3, #7
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	bf28      	it	cs
 8001ff6:	2304      	movcs	r3, #4
 8001ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d902      	bls.n	8002008 <NVIC_EncodePriority+0x30>
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3b03      	subs	r3, #3
 8002006:	e000      	b.n	800200a <NVIC_EncodePriority+0x32>
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	f04f 32ff 	mov.w	r2, #4294967295
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43da      	mvns	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	401a      	ands	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002020:	f04f 31ff 	mov.w	r1, #4294967295
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	43d9      	mvns	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	4313      	orrs	r3, r2
         );
}
 8002032:	4618      	mov	r0, r3
 8002034:	3724      	adds	r7, #36	; 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002050:	d301      	bcc.n	8002056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002052:	2301      	movs	r3, #1
 8002054:	e00f      	b.n	8002076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <SysTick_Config+0x40>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800205e:	210f      	movs	r1, #15
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	f7ff ff8e 	bl	8001f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <SysTick_Config+0x40>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206e:	4b04      	ldr	r3, [pc, #16]	; (8002080 <SysTick_Config+0x40>)
 8002070:	2207      	movs	r2, #7
 8002072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	e000e010 	.word	0xe000e010

08002084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ff29 	bl	8001ee4 <__NVIC_SetPriorityGrouping>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ac:	f7ff ff3e 	bl	8001f2c <__NVIC_GetPriorityGrouping>
 80020b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	6978      	ldr	r0, [r7, #20]
 80020b8:	f7ff ff8e 	bl	8001fd8 <NVIC_EncodePriority>
 80020bc:	4602      	mov	r2, r0
 80020be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff5d 	bl	8001f84 <__NVIC_SetPriority>
}
 80020ca:	bf00      	nop
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	4603      	mov	r3, r0
 80020da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff31 	bl	8001f48 <__NVIC_EnableIRQ>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff ffa2 	bl	8002040 <SysTick_Config>
 80020fc:	4603      	mov	r3, r0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002114:	f7ff feb6 	bl	8001e84 <HAL_GetTick>
 8002118:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d008      	beq.n	8002138 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2280      	movs	r2, #128	; 0x80
 800212a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e052      	b.n	80021de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0216 	bic.w	r2, r2, #22
 8002146:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002156:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	2b00      	cmp	r3, #0
 800215e:	d103      	bne.n	8002168 <HAL_DMA_Abort+0x62>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002164:	2b00      	cmp	r3, #0
 8002166:	d007      	beq.n	8002178 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0208 	bic.w	r2, r2, #8
 8002176:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002188:	e013      	b.n	80021b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800218a:	f7ff fe7b 	bl	8001e84 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b05      	cmp	r3, #5
 8002196:	d90c      	bls.n	80021b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2220      	movs	r2, #32
 800219c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2203      	movs	r2, #3
 80021a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e015      	b.n	80021de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e4      	bne.n	800218a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c4:	223f      	movs	r2, #63	; 0x3f
 80021c6:	409a      	lsls	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d004      	beq.n	8002204 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2280      	movs	r2, #128	; 0x80
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e00c      	b.n	800221e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2205      	movs	r2, #5
 8002208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	; 0x24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002242:	2300      	movs	r3, #0
 8002244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	e175      	b.n	8002538 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800224c:	2201      	movs	r2, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	429a      	cmp	r2, r3
 8002266:	f040 8164 	bne.w	8002532 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b01      	cmp	r3, #1
 8002274:	d005      	beq.n	8002282 <HAL_GPIO_Init+0x56>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d130      	bne.n	80022e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b8:	2201      	movs	r2, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 0201 	and.w	r2, r3, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d017      	beq.n	8002320 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d123      	bne.n	8002374 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	08da      	lsrs	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3208      	adds	r2, #8
 8002334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	220f      	movs	r2, #15
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	08da      	lsrs	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3208      	adds	r2, #8
 800236e:	69b9      	ldr	r1, [r7, #24]
 8002370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0203 	and.w	r2, r3, #3
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80be 	beq.w	8002532 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b6:	4b66      	ldr	r3, [pc, #408]	; (8002550 <HAL_GPIO_Init+0x324>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	4a65      	ldr	r2, [pc, #404]	; (8002550 <HAL_GPIO_Init+0x324>)
 80023bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c0:	6453      	str	r3, [r2, #68]	; 0x44
 80023c2:	4b63      	ldr	r3, [pc, #396]	; (8002550 <HAL_GPIO_Init+0x324>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023ce:	4a61      	ldr	r2, [pc, #388]	; (8002554 <HAL_GPIO_Init+0x328>)
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	089b      	lsrs	r3, r3, #2
 80023d4:	3302      	adds	r3, #2
 80023d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	220f      	movs	r2, #15
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a58      	ldr	r2, [pc, #352]	; (8002558 <HAL_GPIO_Init+0x32c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d037      	beq.n	800246a <HAL_GPIO_Init+0x23e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a57      	ldr	r2, [pc, #348]	; (800255c <HAL_GPIO_Init+0x330>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d031      	beq.n	8002466 <HAL_GPIO_Init+0x23a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a56      	ldr	r2, [pc, #344]	; (8002560 <HAL_GPIO_Init+0x334>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d02b      	beq.n	8002462 <HAL_GPIO_Init+0x236>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a55      	ldr	r2, [pc, #340]	; (8002564 <HAL_GPIO_Init+0x338>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d025      	beq.n	800245e <HAL_GPIO_Init+0x232>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a54      	ldr	r2, [pc, #336]	; (8002568 <HAL_GPIO_Init+0x33c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d01f      	beq.n	800245a <HAL_GPIO_Init+0x22e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a53      	ldr	r2, [pc, #332]	; (800256c <HAL_GPIO_Init+0x340>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d019      	beq.n	8002456 <HAL_GPIO_Init+0x22a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a52      	ldr	r2, [pc, #328]	; (8002570 <HAL_GPIO_Init+0x344>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d013      	beq.n	8002452 <HAL_GPIO_Init+0x226>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a51      	ldr	r2, [pc, #324]	; (8002574 <HAL_GPIO_Init+0x348>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00d      	beq.n	800244e <HAL_GPIO_Init+0x222>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a50      	ldr	r2, [pc, #320]	; (8002578 <HAL_GPIO_Init+0x34c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d007      	beq.n	800244a <HAL_GPIO_Init+0x21e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4f      	ldr	r2, [pc, #316]	; (800257c <HAL_GPIO_Init+0x350>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d101      	bne.n	8002446 <HAL_GPIO_Init+0x21a>
 8002442:	2309      	movs	r3, #9
 8002444:	e012      	b.n	800246c <HAL_GPIO_Init+0x240>
 8002446:	230a      	movs	r3, #10
 8002448:	e010      	b.n	800246c <HAL_GPIO_Init+0x240>
 800244a:	2308      	movs	r3, #8
 800244c:	e00e      	b.n	800246c <HAL_GPIO_Init+0x240>
 800244e:	2307      	movs	r3, #7
 8002450:	e00c      	b.n	800246c <HAL_GPIO_Init+0x240>
 8002452:	2306      	movs	r3, #6
 8002454:	e00a      	b.n	800246c <HAL_GPIO_Init+0x240>
 8002456:	2305      	movs	r3, #5
 8002458:	e008      	b.n	800246c <HAL_GPIO_Init+0x240>
 800245a:	2304      	movs	r3, #4
 800245c:	e006      	b.n	800246c <HAL_GPIO_Init+0x240>
 800245e:	2303      	movs	r3, #3
 8002460:	e004      	b.n	800246c <HAL_GPIO_Init+0x240>
 8002462:	2302      	movs	r3, #2
 8002464:	e002      	b.n	800246c <HAL_GPIO_Init+0x240>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_GPIO_Init+0x240>
 800246a:	2300      	movs	r3, #0
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	f002 0203 	and.w	r2, r2, #3
 8002472:	0092      	lsls	r2, r2, #2
 8002474:	4093      	lsls	r3, r2
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800247c:	4935      	ldr	r1, [pc, #212]	; (8002554 <HAL_GPIO_Init+0x328>)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	3302      	adds	r3, #2
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248a:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <HAL_GPIO_Init+0x354>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ae:	4a34      	ldr	r2, [pc, #208]	; (8002580 <HAL_GPIO_Init+0x354>)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b4:	4b32      	ldr	r3, [pc, #200]	; (8002580 <HAL_GPIO_Init+0x354>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d8:	4a29      	ldr	r2, [pc, #164]	; (8002580 <HAL_GPIO_Init+0x354>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024de:	4b28      	ldr	r3, [pc, #160]	; (8002580 <HAL_GPIO_Init+0x354>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002502:	4a1f      	ldr	r2, [pc, #124]	; (8002580 <HAL_GPIO_Init+0x354>)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002508:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <HAL_GPIO_Init+0x354>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800252c:	4a14      	ldr	r2, [pc, #80]	; (8002580 <HAL_GPIO_Init+0x354>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3301      	adds	r3, #1
 8002536:	61fb      	str	r3, [r7, #28]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	2b0f      	cmp	r3, #15
 800253c:	f67f ae86 	bls.w	800224c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	40013800 	.word	0x40013800
 8002558:	40020000 	.word	0x40020000
 800255c:	40020400 	.word	0x40020400
 8002560:	40020800 	.word	0x40020800
 8002564:	40020c00 	.word	0x40020c00
 8002568:	40021000 	.word	0x40021000
 800256c:	40021400 	.word	0x40021400
 8002570:	40021800 	.word	0x40021800
 8002574:	40021c00 	.word	0x40021c00
 8002578:	40022000 	.word	0x40022000
 800257c:	40022400 	.word	0x40022400
 8002580:	40013c00 	.word	0x40013c00

08002584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
 8002590:	4613      	mov	r3, r2
 8002592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002594:	787b      	ldrb	r3, [r7, #1]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80025a0:	e003      	b.n	80025aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	041a      	lsls	r2, r3, #16
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	619a      	str	r2, [r3, #24]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e07f      	b.n	80026ca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff f88c 	bl	80016fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2224      	movs	r2, #36	; 0x24
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002608:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002618:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d107      	bne.n	8002632 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	e006      	b.n	8002640 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800263e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d104      	bne.n	8002652 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002650:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6859      	ldr	r1, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <HAL_I2C_Init+0x11c>)
 800265e:	430b      	orrs	r3, r1
 8002660:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002670:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69d9      	ldr	r1, [r3, #28]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1a      	ldr	r2, [r3, #32]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	02008000 	.word	0x02008000

080026d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	d138      	bne.n	8002760 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e032      	b.n	8002762 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2224      	movs	r2, #36	; 0x24
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800272a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6819      	ldr	r1, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	e000      	b.n	8002762 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002760:	2302      	movs	r3, #2
  }
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b20      	cmp	r3, #32
 8002782:	d139      	bne.n	80027f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800278e:	2302      	movs	r3, #2
 8002790:	e033      	b.n	80027fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2224      	movs	r2, #36	; 0x24
 800279e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0201 	bic.w	r2, r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	021b      	lsls	r3, r3, #8
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e000      	b.n	80027fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
  }
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002806:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002808:	b08f      	sub	sp, #60	; 0x3c
 800280a:	af0a      	add	r7, sp, #40	; 0x28
 800280c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e116      	b.n	8002a46 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff f9a2 	bl	8001b7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2203      	movs	r2, #3
 800283c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f004 fb58 	bl	8006f0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	687e      	ldr	r6, [r7, #4]
 8002864:	466d      	mov	r5, sp
 8002866:	f106 0410 	add.w	r4, r6, #16
 800286a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002872:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002876:	e885 0003 	stmia.w	r5, {r0, r1}
 800287a:	1d33      	adds	r3, r6, #4
 800287c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800287e:	6838      	ldr	r0, [r7, #0]
 8002880:	f004 faec 	bl	8006e5c <USB_CoreInit>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2202      	movs	r2, #2
 800288e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e0d7      	b.n	8002a46 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f004 fb46 	bl	8006f2e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	e04a      	b.n	800293e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	333d      	adds	r3, #61	; 0x3d
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	333c      	adds	r3, #60	; 0x3c
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	b298      	uxth	r0, r3
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	3344      	adds	r3, #68	; 0x44
 80028e4:	4602      	mov	r2, r0
 80028e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028e8:	7bfa      	ldrb	r2, [r7, #15]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	3340      	adds	r3, #64	; 0x40
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	3348      	adds	r3, #72	; 0x48
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	334c      	adds	r3, #76	; 0x4c
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	3354      	adds	r3, #84	; 0x54
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	3301      	adds	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
 800293e:	7bfa      	ldrb	r2, [r7, #15]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	d3af      	bcc.n	80028a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002948:	2300      	movs	r3, #0
 800294a:	73fb      	strb	r3, [r7, #15]
 800294c:	e044      	b.n	80029d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800294e:	7bfa      	ldrb	r2, [r7, #15]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002964:	7bfa      	ldrb	r2, [r7, #15]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002976:	7bfa      	ldrb	r2, [r7, #15]
 8002978:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800297a:	7bfa      	ldrb	r2, [r7, #15]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029bc:	7bfa      	ldrb	r2, [r7, #15]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	3301      	adds	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d3b5      	bcc.n	800294e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	687e      	ldr	r6, [r7, #4]
 80029ea:	466d      	mov	r5, sp
 80029ec:	f106 0410 	add.w	r4, r6, #16
 80029f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a00:	1d33      	adds	r3, r6, #4
 8002a02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a04:	6838      	ldr	r0, [r7, #0]
 8002a06:	f004 fadf 	bl	8006fc8 <USB_DevInit>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e014      	b.n	8002a46 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d102      	bne.n	8002a3a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f80b 	bl	8002a50 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f004 fc9d 	bl	800737e <USB_DevDisconnect>

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a7e:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <HAL_PCDEx_ActivateLPM+0x44>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	10000003 	.word	0x10000003

08002a98 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa6:	6013      	str	r3, [r2, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40007000 	.word	0x40007000

08002ab8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac2:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	4a22      	ldr	r2, [pc, #136]	; (8002b50 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002acc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ace:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ada:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ae6:	f7ff f9cd 	bl	8001e84 <HAL_GetTick>
 8002aea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002aec:	e009      	b.n	8002b02 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002aee:	f7ff f9c9 	bl	8001e84 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002afc:	d901      	bls.n	8002b02 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e022      	b.n	8002b48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b02:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0e:	d1ee      	bne.n	8002aee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b10:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0f      	ldr	r2, [pc, #60]	; (8002b54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b1c:	f7ff f9b2 	bl	8001e84 <HAL_GetTick>
 8002b20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b22:	e009      	b.n	8002b38 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b24:	f7ff f9ae 	bl	8001e84 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b32:	d901      	bls.n	8002b38 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e007      	b.n	8002b48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b44:	d1ee      	bne.n	8002b24 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40007000 	.word	0x40007000

08002b58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b60:	2300      	movs	r3, #0
 8002b62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e29b      	b.n	80030a6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8087 	beq.w	8002c8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b7c:	4b96      	ldr	r3, [pc, #600]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d00c      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b88:	4b93      	ldr	r3, [pc, #588]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d112      	bne.n	8002bba <HAL_RCC_OscConfig+0x62>
 8002b94:	4b90      	ldr	r3, [pc, #576]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba0:	d10b      	bne.n	8002bba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba2:	4b8d      	ldr	r3, [pc, #564]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d06c      	beq.n	8002c88 <HAL_RCC_OscConfig+0x130>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d168      	bne.n	8002c88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e275      	b.n	80030a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x7a>
 8002bc4:	4b84      	ldr	r3, [pc, #528]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a83      	ldr	r2, [pc, #524]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	e02e      	b.n	8002c30 <HAL_RCC_OscConfig+0xd8>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x9c>
 8002bda:	4b7f      	ldr	r3, [pc, #508]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a7e      	ldr	r2, [pc, #504]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b7c      	ldr	r3, [pc, #496]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a7b      	ldr	r2, [pc, #492]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e01d      	b.n	8002c30 <HAL_RCC_OscConfig+0xd8>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0xc0>
 8002bfe:	4b76      	ldr	r3, [pc, #472]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a75      	ldr	r2, [pc, #468]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b73      	ldr	r3, [pc, #460]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a72      	ldr	r2, [pc, #456]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e00b      	b.n	8002c30 <HAL_RCC_OscConfig+0xd8>
 8002c18:	4b6f      	ldr	r3, [pc, #444]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a6e      	ldr	r2, [pc, #440]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b6c      	ldr	r3, [pc, #432]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a6b      	ldr	r2, [pc, #428]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d013      	beq.n	8002c60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7ff f924 	bl	8001e84 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c40:	f7ff f920 	bl	8001e84 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e229      	b.n	80030a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	4b61      	ldr	r3, [pc, #388]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0xe8>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7ff f910 	bl	8001e84 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7ff f90c 	bl	8001e84 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e215      	b.n	80030a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7a:	4b57      	ldr	r3, [pc, #348]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x110>
 8002c86:	e000      	b.n	8002c8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d069      	beq.n	8002d6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c96:	4b50      	ldr	r3, [pc, #320]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00b      	beq.n	8002cba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ca2:	4b4d      	ldr	r3, [pc, #308]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d11c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x190>
 8002cae:	4b4a      	ldr	r3, [pc, #296]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d116      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	4b47      	ldr	r3, [pc, #284]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x17a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e1e9      	b.n	80030a6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd2:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	493d      	ldr	r1, [pc, #244]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	e040      	b.n	8002d6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d023      	beq.n	8002d38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf0:	4b39      	ldr	r3, [pc, #228]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a38      	ldr	r2, [pc, #224]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7ff f8c2 	bl	8001e84 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d04:	f7ff f8be 	bl	8001e84 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e1c7      	b.n	80030a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d16:	4b30      	ldr	r3, [pc, #192]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4929      	ldr	r1, [pc, #164]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
 8002d36:	e018      	b.n	8002d6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d38:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a26      	ldr	r2, [pc, #152]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7ff f89e 	bl	8001e84 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4c:	f7ff f89a 	bl	8001e84 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e1a3      	b.n	80030a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5e:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d038      	beq.n	8002de8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d019      	beq.n	8002db2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7e:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d82:	4a15      	ldr	r2, [pc, #84]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8a:	f7ff f87b 	bl	8001e84 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d92:	f7ff f877 	bl	8001e84 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e180      	b.n	80030a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da4:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x23a>
 8002db0:	e01a      	b.n	8002de8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db6:	4a08      	ldr	r2, [pc, #32]	; (8002dd8 <HAL_RCC_OscConfig+0x280>)
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbe:	f7ff f861 	bl	8001e84 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc4:	e00a      	b.n	8002ddc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc6:	f7ff f85d 	bl	8001e84 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d903      	bls.n	8002ddc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e166      	b.n	80030a6 <HAL_RCC_OscConfig+0x54e>
 8002dd8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ddc:	4b92      	ldr	r3, [pc, #584]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ee      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80a4 	beq.w	8002f3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df6:	4b8c      	ldr	r3, [pc, #560]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10d      	bne.n	8002e1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e02:	4b89      	ldr	r3, [pc, #548]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	4a88      	ldr	r2, [pc, #544]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0e:	4b86      	ldr	r3, [pc, #536]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e1e:	4b83      	ldr	r3, [pc, #524]	; (800302c <HAL_RCC_OscConfig+0x4d4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d118      	bne.n	8002e5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e2a:	4b80      	ldr	r3, [pc, #512]	; (800302c <HAL_RCC_OscConfig+0x4d4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a7f      	ldr	r2, [pc, #508]	; (800302c <HAL_RCC_OscConfig+0x4d4>)
 8002e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e36:	f7ff f825 	bl	8001e84 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3e:	f7ff f821 	bl	8001e84 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b64      	cmp	r3, #100	; 0x64
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e12a      	b.n	80030a6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e50:	4b76      	ldr	r3, [pc, #472]	; (800302c <HAL_RCC_OscConfig+0x4d4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d106      	bne.n	8002e72 <HAL_RCC_OscConfig+0x31a>
 8002e64:	4b70      	ldr	r3, [pc, #448]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4a6f      	ldr	r2, [pc, #444]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e70:	e02d      	b.n	8002ece <HAL_RCC_OscConfig+0x376>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x33c>
 8002e7a:	4b6b      	ldr	r3, [pc, #428]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	4a6a      	ldr	r2, [pc, #424]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	6713      	str	r3, [r2, #112]	; 0x70
 8002e86:	4b68      	ldr	r3, [pc, #416]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	4a67      	ldr	r2, [pc, #412]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002e8c:	f023 0304 	bic.w	r3, r3, #4
 8002e90:	6713      	str	r3, [r2, #112]	; 0x70
 8002e92:	e01c      	b.n	8002ece <HAL_RCC_OscConfig+0x376>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b05      	cmp	r3, #5
 8002e9a:	d10c      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x35e>
 8002e9c:	4b62      	ldr	r3, [pc, #392]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	4a61      	ldr	r2, [pc, #388]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002ea2:	f043 0304 	orr.w	r3, r3, #4
 8002ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea8:	4b5f      	ldr	r3, [pc, #380]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	4a5e      	ldr	r2, [pc, #376]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb4:	e00b      	b.n	8002ece <HAL_RCC_OscConfig+0x376>
 8002eb6:	4b5c      	ldr	r3, [pc, #368]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	4a5b      	ldr	r2, [pc, #364]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec2:	4b59      	ldr	r3, [pc, #356]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	4a58      	ldr	r2, [pc, #352]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002ec8:	f023 0304 	bic.w	r3, r3, #4
 8002ecc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d015      	beq.n	8002f02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed6:	f7fe ffd5 	bl	8001e84 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ede:	f7fe ffd1 	bl	8001e84 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e0d8      	b.n	80030a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef4:	4b4c      	ldr	r3, [pc, #304]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0ee      	beq.n	8002ede <HAL_RCC_OscConfig+0x386>
 8002f00:	e014      	b.n	8002f2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fe ffbf 	bl	8001e84 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fe ffbb 	bl	8001e84 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e0c2      	b.n	80030a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f20:	4b41      	ldr	r3, [pc, #260]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ee      	bne.n	8002f0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f2c:	7dfb      	ldrb	r3, [r7, #23]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d105      	bne.n	8002f3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f32:	4b3d      	ldr	r3, [pc, #244]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a3c      	ldr	r2, [pc, #240]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 80ae 	beq.w	80030a4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f48:	4b37      	ldr	r3, [pc, #220]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d06d      	beq.n	8003030 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d14b      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5c:	4b32      	ldr	r3, [pc, #200]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a31      	ldr	r2, [pc, #196]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002f62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe ff8c 	bl	8001e84 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fe ff88 	bl	8001e84 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e091      	b.n	80030a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f82:	4b29      	ldr	r3, [pc, #164]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69da      	ldr	r2, [r3, #28]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	019b      	lsls	r3, r3, #6
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	085b      	lsrs	r3, r3, #1
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	041b      	lsls	r3, r3, #16
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	061b      	lsls	r3, r3, #24
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	071b      	lsls	r3, r3, #28
 8002fba:	491b      	ldr	r1, [pc, #108]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc0:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a18      	ldr	r2, [pc, #96]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fe ff5a 	bl	8001e84 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7fe ff56 	bl	8001e84 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e05f      	b.n	80030a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x47c>
 8002ff2:	e057      	b.n	80030a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0b      	ldr	r2, [pc, #44]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 8002ffa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe ff40 	bl	8001e84 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003008:	f7fe ff3c 	bl	8001e84 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e045      	b.n	80030a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301a:	4b03      	ldr	r3, [pc, #12]	; (8003028 <HAL_RCC_OscConfig+0x4d0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x4b0>
 8003026:	e03d      	b.n	80030a4 <HAL_RCC_OscConfig+0x54c>
 8003028:	40023800 	.word	0x40023800
 800302c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003030:	4b1f      	ldr	r3, [pc, #124]	; (80030b0 <HAL_RCC_OscConfig+0x558>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d030      	beq.n	80030a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003048:	429a      	cmp	r2, r3
 800304a:	d129      	bne.n	80030a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	429a      	cmp	r2, r3
 8003058:	d122      	bne.n	80030a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003060:	4013      	ands	r3, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003066:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003068:	4293      	cmp	r3, r2
 800306a:	d119      	bne.n	80030a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	085b      	lsrs	r3, r3, #1
 8003078:	3b01      	subs	r3, #1
 800307a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d10f      	bne.n	80030a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d107      	bne.n	80030a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d001      	beq.n	80030a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800

080030b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0d0      	b.n	800326e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030cc:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d910      	bls.n	80030fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b67      	ldr	r3, [pc, #412]	; (8003278 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 020f 	bic.w	r2, r3, #15
 80030e2:	4965      	ldr	r1, [pc, #404]	; (8003278 <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b63      	ldr	r3, [pc, #396]	; (8003278 <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0b8      	b.n	800326e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d020      	beq.n	800314a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003114:	4b59      	ldr	r3, [pc, #356]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4a58      	ldr	r2, [pc, #352]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 800311a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800311e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800312c:	4b53      	ldr	r3, [pc, #332]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4a52      	ldr	r2, [pc, #328]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 8003132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003136:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003138:	4b50      	ldr	r3, [pc, #320]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	494d      	ldr	r1, [pc, #308]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d040      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	4b47      	ldr	r3, [pc, #284]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d115      	bne.n	8003196 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e07f      	b.n	800326e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	4b41      	ldr	r3, [pc, #260]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e073      	b.n	800326e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003186:	4b3d      	ldr	r3, [pc, #244]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e06b      	b.n	800326e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003196:	4b39      	ldr	r3, [pc, #228]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4936      	ldr	r1, [pc, #216]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a8:	f7fe fe6c 	bl	8001e84 <HAL_GetTick>
 80031ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b0:	f7fe fe68 	bl	8001e84 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e053      	b.n	800326e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	4b2d      	ldr	r3, [pc, #180]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 020c 	and.w	r2, r3, #12
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d1eb      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031d8:	4b27      	ldr	r3, [pc, #156]	; (8003278 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d210      	bcs.n	8003208 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b24      	ldr	r3, [pc, #144]	; (8003278 <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 020f 	bic.w	r2, r3, #15
 80031ee:	4922      	ldr	r1, [pc, #136]	; (8003278 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b20      	ldr	r3, [pc, #128]	; (8003278 <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e032      	b.n	800326e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003214:	4b19      	ldr	r3, [pc, #100]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4916      	ldr	r1, [pc, #88]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003232:	4b12      	ldr	r3, [pc, #72]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	490e      	ldr	r1, [pc, #56]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003246:	f000 f821 	bl	800328c <HAL_RCC_GetSysClockFreq>
 800324a:	4602      	mov	r2, r0
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	490a      	ldr	r1, [pc, #40]	; (8003280 <HAL_RCC_ClockConfig+0x1cc>)
 8003258:	5ccb      	ldrb	r3, [r1, r3]
 800325a:	fa22 f303 	lsr.w	r3, r2, r3
 800325e:	4a09      	ldr	r2, [pc, #36]	; (8003284 <HAL_RCC_ClockConfig+0x1d0>)
 8003260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <HAL_RCC_ClockConfig+0x1d4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe fdc8 	bl	8001dfc <HAL_InitTick>

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40023c00 	.word	0x40023c00
 800327c:	40023800 	.word	0x40023800
 8003280:	08007db0 	.word	0x08007db0
 8003284:	20000014 	.word	0x20000014
 8003288:	20000018 	.word	0x20000018

0800328c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800328c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003290:	b094      	sub	sp, #80	; 0x50
 8003292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	647b      	str	r3, [r7, #68]	; 0x44
 8003298:	2300      	movs	r3, #0
 800329a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800329c:	2300      	movs	r3, #0
 800329e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a4:	4b79      	ldr	r3, [pc, #484]	; (800348c <HAL_RCC_GetSysClockFreq+0x200>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d00d      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x40>
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	f200 80e1 	bhi.w	8003478 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x34>
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d003      	beq.n	80032c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032be:	e0db      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032c0:	4b73      	ldr	r3, [pc, #460]	; (8003490 <HAL_RCC_GetSysClockFreq+0x204>)
 80032c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032c4:	e0db      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032c6:	4b73      	ldr	r3, [pc, #460]	; (8003494 <HAL_RCC_GetSysClockFreq+0x208>)
 80032c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032ca:	e0d8      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032cc:	4b6f      	ldr	r3, [pc, #444]	; (800348c <HAL_RCC_GetSysClockFreq+0x200>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032d6:	4b6d      	ldr	r3, [pc, #436]	; (800348c <HAL_RCC_GetSysClockFreq+0x200>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d063      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e2:	4b6a      	ldr	r3, [pc, #424]	; (800348c <HAL_RCC_GetSysClockFreq+0x200>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	099b      	lsrs	r3, r3, #6
 80032e8:	2200      	movs	r2, #0
 80032ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80032ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f4:	633b      	str	r3, [r7, #48]	; 0x30
 80032f6:	2300      	movs	r3, #0
 80032f8:	637b      	str	r3, [r7, #52]	; 0x34
 80032fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032fe:	4622      	mov	r2, r4
 8003300:	462b      	mov	r3, r5
 8003302:	f04f 0000 	mov.w	r0, #0
 8003306:	f04f 0100 	mov.w	r1, #0
 800330a:	0159      	lsls	r1, r3, #5
 800330c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003310:	0150      	lsls	r0, r2, #5
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4621      	mov	r1, r4
 8003318:	1a51      	subs	r1, r2, r1
 800331a:	6139      	str	r1, [r7, #16]
 800331c:	4629      	mov	r1, r5
 800331e:	eb63 0301 	sbc.w	r3, r3, r1
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003330:	4659      	mov	r1, fp
 8003332:	018b      	lsls	r3, r1, #6
 8003334:	4651      	mov	r1, sl
 8003336:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800333a:	4651      	mov	r1, sl
 800333c:	018a      	lsls	r2, r1, #6
 800333e:	4651      	mov	r1, sl
 8003340:	ebb2 0801 	subs.w	r8, r2, r1
 8003344:	4659      	mov	r1, fp
 8003346:	eb63 0901 	sbc.w	r9, r3, r1
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003356:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800335a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800335e:	4690      	mov	r8, r2
 8003360:	4699      	mov	r9, r3
 8003362:	4623      	mov	r3, r4
 8003364:	eb18 0303 	adds.w	r3, r8, r3
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	462b      	mov	r3, r5
 800336c:	eb49 0303 	adc.w	r3, r9, r3
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800337e:	4629      	mov	r1, r5
 8003380:	024b      	lsls	r3, r1, #9
 8003382:	4621      	mov	r1, r4
 8003384:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003388:	4621      	mov	r1, r4
 800338a:	024a      	lsls	r2, r1, #9
 800338c:	4610      	mov	r0, r2
 800338e:	4619      	mov	r1, r3
 8003390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003392:	2200      	movs	r2, #0
 8003394:	62bb      	str	r3, [r7, #40]	; 0x28
 8003396:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003398:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800339c:	f7fc ffa8 	bl	80002f0 <__aeabi_uldivmod>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4613      	mov	r3, r2
 80033a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033a8:	e058      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033aa:	4b38      	ldr	r3, [pc, #224]	; (800348c <HAL_RCC_GetSysClockFreq+0x200>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	099b      	lsrs	r3, r3, #6
 80033b0:	2200      	movs	r2, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	4611      	mov	r1, r2
 80033b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033ba:	623b      	str	r3, [r7, #32]
 80033bc:	2300      	movs	r3, #0
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
 80033c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033c4:	4642      	mov	r2, r8
 80033c6:	464b      	mov	r3, r9
 80033c8:	f04f 0000 	mov.w	r0, #0
 80033cc:	f04f 0100 	mov.w	r1, #0
 80033d0:	0159      	lsls	r1, r3, #5
 80033d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033d6:	0150      	lsls	r0, r2, #5
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4641      	mov	r1, r8
 80033de:	ebb2 0a01 	subs.w	sl, r2, r1
 80033e2:	4649      	mov	r1, r9
 80033e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003400:	eb63 050b 	sbc.w	r5, r3, fp
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	00eb      	lsls	r3, r5, #3
 800340e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003412:	00e2      	lsls	r2, r4, #3
 8003414:	4614      	mov	r4, r2
 8003416:	461d      	mov	r5, r3
 8003418:	4643      	mov	r3, r8
 800341a:	18e3      	adds	r3, r4, r3
 800341c:	603b      	str	r3, [r7, #0]
 800341e:	464b      	mov	r3, r9
 8003420:	eb45 0303 	adc.w	r3, r5, r3
 8003424:	607b      	str	r3, [r7, #4]
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003432:	4629      	mov	r1, r5
 8003434:	028b      	lsls	r3, r1, #10
 8003436:	4621      	mov	r1, r4
 8003438:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800343c:	4621      	mov	r1, r4
 800343e:	028a      	lsls	r2, r1, #10
 8003440:	4610      	mov	r0, r2
 8003442:	4619      	mov	r1, r3
 8003444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003446:	2200      	movs	r2, #0
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	61fa      	str	r2, [r7, #28]
 800344c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003450:	f7fc ff4e 	bl	80002f0 <__aeabi_uldivmod>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4613      	mov	r3, r2
 800345a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_RCC_GetSysClockFreq+0x200>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	0c1b      	lsrs	r3, r3, #16
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	3301      	adds	r3, #1
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800346c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800346e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003470:	fbb2 f3f3 	udiv	r3, r2, r3
 8003474:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003476:	e002      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <HAL_RCC_GetSysClockFreq+0x204>)
 800347a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800347c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800347e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003480:	4618      	mov	r0, r3
 8003482:	3750      	adds	r7, #80	; 0x50
 8003484:	46bd      	mov	sp, r7
 8003486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
 8003490:	00f42400 	.word	0x00f42400
 8003494:	007a1200 	.word	0x007a1200

08003498 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800349c:	4b03      	ldr	r3, [pc, #12]	; (80034ac <HAL_RCC_GetHCLKFreq+0x14>)
 800349e:	681b      	ldr	r3, [r3, #0]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20000014 	.word	0x20000014

080034b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034b4:	f7ff fff0 	bl	8003498 <HAL_RCC_GetHCLKFreq>
 80034b8:	4602      	mov	r2, r0
 80034ba:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	0a9b      	lsrs	r3, r3, #10
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	4903      	ldr	r1, [pc, #12]	; (80034d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034c6:	5ccb      	ldrb	r3, [r1, r3]
 80034c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40023800 	.word	0x40023800
 80034d4:	08007dc0 	.word	0x08007dc0

080034d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034dc:	f7ff ffdc 	bl	8003498 <HAL_RCC_GetHCLKFreq>
 80034e0:	4602      	mov	r2, r0
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	0b5b      	lsrs	r3, r3, #13
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	4903      	ldr	r1, [pc, #12]	; (80034fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ee:	5ccb      	ldrb	r3, [r1, r3]
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40023800 	.word	0x40023800
 80034fc:	08007dc0 	.word	0x08007dc0

08003500 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d012      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003528:	4b69      	ldr	r3, [pc, #420]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a68      	ldr	r2, [pc, #416]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003532:	6093      	str	r3, [r2, #8]
 8003534:	4b66      	ldr	r3, [pc, #408]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353c:	4964      	ldr	r1, [pc, #400]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800354a:	2301      	movs	r3, #1
 800354c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d017      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800355a:	4b5d      	ldr	r3, [pc, #372]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003560:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003568:	4959      	ldr	r1, [pc, #356]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003574:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003578:	d101      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800357a:	2301      	movs	r3, #1
 800357c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003586:	2301      	movs	r3, #1
 8003588:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d017      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003596:	4b4e      	ldr	r3, [pc, #312]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800359c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	494a      	ldr	r1, [pc, #296]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035b4:	d101      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035b6:	2301      	movs	r3, #1
 80035b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035c2:	2301      	movs	r3, #1
 80035c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035d2:	2301      	movs	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 808b 	beq.w	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035e4:	4b3a      	ldr	r3, [pc, #232]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	4a39      	ldr	r2, [pc, #228]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ee:	6413      	str	r3, [r2, #64]	; 0x40
 80035f0:	4b37      	ldr	r3, [pc, #220]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035fc:	4b35      	ldr	r3, [pc, #212]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a34      	ldr	r2, [pc, #208]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003608:	f7fe fc3c 	bl	8001e84 <HAL_GetTick>
 800360c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003610:	f7fe fc38 	bl	8001e84 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	; 0x64
 800361c:	d901      	bls.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e38f      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003622:	4b2c      	ldr	r3, [pc, #176]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800362e:	4b28      	ldr	r3, [pc, #160]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003636:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d035      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	429a      	cmp	r2, r3
 800364a:	d02e      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800364c:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003654:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003656:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	4a1d      	ldr	r2, [pc, #116]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003660:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003662:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4a1a      	ldr	r2, [pc, #104]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800366e:	4a18      	ldr	r2, [pc, #96]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003674:	4b16      	ldr	r3, [pc, #88]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b01      	cmp	r3, #1
 800367e:	d114      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fe fc00 	bl	8001e84 <HAL_GetTick>
 8003684:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003686:	e00a      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003688:	f7fe fbfc 	bl	8001e84 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f241 3288 	movw	r2, #5000	; 0x1388
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e351      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369e:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0ee      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036b6:	d111      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036c4:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036c6:	400b      	ands	r3, r1
 80036c8:	4901      	ldr	r1, [pc, #4]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
 80036ce:	e00b      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036d0:	40023800 	.word	0x40023800
 80036d4:	40007000 	.word	0x40007000
 80036d8:	0ffffcff 	.word	0x0ffffcff
 80036dc:	4bac      	ldr	r3, [pc, #688]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	4aab      	ldr	r2, [pc, #684]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036e6:	6093      	str	r3, [r2, #8]
 80036e8:	4ba9      	ldr	r3, [pc, #676]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f4:	49a6      	ldr	r1, [pc, #664]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	2b00      	cmp	r3, #0
 8003704:	d010      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003706:	4ba2      	ldr	r3, [pc, #648]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800370c:	4aa0      	ldr	r2, [pc, #640]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800370e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003712:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003716:	4b9e      	ldr	r3, [pc, #632]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003718:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	499b      	ldr	r1, [pc, #620]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003734:	4b96      	ldr	r3, [pc, #600]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003742:	4993      	ldr	r1, [pc, #588]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003756:	4b8e      	ldr	r3, [pc, #568]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003764:	498a      	ldr	r1, [pc, #552]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003778:	4b85      	ldr	r3, [pc, #532]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003786:	4982      	ldr	r1, [pc, #520]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800379a:	4b7d      	ldr	r3, [pc, #500]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a8:	4979      	ldr	r1, [pc, #484]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037bc:	4b74      	ldr	r3, [pc, #464]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	f023 0203 	bic.w	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	4971      	ldr	r1, [pc, #452]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037de:	4b6c      	ldr	r3, [pc, #432]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	f023 020c 	bic.w	r2, r3, #12
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ec:	4968      	ldr	r1, [pc, #416]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003800:	4b63      	ldr	r3, [pc, #396]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380e:	4960      	ldr	r1, [pc, #384]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003822:	4b5b      	ldr	r3, [pc, #364]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003830:	4957      	ldr	r1, [pc, #348]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003844:	4b52      	ldr	r3, [pc, #328]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	494f      	ldr	r1, [pc, #316]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003866:	4b4a      	ldr	r3, [pc, #296]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	4946      	ldr	r1, [pc, #280]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003888:	4b41      	ldr	r3, [pc, #260]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003896:	493e      	ldr	r1, [pc, #248]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038aa:	4b39      	ldr	r3, [pc, #228]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b8:	4935      	ldr	r1, [pc, #212]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038cc:	4b30      	ldr	r3, [pc, #192]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038da:	492d      	ldr	r1, [pc, #180]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d011      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038ee:	4b28      	ldr	r3, [pc, #160]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038fc:	4924      	ldr	r1, [pc, #144]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800390c:	d101      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800390e:	2301      	movs	r3, #1
 8003910:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800391e:	2301      	movs	r3, #1
 8003920:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800392e:	4b18      	ldr	r3, [pc, #96]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393c:	4914      	ldr	r1, [pc, #80]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00b      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003950:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003960:	490b      	ldr	r1, [pc, #44]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00f      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003984:	4902      	ldr	r1, [pc, #8]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800398c:	e002      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800398e:	bf00      	nop
 8003990:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00b      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039a0:	4b8a      	ldr	r3, [pc, #552]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	4986      	ldr	r1, [pc, #536]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00b      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80039c4:	4b81      	ldr	r3, [pc, #516]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d4:	497d      	ldr	r1, [pc, #500]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d006      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 80d6 	beq.w	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039f0:	4b76      	ldr	r3, [pc, #472]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a75      	ldr	r2, [pc, #468]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039fc:	f7fe fa42 	bl	8001e84 <HAL_GetTick>
 8003a00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a04:	f7fe fa3e 	bl	8001e84 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	; 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e195      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a16:	4b6d      	ldr	r3, [pc, #436]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d021      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d11d      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a36:	4b65      	ldr	r3, [pc, #404]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a3c:	0c1b      	lsrs	r3, r3, #16
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a44:	4b61      	ldr	r3, [pc, #388]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a4a:	0e1b      	lsrs	r3, r3, #24
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	019a      	lsls	r2, r3, #6
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	041b      	lsls	r3, r3, #16
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	061b      	lsls	r3, r3, #24
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	071b      	lsls	r3, r3, #28
 8003a6a:	4958      	ldr	r1, [pc, #352]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d004      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d02e      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a9c:	d129      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a9e:	4b4b      	ldr	r3, [pc, #300]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aa4:	0c1b      	lsrs	r3, r3, #16
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003aac:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab2:	0f1b      	lsrs	r3, r3, #28
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	019a      	lsls	r2, r3, #6
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	041b      	lsls	r3, r3, #16
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	061b      	lsls	r3, r3, #24
 8003acc:	431a      	orrs	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	071b      	lsls	r3, r3, #28
 8003ad2:	493e      	ldr	r1, [pc, #248]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ada:	4b3c      	ldr	r3, [pc, #240]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae0:	f023 021f 	bic.w	r2, r3, #31
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	4938      	ldr	r1, [pc, #224]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d01d      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003afe:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b04:	0e1b      	lsrs	r3, r3, #24
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b0c:	4b2f      	ldr	r3, [pc, #188]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b12:	0f1b      	lsrs	r3, r3, #28
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	019a      	lsls	r2, r3, #6
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	041b      	lsls	r3, r3, #16
 8003b26:	431a      	orrs	r2, r3
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	061b      	lsls	r3, r3, #24
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	071b      	lsls	r3, r3, #28
 8003b32:	4926      	ldr	r1, [pc, #152]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d011      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	019a      	lsls	r2, r3, #6
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	041b      	lsls	r3, r3, #16
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	061b      	lsls	r3, r3, #24
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	071b      	lsls	r3, r3, #28
 8003b62:	491a      	ldr	r1, [pc, #104]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b6a:	4b18      	ldr	r3, [pc, #96]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a17      	ldr	r2, [pc, #92]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b76:	f7fe f985 	bl	8001e84 <HAL_GetTick>
 8003b7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b7e:	f7fe f981 	bl	8001e84 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b64      	cmp	r3, #100	; 0x64
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e0d8      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b90:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	f040 80ce 	bne.w	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ba4:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a08      	ldr	r2, [pc, #32]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb0:	f7fe f968 	bl	8001e84 <HAL_GetTick>
 8003bb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bb6:	e00b      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bb8:	f7fe f964 	bl	8001e84 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	; 0x64
 8003bc4:	d904      	bls.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e0bb      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bd0:	4b5e      	ldr	r3, [pc, #376]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bdc:	d0ec      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d02e      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d12a      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c06:	4b51      	ldr	r3, [pc, #324]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0c:	0c1b      	lsrs	r3, r3, #16
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c14:	4b4d      	ldr	r3, [pc, #308]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1a:	0f1b      	lsrs	r3, r3, #28
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	019a      	lsls	r2, r3, #6
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	041b      	lsls	r3, r3, #16
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	061b      	lsls	r3, r3, #24
 8003c34:	431a      	orrs	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	071b      	lsls	r3, r3, #28
 8003c3a:	4944      	ldr	r1, [pc, #272]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c42:	4b42      	ldr	r3, [pc, #264]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c48:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	3b01      	subs	r3, #1
 8003c52:	021b      	lsls	r3, r3, #8
 8003c54:	493d      	ldr	r1, [pc, #244]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d022      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c70:	d11d      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c72:	4b36      	ldr	r3, [pc, #216]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	0e1b      	lsrs	r3, r3, #24
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c80:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	0f1b      	lsrs	r3, r3, #28
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	019a      	lsls	r2, r3, #6
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	041b      	lsls	r3, r3, #16
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	061b      	lsls	r3, r3, #24
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	071b      	lsls	r3, r3, #28
 8003ca6:	4929      	ldr	r1, [pc, #164]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d028      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cba:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc0:	0e1b      	lsrs	r3, r3, #24
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cc8:	4b20      	ldr	r3, [pc, #128]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cce:	0c1b      	lsrs	r3, r3, #16
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	019a      	lsls	r2, r3, #6
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	041b      	lsls	r3, r3, #16
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	061b      	lsls	r3, r3, #24
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	071b      	lsls	r3, r3, #28
 8003cee:	4917      	ldr	r1, [pc, #92]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cf6:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	4911      	ldr	r1, [pc, #68]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a0e      	ldr	r2, [pc, #56]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d18:	f7fe f8b4 	bl	8001e84 <HAL_GetTick>
 8003d1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d20:	f7fe f8b0 	bl	8001e84 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	; 0x64
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e007      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d32:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d3e:	d1ef      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3720      	adds	r7, #32
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40023800 	.word	0x40023800

08003d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e049      	b.n	8003df6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fd fd6c 	bl	8001854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4610      	mov	r0, r2
 8003d90:	f000 ffbe 	bl	8004d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e049      	b.n	8003ea4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d106      	bne.n	8003e2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f841 	bl	8003eac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	f000 ff67 	bl	8004d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d109      	bne.n	8003ee4 <HAL_TIM_PWM_Start+0x24>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	bf14      	ite	ne
 8003edc:	2301      	movne	r3, #1
 8003ede:	2300      	moveq	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	e03c      	b.n	8003f5e <HAL_TIM_PWM_Start+0x9e>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d109      	bne.n	8003efe <HAL_TIM_PWM_Start+0x3e>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	bf14      	ite	ne
 8003ef6:	2301      	movne	r3, #1
 8003ef8:	2300      	moveq	r3, #0
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	e02f      	b.n	8003f5e <HAL_TIM_PWM_Start+0x9e>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d109      	bne.n	8003f18 <HAL_TIM_PWM_Start+0x58>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	bf14      	ite	ne
 8003f10:	2301      	movne	r3, #1
 8003f12:	2300      	moveq	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	e022      	b.n	8003f5e <HAL_TIM_PWM_Start+0x9e>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b0c      	cmp	r3, #12
 8003f1c:	d109      	bne.n	8003f32 <HAL_TIM_PWM_Start+0x72>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	bf14      	ite	ne
 8003f2a:	2301      	movne	r3, #1
 8003f2c:	2300      	moveq	r3, #0
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	e015      	b.n	8003f5e <HAL_TIM_PWM_Start+0x9e>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b10      	cmp	r3, #16
 8003f36:	d109      	bne.n	8003f4c <HAL_TIM_PWM_Start+0x8c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	bf14      	ite	ne
 8003f44:	2301      	movne	r3, #1
 8003f46:	2300      	moveq	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	e008      	b.n	8003f5e <HAL_TIM_PWM_Start+0x9e>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	bf14      	ite	ne
 8003f58:	2301      	movne	r3, #1
 8003f5a:	2300      	moveq	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e092      	b.n	800408c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d104      	bne.n	8003f76 <HAL_TIM_PWM_Start+0xb6>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f74:	e023      	b.n	8003fbe <HAL_TIM_PWM_Start+0xfe>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d104      	bne.n	8003f86 <HAL_TIM_PWM_Start+0xc6>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f84:	e01b      	b.n	8003fbe <HAL_TIM_PWM_Start+0xfe>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d104      	bne.n	8003f96 <HAL_TIM_PWM_Start+0xd6>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f94:	e013      	b.n	8003fbe <HAL_TIM_PWM_Start+0xfe>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b0c      	cmp	r3, #12
 8003f9a:	d104      	bne.n	8003fa6 <HAL_TIM_PWM_Start+0xe6>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fa4:	e00b      	b.n	8003fbe <HAL_TIM_PWM_Start+0xfe>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b10      	cmp	r3, #16
 8003faa:	d104      	bne.n	8003fb6 <HAL_TIM_PWM_Start+0xf6>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fb4:	e003      	b.n	8003fbe <HAL_TIM_PWM_Start+0xfe>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	6839      	ldr	r1, [r7, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f001 fb64 	bl	8005694 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a30      	ldr	r2, [pc, #192]	; (8004094 <HAL_TIM_PWM_Start+0x1d4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_TIM_PWM_Start+0x120>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a2f      	ldr	r2, [pc, #188]	; (8004098 <HAL_TIM_PWM_Start+0x1d8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d101      	bne.n	8003fe4 <HAL_TIM_PWM_Start+0x124>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <HAL_TIM_PWM_Start+0x126>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d007      	beq.n	8003ffa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ff8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a25      	ldr	r2, [pc, #148]	; (8004094 <HAL_TIM_PWM_Start+0x1d4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d022      	beq.n	800404a <HAL_TIM_PWM_Start+0x18a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400c:	d01d      	beq.n	800404a <HAL_TIM_PWM_Start+0x18a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a22      	ldr	r2, [pc, #136]	; (800409c <HAL_TIM_PWM_Start+0x1dc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d018      	beq.n	800404a <HAL_TIM_PWM_Start+0x18a>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a20      	ldr	r2, [pc, #128]	; (80040a0 <HAL_TIM_PWM_Start+0x1e0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d013      	beq.n	800404a <HAL_TIM_PWM_Start+0x18a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1f      	ldr	r2, [pc, #124]	; (80040a4 <HAL_TIM_PWM_Start+0x1e4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00e      	beq.n	800404a <HAL_TIM_PWM_Start+0x18a>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a19      	ldr	r2, [pc, #100]	; (8004098 <HAL_TIM_PWM_Start+0x1d8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d009      	beq.n	800404a <HAL_TIM_PWM_Start+0x18a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a1b      	ldr	r2, [pc, #108]	; (80040a8 <HAL_TIM_PWM_Start+0x1e8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d004      	beq.n	800404a <HAL_TIM_PWM_Start+0x18a>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a19      	ldr	r2, [pc, #100]	; (80040ac <HAL_TIM_PWM_Start+0x1ec>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d115      	bne.n	8004076 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <HAL_TIM_PWM_Start+0x1f0>)
 8004052:	4013      	ands	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b06      	cmp	r3, #6
 800405a:	d015      	beq.n	8004088 <HAL_TIM_PWM_Start+0x1c8>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004062:	d011      	beq.n	8004088 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004074:	e008      	b.n	8004088 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0201 	orr.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	e000      	b.n	800408a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004088:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40010000 	.word	0x40010000
 8004098:	40010400 	.word	0x40010400
 800409c:	40000400 	.word	0x40000400
 80040a0:	40000800 	.word	0x40000800
 80040a4:	40000c00 	.word	0x40000c00
 80040a8:	40014000 	.word	0x40014000
 80040ac:	40001800 	.word	0x40001800
 80040b0:	00010007 	.word	0x00010007

080040b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2200      	movs	r2, #0
 80040c4:	6839      	ldr	r1, [r7, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f001 fae4 	bl	8005694 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a36      	ldr	r2, [pc, #216]	; (80041ac <HAL_TIM_PWM_Stop+0xf8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d004      	beq.n	80040e0 <HAL_TIM_PWM_Stop+0x2c>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a35      	ldr	r2, [pc, #212]	; (80041b0 <HAL_TIM_PWM_Stop+0xfc>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d101      	bne.n	80040e4 <HAL_TIM_PWM_Stop+0x30>
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <HAL_TIM_PWM_Stop+0x32>
 80040e4:	2300      	movs	r3, #0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d017      	beq.n	800411a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6a1a      	ldr	r2, [r3, #32]
 80040f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10f      	bne.n	800411a <HAL_TIM_PWM_Stop+0x66>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6a1a      	ldr	r2, [r3, #32]
 8004100:	f240 4344 	movw	r3, #1092	; 0x444
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d107      	bne.n	800411a <HAL_TIM_PWM_Stop+0x66>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004118:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6a1a      	ldr	r2, [r3, #32]
 8004120:	f241 1311 	movw	r3, #4369	; 0x1111
 8004124:	4013      	ands	r3, r2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10f      	bne.n	800414a <HAL_TIM_PWM_Stop+0x96>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6a1a      	ldr	r2, [r3, #32]
 8004130:	f240 4344 	movw	r3, #1092	; 0x444
 8004134:	4013      	ands	r3, r2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d107      	bne.n	800414a <HAL_TIM_PWM_Stop+0x96>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0201 	bic.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d104      	bne.n	800415a <HAL_TIM_PWM_Stop+0xa6>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004158:	e023      	b.n	80041a2 <HAL_TIM_PWM_Stop+0xee>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b04      	cmp	r3, #4
 800415e:	d104      	bne.n	800416a <HAL_TIM_PWM_Stop+0xb6>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004168:	e01b      	b.n	80041a2 <HAL_TIM_PWM_Stop+0xee>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b08      	cmp	r3, #8
 800416e:	d104      	bne.n	800417a <HAL_TIM_PWM_Stop+0xc6>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004178:	e013      	b.n	80041a2 <HAL_TIM_PWM_Stop+0xee>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b0c      	cmp	r3, #12
 800417e:	d104      	bne.n	800418a <HAL_TIM_PWM_Stop+0xd6>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004188:	e00b      	b.n	80041a2 <HAL_TIM_PWM_Stop+0xee>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b10      	cmp	r3, #16
 800418e:	d104      	bne.n	800419a <HAL_TIM_PWM_Stop+0xe6>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004198:	e003      	b.n	80041a2 <HAL_TIM_PWM_Stop+0xee>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40010000 	.word	0x40010000
 80041b0:	40010400 	.word	0x40010400

080041b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e049      	b.n	800425a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fd faee 	bl	80017bc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3304      	adds	r3, #4
 80041f0:	4619      	mov	r1, r3
 80041f2:	4610      	mov	r0, r2
 80041f4:	f000 fd8c 	bl	8004d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d104      	bne.n	8004282 <HAL_TIM_IC_Start_IT+0x1e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800427e:	b2db      	uxtb	r3, r3
 8004280:	e023      	b.n	80042ca <HAL_TIM_IC_Start_IT+0x66>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b04      	cmp	r3, #4
 8004286:	d104      	bne.n	8004292 <HAL_TIM_IC_Start_IT+0x2e>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800428e:	b2db      	uxtb	r3, r3
 8004290:	e01b      	b.n	80042ca <HAL_TIM_IC_Start_IT+0x66>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b08      	cmp	r3, #8
 8004296:	d104      	bne.n	80042a2 <HAL_TIM_IC_Start_IT+0x3e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	e013      	b.n	80042ca <HAL_TIM_IC_Start_IT+0x66>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b0c      	cmp	r3, #12
 80042a6:	d104      	bne.n	80042b2 <HAL_TIM_IC_Start_IT+0x4e>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	e00b      	b.n	80042ca <HAL_TIM_IC_Start_IT+0x66>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b10      	cmp	r3, #16
 80042b6:	d104      	bne.n	80042c2 <HAL_TIM_IC_Start_IT+0x5e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	e003      	b.n	80042ca <HAL_TIM_IC_Start_IT+0x66>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d104      	bne.n	80042dc <HAL_TIM_IC_Start_IT+0x78>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	e013      	b.n	8004304 <HAL_TIM_IC_Start_IT+0xa0>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d104      	bne.n	80042ec <HAL_TIM_IC_Start_IT+0x88>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	e00b      	b.n	8004304 <HAL_TIM_IC_Start_IT+0xa0>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d104      	bne.n	80042fc <HAL_TIM_IC_Start_IT+0x98>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	e003      	b.n	8004304 <HAL_TIM_IC_Start_IT+0xa0>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004302:	b2db      	uxtb	r3, r3
 8004304:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004306:	7bbb      	ldrb	r3, [r7, #14]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d102      	bne.n	8004312 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800430c:	7b7b      	ldrb	r3, [r7, #13]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d001      	beq.n	8004316 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e0e2      	b.n	80044dc <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d104      	bne.n	8004326 <HAL_TIM_IC_Start_IT+0xc2>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004324:	e023      	b.n	800436e <HAL_TIM_IC_Start_IT+0x10a>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b04      	cmp	r3, #4
 800432a:	d104      	bne.n	8004336 <HAL_TIM_IC_Start_IT+0xd2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004334:	e01b      	b.n	800436e <HAL_TIM_IC_Start_IT+0x10a>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b08      	cmp	r3, #8
 800433a:	d104      	bne.n	8004346 <HAL_TIM_IC_Start_IT+0xe2>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004344:	e013      	b.n	800436e <HAL_TIM_IC_Start_IT+0x10a>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b0c      	cmp	r3, #12
 800434a:	d104      	bne.n	8004356 <HAL_TIM_IC_Start_IT+0xf2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004354:	e00b      	b.n	800436e <HAL_TIM_IC_Start_IT+0x10a>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b10      	cmp	r3, #16
 800435a:	d104      	bne.n	8004366 <HAL_TIM_IC_Start_IT+0x102>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004364:	e003      	b.n	800436e <HAL_TIM_IC_Start_IT+0x10a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2202      	movs	r2, #2
 800436a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d104      	bne.n	800437e <HAL_TIM_IC_Start_IT+0x11a>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800437c:	e013      	b.n	80043a6 <HAL_TIM_IC_Start_IT+0x142>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b04      	cmp	r3, #4
 8004382:	d104      	bne.n	800438e <HAL_TIM_IC_Start_IT+0x12a>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800438c:	e00b      	b.n	80043a6 <HAL_TIM_IC_Start_IT+0x142>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b08      	cmp	r3, #8
 8004392:	d104      	bne.n	800439e <HAL_TIM_IC_Start_IT+0x13a>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800439c:	e003      	b.n	80043a6 <HAL_TIM_IC_Start_IT+0x142>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b0c      	cmp	r3, #12
 80043aa:	d841      	bhi.n	8004430 <HAL_TIM_IC_Start_IT+0x1cc>
 80043ac:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <HAL_TIM_IC_Start_IT+0x150>)
 80043ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b2:	bf00      	nop
 80043b4:	080043e9 	.word	0x080043e9
 80043b8:	08004431 	.word	0x08004431
 80043bc:	08004431 	.word	0x08004431
 80043c0:	08004431 	.word	0x08004431
 80043c4:	080043fb 	.word	0x080043fb
 80043c8:	08004431 	.word	0x08004431
 80043cc:	08004431 	.word	0x08004431
 80043d0:	08004431 	.word	0x08004431
 80043d4:	0800440d 	.word	0x0800440d
 80043d8:	08004431 	.word	0x08004431
 80043dc:	08004431 	.word	0x08004431
 80043e0:	08004431 	.word	0x08004431
 80043e4:	0800441f 	.word	0x0800441f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0202 	orr.w	r2, r2, #2
 80043f6:	60da      	str	r2, [r3, #12]
      break;
 80043f8:	e01d      	b.n	8004436 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0204 	orr.w	r2, r2, #4
 8004408:	60da      	str	r2, [r3, #12]
      break;
 800440a:	e014      	b.n	8004436 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0208 	orr.w	r2, r2, #8
 800441a:	60da      	str	r2, [r3, #12]
      break;
 800441c:	e00b      	b.n	8004436 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0210 	orr.w	r2, r2, #16
 800442c:	60da      	str	r2, [r3, #12]
      break;
 800442e:	e002      	b.n	8004436 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
      break;
 8004434:	bf00      	nop
  }

  if (status == HAL_OK)
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d14e      	bne.n	80044da <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2201      	movs	r2, #1
 8004442:	6839      	ldr	r1, [r7, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f001 f925 	bl	8005694 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a25      	ldr	r2, [pc, #148]	; (80044e4 <HAL_TIM_IC_Start_IT+0x280>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d022      	beq.n	800449a <HAL_TIM_IC_Start_IT+0x236>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445c:	d01d      	beq.n	800449a <HAL_TIM_IC_Start_IT+0x236>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a21      	ldr	r2, [pc, #132]	; (80044e8 <HAL_TIM_IC_Start_IT+0x284>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d018      	beq.n	800449a <HAL_TIM_IC_Start_IT+0x236>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1f      	ldr	r2, [pc, #124]	; (80044ec <HAL_TIM_IC_Start_IT+0x288>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <HAL_TIM_IC_Start_IT+0x236>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1e      	ldr	r2, [pc, #120]	; (80044f0 <HAL_TIM_IC_Start_IT+0x28c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00e      	beq.n	800449a <HAL_TIM_IC_Start_IT+0x236>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a1c      	ldr	r2, [pc, #112]	; (80044f4 <HAL_TIM_IC_Start_IT+0x290>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d009      	beq.n	800449a <HAL_TIM_IC_Start_IT+0x236>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1b      	ldr	r2, [pc, #108]	; (80044f8 <HAL_TIM_IC_Start_IT+0x294>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_TIM_IC_Start_IT+0x236>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a19      	ldr	r2, [pc, #100]	; (80044fc <HAL_TIM_IC_Start_IT+0x298>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d115      	bne.n	80044c6 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	4b17      	ldr	r3, [pc, #92]	; (8004500 <HAL_TIM_IC_Start_IT+0x29c>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b06      	cmp	r3, #6
 80044aa:	d015      	beq.n	80044d8 <HAL_TIM_IC_Start_IT+0x274>
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b2:	d011      	beq.n	80044d8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c4:	e008      	b.n	80044d8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0201 	orr.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	e000      	b.n	80044da <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80044da:	7bfb      	ldrb	r3, [r7, #15]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40010000 	.word	0x40010000
 80044e8:	40000400 	.word	0x40000400
 80044ec:	40000800 	.word	0x40000800
 80044f0:	40000c00 	.word	0x40000c00
 80044f4:	40010400 	.word	0x40010400
 80044f8:	40014000 	.word	0x40014000
 80044fc:	40001800 	.word	0x40001800
 8004500:	00010007 	.word	0x00010007

08004504 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b02      	cmp	r3, #2
 8004518:	d122      	bne.n	8004560 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b02      	cmp	r3, #2
 8004526:	d11b      	bne.n	8004560 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f06f 0202 	mvn.w	r2, #2
 8004530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fc f86a 	bl	8000620 <HAL_TIM_IC_CaptureCallback>
 800454c:	e005      	b.n	800455a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fbc0 	bl	8004cd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 fbc7 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b04      	cmp	r3, #4
 800456c:	d122      	bne.n	80045b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b04      	cmp	r3, #4
 800457a:	d11b      	bne.n	80045b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f06f 0204 	mvn.w	r2, #4
 8004584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2202      	movs	r2, #2
 800458a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fc f840 	bl	8000620 <HAL_TIM_IC_CaptureCallback>
 80045a0:	e005      	b.n	80045ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fb96 	bl	8004cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fb9d 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d122      	bne.n	8004608 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d11b      	bne.n	8004608 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0208 	mvn.w	r2, #8
 80045d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2204      	movs	r2, #4
 80045de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fc f816 	bl	8000620 <HAL_TIM_IC_CaptureCallback>
 80045f4:	e005      	b.n	8004602 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fb6c 	bl	8004cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 fb73 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0310 	and.w	r3, r3, #16
 8004612:	2b10      	cmp	r3, #16
 8004614:	d122      	bne.n	800465c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b10      	cmp	r3, #16
 8004622:	d11b      	bne.n	800465c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0210 	mvn.w	r2, #16
 800462c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2208      	movs	r2, #8
 8004632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7fb ffec 	bl	8000620 <HAL_TIM_IC_CaptureCallback>
 8004648:	e005      	b.n	8004656 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fb42 	bl	8004cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fb49 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b01      	cmp	r3, #1
 8004668:	d10e      	bne.n	8004688 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b01      	cmp	r3, #1
 8004676:	d107      	bne.n	8004688 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0201 	mvn.w	r2, #1
 8004680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fb1c 	bl	8004cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004692:	2b80      	cmp	r3, #128	; 0x80
 8004694:	d10e      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a0:	2b80      	cmp	r3, #128	; 0x80
 80046a2:	d107      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f001 f8ae 	bl	8005810 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c2:	d10e      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ce:	2b80      	cmp	r3, #128	; 0x80
 80046d0:	d107      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f001 f8a1 	bl	8005824 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d10e      	bne.n	800470e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d107      	bne.n	800470e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 faf7 	bl	8004cfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b20      	cmp	r3, #32
 800471a:	d10e      	bne.n	800473a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f003 0320 	and.w	r3, r3, #32
 8004726:	2b20      	cmp	r3, #32
 8004728:	d107      	bne.n	800473a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f06f 0220 	mvn.w	r2, #32
 8004732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f001 f861 	bl	80057fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b086      	sub	sp, #24
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_TIM_IC_ConfigChannel+0x1e>
 800475c:	2302      	movs	r3, #2
 800475e:	e088      	b.n	8004872 <HAL_TIM_IC_ConfigChannel+0x130>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d11b      	bne.n	80047a6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800477e:	f000 fdc5 	bl	800530c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699a      	ldr	r2, [r3, #24]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 020c 	bic.w	r2, r2, #12
 8004790:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6999      	ldr	r1, [r3, #24]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	619a      	str	r2, [r3, #24]
 80047a4:	e060      	b.n	8004868 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d11c      	bne.n	80047e6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80047bc:	f000 fe49 	bl	8005452 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80047ce:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6999      	ldr	r1, [r3, #24]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	021a      	lsls	r2, r3, #8
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	619a      	str	r2, [r3, #24]
 80047e4:	e040      	b.n	8004868 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d11b      	bne.n	8004824 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80047fc:	f000 fe96 	bl	800552c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	69da      	ldr	r2, [r3, #28]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 020c 	bic.w	r2, r2, #12
 800480e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69d9      	ldr	r1, [r3, #28]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	61da      	str	r2, [r3, #28]
 8004822:	e021      	b.n	8004868 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b0c      	cmp	r3, #12
 8004828:	d11c      	bne.n	8004864 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800483a:	f000 feb3 	bl	80055a4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69da      	ldr	r2, [r3, #28]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800484c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69d9      	ldr	r1, [r3, #28]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	021a      	lsls	r2, r3, #8
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	61da      	str	r2, [r3, #28]
 8004862:	e001      	b.n	8004868 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004870:	7dfb      	ldrb	r3, [r7, #23]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004892:	2b01      	cmp	r3, #1
 8004894:	d101      	bne.n	800489a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004896:	2302      	movs	r3, #2
 8004898:	e0ff      	b.n	8004a9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b14      	cmp	r3, #20
 80048a6:	f200 80f0 	bhi.w	8004a8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80048aa:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b0:	08004905 	.word	0x08004905
 80048b4:	08004a8b 	.word	0x08004a8b
 80048b8:	08004a8b 	.word	0x08004a8b
 80048bc:	08004a8b 	.word	0x08004a8b
 80048c0:	08004945 	.word	0x08004945
 80048c4:	08004a8b 	.word	0x08004a8b
 80048c8:	08004a8b 	.word	0x08004a8b
 80048cc:	08004a8b 	.word	0x08004a8b
 80048d0:	08004987 	.word	0x08004987
 80048d4:	08004a8b 	.word	0x08004a8b
 80048d8:	08004a8b 	.word	0x08004a8b
 80048dc:	08004a8b 	.word	0x08004a8b
 80048e0:	080049c7 	.word	0x080049c7
 80048e4:	08004a8b 	.word	0x08004a8b
 80048e8:	08004a8b 	.word	0x08004a8b
 80048ec:	08004a8b 	.word	0x08004a8b
 80048f0:	08004a09 	.word	0x08004a09
 80048f4:	08004a8b 	.word	0x08004a8b
 80048f8:	08004a8b 	.word	0x08004a8b
 80048fc:	08004a8b 	.word	0x08004a8b
 8004900:	08004a49 	.word	0x08004a49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 faa0 	bl	8004e50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0208 	orr.w	r2, r2, #8
 800491e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699a      	ldr	r2, [r3, #24]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0204 	bic.w	r2, r2, #4
 800492e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6999      	ldr	r1, [r3, #24]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	619a      	str	r2, [r3, #24]
      break;
 8004942:	e0a5      	b.n	8004a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 faf2 	bl	8004f34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800495e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699a      	ldr	r2, [r3, #24]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800496e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6999      	ldr	r1, [r3, #24]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	021a      	lsls	r2, r3, #8
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	619a      	str	r2, [r3, #24]
      break;
 8004984:	e084      	b.n	8004a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fb49 	bl	8005024 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69da      	ldr	r2, [r3, #28]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0208 	orr.w	r2, r2, #8
 80049a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69da      	ldr	r2, [r3, #28]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0204 	bic.w	r2, r2, #4
 80049b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69d9      	ldr	r1, [r3, #28]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	61da      	str	r2, [r3, #28]
      break;
 80049c4:	e064      	b.n	8004a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fb9f 	bl	8005110 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69da      	ldr	r2, [r3, #28]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69da      	ldr	r2, [r3, #28]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69d9      	ldr	r1, [r3, #28]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	021a      	lsls	r2, r3, #8
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	61da      	str	r2, [r3, #28]
      break;
 8004a06:	e043      	b.n	8004a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fbd6 	bl	80051c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0208 	orr.w	r2, r2, #8
 8004a22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0204 	bic.w	r2, r2, #4
 8004a32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a46:	e023      	b.n	8004a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fc08 	bl	8005264 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	021a      	lsls	r2, r3, #8
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a88:	e002      	b.n	8004a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop

08004aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_TIM_ConfigClockSource+0x1c>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e0b4      	b.n	8004c2a <HAL_TIM_ConfigClockSource+0x186>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	4b56      	ldr	r3, [pc, #344]	; (8004c34 <HAL_TIM_ConfigClockSource+0x190>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af8:	d03e      	beq.n	8004b78 <HAL_TIM_ConfigClockSource+0xd4>
 8004afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afe:	f200 8087 	bhi.w	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b06:	f000 8086 	beq.w	8004c16 <HAL_TIM_ConfigClockSource+0x172>
 8004b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0e:	d87f      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b10:	2b70      	cmp	r3, #112	; 0x70
 8004b12:	d01a      	beq.n	8004b4a <HAL_TIM_ConfigClockSource+0xa6>
 8004b14:	2b70      	cmp	r3, #112	; 0x70
 8004b16:	d87b      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b18:	2b60      	cmp	r3, #96	; 0x60
 8004b1a:	d050      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0x11a>
 8004b1c:	2b60      	cmp	r3, #96	; 0x60
 8004b1e:	d877      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b20:	2b50      	cmp	r3, #80	; 0x50
 8004b22:	d03c      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0xfa>
 8004b24:	2b50      	cmp	r3, #80	; 0x50
 8004b26:	d873      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b28:	2b40      	cmp	r3, #64	; 0x40
 8004b2a:	d058      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0x13a>
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	d86f      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b30:	2b30      	cmp	r3, #48	; 0x30
 8004b32:	d064      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b34:	2b30      	cmp	r3, #48	; 0x30
 8004b36:	d86b      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d060      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d867      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d05c      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d05a      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b48:	e062      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b5a:	f000 fd7b 	bl	8005654 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	609a      	str	r2, [r3, #8]
      break;
 8004b76:	e04f      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b88:	f000 fd64 	bl	8005654 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b9a:	609a      	str	r2, [r3, #8]
      break;
 8004b9c:	e03c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004baa:	461a      	mov	r2, r3
 8004bac:	f000 fc22 	bl	80053f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2150      	movs	r1, #80	; 0x50
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fd31 	bl	800561e <TIM_ITRx_SetConfig>
      break;
 8004bbc:	e02c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f000 fc7e 	bl	80054cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2160      	movs	r1, #96	; 0x60
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fd21 	bl	800561e <TIM_ITRx_SetConfig>
      break;
 8004bdc:	e01c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bea:	461a      	mov	r2, r3
 8004bec:	f000 fc02 	bl	80053f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2140      	movs	r1, #64	; 0x40
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fd11 	bl	800561e <TIM_ITRx_SetConfig>
      break;
 8004bfc:	e00c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f000 fd08 	bl	800561e <TIM_ITRx_SetConfig>
      break;
 8004c0e:	e003      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
      break;
 8004c14:	e000      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	fffeff88 	.word	0xfffeff88

08004c38 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b0c      	cmp	r3, #12
 8004c4a:	d831      	bhi.n	8004cb0 <HAL_TIM_ReadCapturedValue+0x78>
 8004c4c:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c52:	bf00      	nop
 8004c54:	08004c89 	.word	0x08004c89
 8004c58:	08004cb1 	.word	0x08004cb1
 8004c5c:	08004cb1 	.word	0x08004cb1
 8004c60:	08004cb1 	.word	0x08004cb1
 8004c64:	08004c93 	.word	0x08004c93
 8004c68:	08004cb1 	.word	0x08004cb1
 8004c6c:	08004cb1 	.word	0x08004cb1
 8004c70:	08004cb1 	.word	0x08004cb1
 8004c74:	08004c9d 	.word	0x08004c9d
 8004c78:	08004cb1 	.word	0x08004cb1
 8004c7c:	08004cb1 	.word	0x08004cb1
 8004c80:	08004cb1 	.word	0x08004cb1
 8004c84:	08004ca7 	.word	0x08004ca7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8e:	60fb      	str	r3, [r7, #12]

      break;
 8004c90:	e00f      	b.n	8004cb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	60fb      	str	r3, [r7, #12]

      break;
 8004c9a:	e00a      	b.n	8004cb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca2:	60fb      	str	r3, [r7, #12]

      break;
 8004ca4:	e005      	b.n	8004cb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	60fb      	str	r3, [r7, #12]

      break;
 8004cae:	e000      	b.n	8004cb2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004cb0:	bf00      	nop
  }

  return tmpreg;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a40      	ldr	r2, [pc, #256]	; (8004e24 <TIM_Base_SetConfig+0x114>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d013      	beq.n	8004d50 <TIM_Base_SetConfig+0x40>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2e:	d00f      	beq.n	8004d50 <TIM_Base_SetConfig+0x40>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a3d      	ldr	r2, [pc, #244]	; (8004e28 <TIM_Base_SetConfig+0x118>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00b      	beq.n	8004d50 <TIM_Base_SetConfig+0x40>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a3c      	ldr	r2, [pc, #240]	; (8004e2c <TIM_Base_SetConfig+0x11c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d007      	beq.n	8004d50 <TIM_Base_SetConfig+0x40>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a3b      	ldr	r2, [pc, #236]	; (8004e30 <TIM_Base_SetConfig+0x120>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d003      	beq.n	8004d50 <TIM_Base_SetConfig+0x40>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a3a      	ldr	r2, [pc, #232]	; (8004e34 <TIM_Base_SetConfig+0x124>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d108      	bne.n	8004d62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a2f      	ldr	r2, [pc, #188]	; (8004e24 <TIM_Base_SetConfig+0x114>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d02b      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d70:	d027      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a2c      	ldr	r2, [pc, #176]	; (8004e28 <TIM_Base_SetConfig+0x118>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d023      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a2b      	ldr	r2, [pc, #172]	; (8004e2c <TIM_Base_SetConfig+0x11c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d01f      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a2a      	ldr	r2, [pc, #168]	; (8004e30 <TIM_Base_SetConfig+0x120>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d01b      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a29      	ldr	r2, [pc, #164]	; (8004e34 <TIM_Base_SetConfig+0x124>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d017      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a28      	ldr	r2, [pc, #160]	; (8004e38 <TIM_Base_SetConfig+0x128>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d013      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a27      	ldr	r2, [pc, #156]	; (8004e3c <TIM_Base_SetConfig+0x12c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00f      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a26      	ldr	r2, [pc, #152]	; (8004e40 <TIM_Base_SetConfig+0x130>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00b      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a25      	ldr	r2, [pc, #148]	; (8004e44 <TIM_Base_SetConfig+0x134>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d007      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a24      	ldr	r2, [pc, #144]	; (8004e48 <TIM_Base_SetConfig+0x138>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d003      	beq.n	8004dc2 <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a23      	ldr	r2, [pc, #140]	; (8004e4c <TIM_Base_SetConfig+0x13c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d108      	bne.n	8004dd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a0a      	ldr	r2, [pc, #40]	; (8004e24 <TIM_Base_SetConfig+0x114>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d003      	beq.n	8004e08 <TIM_Base_SetConfig+0xf8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a0c      	ldr	r2, [pc, #48]	; (8004e34 <TIM_Base_SetConfig+0x124>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d103      	bne.n	8004e10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	615a      	str	r2, [r3, #20]
}
 8004e16:	bf00      	nop
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40010000 	.word	0x40010000
 8004e28:	40000400 	.word	0x40000400
 8004e2c:	40000800 	.word	0x40000800
 8004e30:	40000c00 	.word	0x40000c00
 8004e34:	40010400 	.word	0x40010400
 8004e38:	40014000 	.word	0x40014000
 8004e3c:	40014400 	.word	0x40014400
 8004e40:	40014800 	.word	0x40014800
 8004e44:	40001800 	.word	0x40001800
 8004e48:	40001c00 	.word	0x40001c00
 8004e4c:	40002000 	.word	0x40002000

08004e50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f023 0201 	bic.w	r2, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4b2b      	ldr	r3, [pc, #172]	; (8004f28 <TIM_OC1_SetConfig+0xd8>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0303 	bic.w	r3, r3, #3
 8004e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f023 0302 	bic.w	r3, r3, #2
 8004e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a21      	ldr	r2, [pc, #132]	; (8004f2c <TIM_OC1_SetConfig+0xdc>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <TIM_OC1_SetConfig+0x64>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a20      	ldr	r2, [pc, #128]	; (8004f30 <TIM_OC1_SetConfig+0xe0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d10c      	bne.n	8004ece <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f023 0308 	bic.w	r3, r3, #8
 8004eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f023 0304 	bic.w	r3, r3, #4
 8004ecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a16      	ldr	r2, [pc, #88]	; (8004f2c <TIM_OC1_SetConfig+0xdc>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d003      	beq.n	8004ede <TIM_OC1_SetConfig+0x8e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a15      	ldr	r2, [pc, #84]	; (8004f30 <TIM_OC1_SetConfig+0xe0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d111      	bne.n	8004f02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	621a      	str	r2, [r3, #32]
}
 8004f1c:	bf00      	nop
 8004f1e:	371c      	adds	r7, #28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	fffeff8f 	.word	0xfffeff8f
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40010400 	.word	0x40010400

08004f34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	f023 0210 	bic.w	r2, r3, #16
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4b2e      	ldr	r3, [pc, #184]	; (8005018 <TIM_OC2_SetConfig+0xe4>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	021b      	lsls	r3, r3, #8
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f023 0320 	bic.w	r3, r3, #32
 8004f7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a23      	ldr	r2, [pc, #140]	; (800501c <TIM_OC2_SetConfig+0xe8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d003      	beq.n	8004f9c <TIM_OC2_SetConfig+0x68>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a22      	ldr	r2, [pc, #136]	; (8005020 <TIM_OC2_SetConfig+0xec>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d10d      	bne.n	8004fb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a18      	ldr	r2, [pc, #96]	; (800501c <TIM_OC2_SetConfig+0xe8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d003      	beq.n	8004fc8 <TIM_OC2_SetConfig+0x94>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a17      	ldr	r2, [pc, #92]	; (8005020 <TIM_OC2_SetConfig+0xec>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d113      	bne.n	8004ff0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	621a      	str	r2, [r3, #32]
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	feff8fff 	.word	0xfeff8fff
 800501c:	40010000 	.word	0x40010000
 8005020:	40010400 	.word	0x40010400

08005024 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4b2d      	ldr	r3, [pc, #180]	; (8005104 <TIM_OC3_SetConfig+0xe0>)
 8005050:	4013      	ands	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0303 	bic.w	r3, r3, #3
 800505a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800506c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	021b      	lsls	r3, r3, #8
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a22      	ldr	r2, [pc, #136]	; (8005108 <TIM_OC3_SetConfig+0xe4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d003      	beq.n	800508a <TIM_OC3_SetConfig+0x66>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a21      	ldr	r2, [pc, #132]	; (800510c <TIM_OC3_SetConfig+0xe8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d10d      	bne.n	80050a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005090:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	021b      	lsls	r3, r3, #8
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a17      	ldr	r2, [pc, #92]	; (8005108 <TIM_OC3_SetConfig+0xe4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d003      	beq.n	80050b6 <TIM_OC3_SetConfig+0x92>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a16      	ldr	r2, [pc, #88]	; (800510c <TIM_OC3_SetConfig+0xe8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d113      	bne.n	80050de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	621a      	str	r2, [r3, #32]
}
 80050f8:	bf00      	nop
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	fffeff8f 	.word	0xfffeff8f
 8005108:	40010000 	.word	0x40010000
 800510c:	40010400 	.word	0x40010400

08005110 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4b1e      	ldr	r3, [pc, #120]	; (80051b4 <TIM_OC4_SetConfig+0xa4>)
 800513c:	4013      	ands	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	021b      	lsls	r3, r3, #8
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4313      	orrs	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800515a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	031b      	lsls	r3, r3, #12
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a13      	ldr	r2, [pc, #76]	; (80051b8 <TIM_OC4_SetConfig+0xa8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d003      	beq.n	8005178 <TIM_OC4_SetConfig+0x68>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a12      	ldr	r2, [pc, #72]	; (80051bc <TIM_OC4_SetConfig+0xac>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d109      	bne.n	800518c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800517e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	019b      	lsls	r3, r3, #6
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	feff8fff 	.word	0xfeff8fff
 80051b8:	40010000 	.word	0x40010000
 80051bc:	40010400 	.word	0x40010400

080051c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4b1b      	ldr	r3, [pc, #108]	; (8005258 <TIM_OC5_SetConfig+0x98>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005200:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	041b      	lsls	r3, r3, #16
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a12      	ldr	r2, [pc, #72]	; (800525c <TIM_OC5_SetConfig+0x9c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d003      	beq.n	800521e <TIM_OC5_SetConfig+0x5e>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a11      	ldr	r2, [pc, #68]	; (8005260 <TIM_OC5_SetConfig+0xa0>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d109      	bne.n	8005232 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005224:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	021b      	lsls	r3, r3, #8
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	621a      	str	r2, [r3, #32]
}
 800524c:	bf00      	nop
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	fffeff8f 	.word	0xfffeff8f
 800525c:	40010000 	.word	0x40010000
 8005260:	40010400 	.word	0x40010400

08005264 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4b1c      	ldr	r3, [pc, #112]	; (8005300 <TIM_OC6_SetConfig+0x9c>)
 8005290:	4013      	ands	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	021b      	lsls	r3, r3, #8
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4313      	orrs	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	051b      	lsls	r3, r3, #20
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a13      	ldr	r2, [pc, #76]	; (8005304 <TIM_OC6_SetConfig+0xa0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d003      	beq.n	80052c4 <TIM_OC6_SetConfig+0x60>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a12      	ldr	r2, [pc, #72]	; (8005308 <TIM_OC6_SetConfig+0xa4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d109      	bne.n	80052d8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	029b      	lsls	r3, r3, #10
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	621a      	str	r2, [r3, #32]
}
 80052f2:	bf00      	nop
 80052f4:	371c      	adds	r7, #28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	feff8fff 	.word	0xfeff8fff
 8005304:	40010000 	.word	0x40010000
 8005308:	40010400 	.word	0x40010400

0800530c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	f023 0201 	bic.w	r2, r3, #1
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4a28      	ldr	r2, [pc, #160]	; (80053d8 <TIM_TI1_SetConfig+0xcc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d01b      	beq.n	8005372 <TIM_TI1_SetConfig+0x66>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005340:	d017      	beq.n	8005372 <TIM_TI1_SetConfig+0x66>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4a25      	ldr	r2, [pc, #148]	; (80053dc <TIM_TI1_SetConfig+0xd0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d013      	beq.n	8005372 <TIM_TI1_SetConfig+0x66>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4a24      	ldr	r2, [pc, #144]	; (80053e0 <TIM_TI1_SetConfig+0xd4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00f      	beq.n	8005372 <TIM_TI1_SetConfig+0x66>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4a23      	ldr	r2, [pc, #140]	; (80053e4 <TIM_TI1_SetConfig+0xd8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00b      	beq.n	8005372 <TIM_TI1_SetConfig+0x66>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4a22      	ldr	r2, [pc, #136]	; (80053e8 <TIM_TI1_SetConfig+0xdc>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d007      	beq.n	8005372 <TIM_TI1_SetConfig+0x66>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4a21      	ldr	r2, [pc, #132]	; (80053ec <TIM_TI1_SetConfig+0xe0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d003      	beq.n	8005372 <TIM_TI1_SetConfig+0x66>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4a20      	ldr	r2, [pc, #128]	; (80053f0 <TIM_TI1_SetConfig+0xe4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d101      	bne.n	8005376 <TIM_TI1_SetConfig+0x6a>
 8005372:	2301      	movs	r3, #1
 8005374:	e000      	b.n	8005378 <TIM_TI1_SetConfig+0x6c>
 8005376:	2300      	movs	r3, #0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d008      	beq.n	800538e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f023 0303 	bic.w	r3, r3, #3
 8005382:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	e003      	b.n	8005396 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f043 0301 	orr.w	r3, r3, #1
 8005394:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800539c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f023 030a 	bic.w	r3, r3, #10
 80053b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f003 030a 	and.w	r3, r3, #10
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	621a      	str	r2, [r3, #32]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40010400 	.word	0x40010400
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40001800 	.word	0x40001800

080053f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f023 0201 	bic.w	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800541e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f023 030a 	bic.w	r3, r3, #10
 8005430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005452:	b480      	push	{r7}
 8005454:	b087      	sub	sp, #28
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	607a      	str	r2, [r7, #4]
 800545e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f023 0210 	bic.w	r2, r3, #16
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	021b      	lsls	r3, r3, #8
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4313      	orrs	r3, r2
 8005488:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005490:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	031b      	lsls	r3, r3, #12
 8005496:	b29b      	uxth	r3, r3
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	621a      	str	r2, [r3, #32]
}
 80054c0:	bf00      	nop
 80054c2:	371c      	adds	r7, #28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	f023 0210 	bic.w	r2, r3, #16
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	031b      	lsls	r3, r3, #12
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005508:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	621a      	str	r2, [r3, #32]
}
 8005520:	bf00      	nop
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
 8005538:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f023 0303 	bic.w	r3, r3, #3
 8005558:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005568:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	b2db      	uxtb	r3, r3
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	4313      	orrs	r3, r2
 8005574:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800557c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	021b      	lsls	r3, r3, #8
 8005582:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	621a      	str	r2, [r3, #32]
}
 8005598:	bf00      	nop
 800559a:	371c      	adds	r7, #28
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	021b      	lsls	r3, r3, #8
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055e2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	031b      	lsls	r3, r3, #12
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80055f6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	031b      	lsls	r3, r3, #12
 80055fc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	4313      	orrs	r3, r2
 8005604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	621a      	str	r2, [r3, #32]
}
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005634:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	f043 0307 	orr.w	r3, r3, #7
 8005640:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	609a      	str	r2, [r3, #8]
}
 8005648:	bf00      	nop
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800566e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	021a      	lsls	r2, r3, #8
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	431a      	orrs	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4313      	orrs	r3, r2
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	609a      	str	r2, [r3, #8]
}
 8005688:	bf00      	nop
 800568a:	371c      	adds	r7, #28
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f003 031f 	and.w	r3, r3, #31
 80056a6:	2201      	movs	r2, #1
 80056a8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a1a      	ldr	r2, [r3, #32]
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	43db      	mvns	r3, r3
 80056b6:	401a      	ands	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a1a      	ldr	r2, [r3, #32]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f003 031f 	and.w	r3, r3, #31
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	fa01 f303 	lsl.w	r3, r1, r3
 80056cc:	431a      	orrs	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	621a      	str	r2, [r3, #32]
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
	...

080056e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056f4:	2302      	movs	r3, #2
 80056f6:	e06d      	b.n	80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a30      	ldr	r2, [pc, #192]	; (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d004      	beq.n	800572c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a2f      	ldr	r2, [pc, #188]	; (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d108      	bne.n	800573e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005732:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005744:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a20      	ldr	r2, [pc, #128]	; (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d022      	beq.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576a:	d01d      	beq.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1d      	ldr	r2, [pc, #116]	; (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d018      	beq.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a1c      	ldr	r2, [pc, #112]	; (80057ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d013      	beq.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1a      	ldr	r2, [pc, #104]	; (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00e      	beq.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a15      	ldr	r2, [pc, #84]	; (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d009      	beq.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a16      	ldr	r2, [pc, #88]	; (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d004      	beq.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a15      	ldr	r2, [pc, #84]	; (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d10c      	bne.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	40010000 	.word	0x40010000
 80057e4:	40010400 	.word	0x40010400
 80057e8:	40000400 	.word	0x40000400
 80057ec:	40000800 	.word	0x40000800
 80057f0:	40000c00 	.word	0x40000c00
 80057f4:	40014000 	.word	0x40014000
 80057f8:	40001800 	.word	0x40001800

080057fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e040      	b.n	80058cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fc f8c4 	bl	80019e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2224      	movs	r2, #36	; 0x24
 8005864:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0201 	bic.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fc06 	bl	8006088 <UART_SetConfig>
 800587c:	4603      	mov	r3, r0
 800587e:	2b01      	cmp	r3, #1
 8005880:	d101      	bne.n	8005886 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e022      	b.n	80058cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fe5e 	bl	8006550 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f042 0201 	orr.w	r2, r2, #1
 80058c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fee5 	bl	8006694 <UART_CheckIdleState>
 80058ca:	4603      	mov	r3, r0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08a      	sub	sp, #40	; 0x28
 80058d8:	af02      	add	r7, sp, #8
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	4613      	mov	r3, r2
 80058e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058e8:	2b20      	cmp	r3, #32
 80058ea:	d171      	bne.n	80059d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <HAL_UART_Transmit+0x24>
 80058f2:	88fb      	ldrh	r3, [r7, #6]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e06a      	b.n	80059d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2221      	movs	r2, #33	; 0x21
 8005908:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800590a:	f7fc fabb 	bl	8001e84 <HAL_GetTick>
 800590e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	88fa      	ldrh	r2, [r7, #6]
 8005914:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	88fa      	ldrh	r2, [r7, #6]
 800591c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005928:	d108      	bne.n	800593c <HAL_UART_Transmit+0x68>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d104      	bne.n	800593c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005932:	2300      	movs	r3, #0
 8005934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	61bb      	str	r3, [r7, #24]
 800593a:	e003      	b.n	8005944 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005940:	2300      	movs	r3, #0
 8005942:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005944:	e02c      	b.n	80059a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2200      	movs	r2, #0
 800594e:	2180      	movs	r1, #128	; 0x80
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 feec 	bl	800672e <UART_WaitOnFlagUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e038      	b.n	80059d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10b      	bne.n	800597e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005974:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	3302      	adds	r3, #2
 800597a:	61bb      	str	r3, [r7, #24]
 800597c:	e007      	b.n	800598e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	781a      	ldrb	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	3301      	adds	r3, #1
 800598c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005994:	b29b      	uxth	r3, r3
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1cc      	bne.n	8005946 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	2200      	movs	r2, #0
 80059b4:	2140      	movs	r1, #64	; 0x40
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 feb9 	bl	800672e <UART_WaitOnFlagUntilTimeout>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e005      	b.n	80059d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2220      	movs	r2, #32
 80059ca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	e000      	b.n	80059d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80059d0:	2302      	movs	r3, #2
  }
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3720      	adds	r7, #32
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b08a      	sub	sp, #40	; 0x28
 80059de:	af00      	add	r7, sp, #0
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	4613      	mov	r3, r2
 80059e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ee:	2b20      	cmp	r3, #32
 80059f0:	d132      	bne.n	8005a58 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <HAL_UART_Receive_IT+0x24>
 80059f8:	88fb      	ldrh	r3, [r7, #6]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e02b      	b.n	8005a5a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d018      	beq.n	8005a48 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	613b      	str	r3, [r7, #16]
   return(result);
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	461a      	mov	r2, r3
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	623b      	str	r3, [r7, #32]
 8005a36:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	69f9      	ldr	r1, [r7, #28]
 8005a3a:	6a3a      	ldr	r2, [r7, #32]
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e6      	bne.n	8005a16 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a48:	88fb      	ldrh	r3, [r7, #6]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 ff34 	bl	80068bc <UART_Start_Receive_IT>
 8005a54:	4603      	mov	r3, r0
 8005a56:	e000      	b.n	8005a5a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005a58:	2302      	movs	r3, #2
  }
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3728      	adds	r7, #40	; 0x28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b0ba      	sub	sp, #232	; 0xe8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005a8e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a92:	4013      	ands	r3, r2
 8005a94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005a98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d115      	bne.n	8005acc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa4:	f003 0320 	and.w	r3, r3, #32
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00f      	beq.n	8005acc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab0:	f003 0320 	and.w	r3, r3, #32
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d009      	beq.n	8005acc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 82ac 	beq.w	800601a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	4798      	blx	r3
      }
      return;
 8005aca:	e2a6      	b.n	800601a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005acc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 8117 	beq.w	8005d04 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ae2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005ae6:	4b85      	ldr	r3, [pc, #532]	; (8005cfc <HAL_UART_IRQHandler+0x298>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 810a 	beq.w	8005d04 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d011      	beq.n	8005b20 <HAL_UART_IRQHandler+0xbc>
 8005afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00b      	beq.n	8005b20 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b16:	f043 0201 	orr.w	r2, r3, #1
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d011      	beq.n	8005b50 <HAL_UART_IRQHandler+0xec>
 8005b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00b      	beq.n	8005b50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b46:	f043 0204 	orr.w	r2, r3, #4
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d011      	beq.n	8005b80 <HAL_UART_IRQHandler+0x11c>
 8005b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00b      	beq.n	8005b80 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2204      	movs	r2, #4
 8005b6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b76:	f043 0202 	orr.w	r2, r3, #2
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b84:	f003 0308 	and.w	r3, r3, #8
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d017      	beq.n	8005bbc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b90:	f003 0320 	and.w	r3, r3, #32
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d105      	bne.n	8005ba4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b9c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00b      	beq.n	8005bbc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2208      	movs	r2, #8
 8005baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bb2:	f043 0208 	orr.w	r2, r3, #8
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d012      	beq.n	8005bee <HAL_UART_IRQHandler+0x18a>
 8005bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00c      	beq.n	8005bee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005be4:	f043 0220 	orr.w	r2, r3, #32
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 8212 	beq.w	800601e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00d      	beq.n	8005c22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c0a:	f003 0320 	and.w	r3, r3, #32
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c36:	2b40      	cmp	r3, #64	; 0x40
 8005c38:	d005      	beq.n	8005c46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d04f      	beq.n	8005ce6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fefe 	bl	8006a48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c56:	2b40      	cmp	r3, #64	; 0x40
 8005c58:	d141      	bne.n	8005cde <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3308      	adds	r3, #8
 8005c60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3308      	adds	r3, #8
 8005c82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c96:	e841 2300 	strex	r3, r2, [r1]
 8005c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1d9      	bne.n	8005c5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d013      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cb2:	4a13      	ldr	r2, [pc, #76]	; (8005d00 <HAL_UART_IRQHandler+0x29c>)
 8005cb4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fc fa93 	bl	80021e6 <HAL_DMA_Abort_IT>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d017      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd4:	e00f      	b.n	8005cf6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f9b6 	bl	8006048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cdc:	e00b      	b.n	8005cf6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f9b2 	bl	8006048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce4:	e007      	b.n	8005cf6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f9ae 	bl	8006048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005cf4:	e193      	b.n	800601e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf6:	bf00      	nop
    return;
 8005cf8:	e191      	b.n	800601e <HAL_UART_IRQHandler+0x5ba>
 8005cfa:	bf00      	nop
 8005cfc:	04000120 	.word	0x04000120
 8005d00:	08006b11 	.word	0x08006b11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	f040 814c 	bne.w	8005fa6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d12:	f003 0310 	and.w	r3, r3, #16
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 8145 	beq.w	8005fa6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d20:	f003 0310 	and.w	r3, r3, #16
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 813e 	beq.w	8005fa6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2210      	movs	r2, #16
 8005d30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3c:	2b40      	cmp	r3, #64	; 0x40
 8005d3e:	f040 80b6 	bne.w	8005eae <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 8165 	beq.w	8006022 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d62:	429a      	cmp	r2, r3
 8005d64:	f080 815d 	bcs.w	8006022 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7c:	f000 8086 	beq.w	8005e8c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005daa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005dae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005db6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1da      	bne.n	8005d80 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3308      	adds	r3, #8
 8005dd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd4:	e853 3f00 	ldrex	r3, [r3]
 8005dd8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ddc:	f023 0301 	bic.w	r3, r3, #1
 8005de0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3308      	adds	r3, #8
 8005dea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005dee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005df2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005df6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005dfa:	e841 2300 	strex	r3, r2, [r1]
 8005dfe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1e1      	bne.n	8005dca <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3308      	adds	r3, #8
 8005e26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e32:	e841 2300 	strex	r3, r2, [r1]
 8005e36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1e3      	bne.n	8005e06 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e5c:	f023 0310 	bic.w	r3, r3, #16
 8005e60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e70:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e76:	e841 2300 	strex	r3, r2, [r1]
 8005e7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1e4      	bne.n	8005e4c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fc f93d 	bl	8002106 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f8d8 	bl	800605c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005eac:	e0b9      	b.n	8006022 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 80ab 	beq.w	8006026 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 80a6 	beq.w	8006026 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee2:	e853 3f00 	ldrex	r3, [r3]
 8005ee6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005efc:	647b      	str	r3, [r7, #68]	; 0x44
 8005efe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f04:	e841 2300 	strex	r3, r2, [r1]
 8005f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e4      	bne.n	8005eda <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3308      	adds	r3, #8
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	623b      	str	r3, [r7, #32]
   return(result);
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	f023 0301 	bic.w	r3, r3, #1
 8005f26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3308      	adds	r3, #8
 8005f30:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f34:	633a      	str	r2, [r7, #48]	; 0x30
 8005f36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f3c:	e841 2300 	strex	r3, r2, [r1]
 8005f40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e3      	bne.n	8005f10 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f023 0310 	bic.w	r3, r3, #16
 8005f70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f7e:	61fb      	str	r3, [r7, #28]
 8005f80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f82:	69b9      	ldr	r1, [r7, #24]
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	e841 2300 	strex	r3, r2, [r1]
 8005f8a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1e4      	bne.n	8005f5c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2202      	movs	r2, #2
 8005f96:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f85c 	bl	800605c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fa4:	e03f      	b.n	8006026 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00e      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x56c>
 8005fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d008      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005fc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f853 	bl	8006074 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fce:	e02d      	b.n	800602c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00e      	beq.n	8005ffa <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d008      	beq.n	8005ffa <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01c      	beq.n	800602a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	4798      	blx	r3
    }
    return;
 8005ff8:	e017      	b.n	800602a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	d012      	beq.n	800602c <HAL_UART_IRQHandler+0x5c8>
 8006006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800600a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00c      	beq.n	800602c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fd92 	bl	8006b3c <UART_EndTransmit_IT>
    return;
 8006018:	e008      	b.n	800602c <HAL_UART_IRQHandler+0x5c8>
      return;
 800601a:	bf00      	nop
 800601c:	e006      	b.n	800602c <HAL_UART_IRQHandler+0x5c8>
    return;
 800601e:	bf00      	nop
 8006020:	e004      	b.n	800602c <HAL_UART_IRQHandler+0x5c8>
      return;
 8006022:	bf00      	nop
 8006024:	e002      	b.n	800602c <HAL_UART_IRQHandler+0x5c8>
      return;
 8006026:	bf00      	nop
 8006028:	e000      	b.n	800602c <HAL_UART_IRQHandler+0x5c8>
    return;
 800602a:	bf00      	nop
  }

}
 800602c:	37e8      	adds	r7, #232	; 0xe8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop

08006034 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	460b      	mov	r3, r1
 8006066:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	431a      	orrs	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4ba6      	ldr	r3, [pc, #664]	; (800634c <UART_SetConfig+0x2c4>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6812      	ldr	r2, [r2, #0]
 80060ba:	6979      	ldr	r1, [r7, #20]
 80060bc:	430b      	orrs	r3, r1
 80060be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68da      	ldr	r2, [r3, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a94      	ldr	r2, [pc, #592]	; (8006350 <UART_SetConfig+0x2c8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d120      	bne.n	8006146 <UART_SetConfig+0xbe>
 8006104:	4b93      	ldr	r3, [pc, #588]	; (8006354 <UART_SetConfig+0x2cc>)
 8006106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	2b03      	cmp	r3, #3
 8006110:	d816      	bhi.n	8006140 <UART_SetConfig+0xb8>
 8006112:	a201      	add	r2, pc, #4	; (adr r2, 8006118 <UART_SetConfig+0x90>)
 8006114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006118:	08006129 	.word	0x08006129
 800611c:	08006135 	.word	0x08006135
 8006120:	0800612f 	.word	0x0800612f
 8006124:	0800613b 	.word	0x0800613b
 8006128:	2301      	movs	r3, #1
 800612a:	77fb      	strb	r3, [r7, #31]
 800612c:	e150      	b.n	80063d0 <UART_SetConfig+0x348>
 800612e:	2302      	movs	r3, #2
 8006130:	77fb      	strb	r3, [r7, #31]
 8006132:	e14d      	b.n	80063d0 <UART_SetConfig+0x348>
 8006134:	2304      	movs	r3, #4
 8006136:	77fb      	strb	r3, [r7, #31]
 8006138:	e14a      	b.n	80063d0 <UART_SetConfig+0x348>
 800613a:	2308      	movs	r3, #8
 800613c:	77fb      	strb	r3, [r7, #31]
 800613e:	e147      	b.n	80063d0 <UART_SetConfig+0x348>
 8006140:	2310      	movs	r3, #16
 8006142:	77fb      	strb	r3, [r7, #31]
 8006144:	e144      	b.n	80063d0 <UART_SetConfig+0x348>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a83      	ldr	r2, [pc, #524]	; (8006358 <UART_SetConfig+0x2d0>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d132      	bne.n	80061b6 <UART_SetConfig+0x12e>
 8006150:	4b80      	ldr	r3, [pc, #512]	; (8006354 <UART_SetConfig+0x2cc>)
 8006152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006156:	f003 030c 	and.w	r3, r3, #12
 800615a:	2b0c      	cmp	r3, #12
 800615c:	d828      	bhi.n	80061b0 <UART_SetConfig+0x128>
 800615e:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <UART_SetConfig+0xdc>)
 8006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006164:	08006199 	.word	0x08006199
 8006168:	080061b1 	.word	0x080061b1
 800616c:	080061b1 	.word	0x080061b1
 8006170:	080061b1 	.word	0x080061b1
 8006174:	080061a5 	.word	0x080061a5
 8006178:	080061b1 	.word	0x080061b1
 800617c:	080061b1 	.word	0x080061b1
 8006180:	080061b1 	.word	0x080061b1
 8006184:	0800619f 	.word	0x0800619f
 8006188:	080061b1 	.word	0x080061b1
 800618c:	080061b1 	.word	0x080061b1
 8006190:	080061b1 	.word	0x080061b1
 8006194:	080061ab 	.word	0x080061ab
 8006198:	2300      	movs	r3, #0
 800619a:	77fb      	strb	r3, [r7, #31]
 800619c:	e118      	b.n	80063d0 <UART_SetConfig+0x348>
 800619e:	2302      	movs	r3, #2
 80061a0:	77fb      	strb	r3, [r7, #31]
 80061a2:	e115      	b.n	80063d0 <UART_SetConfig+0x348>
 80061a4:	2304      	movs	r3, #4
 80061a6:	77fb      	strb	r3, [r7, #31]
 80061a8:	e112      	b.n	80063d0 <UART_SetConfig+0x348>
 80061aa:	2308      	movs	r3, #8
 80061ac:	77fb      	strb	r3, [r7, #31]
 80061ae:	e10f      	b.n	80063d0 <UART_SetConfig+0x348>
 80061b0:	2310      	movs	r3, #16
 80061b2:	77fb      	strb	r3, [r7, #31]
 80061b4:	e10c      	b.n	80063d0 <UART_SetConfig+0x348>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a68      	ldr	r2, [pc, #416]	; (800635c <UART_SetConfig+0x2d4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d120      	bne.n	8006202 <UART_SetConfig+0x17a>
 80061c0:	4b64      	ldr	r3, [pc, #400]	; (8006354 <UART_SetConfig+0x2cc>)
 80061c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80061ca:	2b30      	cmp	r3, #48	; 0x30
 80061cc:	d013      	beq.n	80061f6 <UART_SetConfig+0x16e>
 80061ce:	2b30      	cmp	r3, #48	; 0x30
 80061d0:	d814      	bhi.n	80061fc <UART_SetConfig+0x174>
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d009      	beq.n	80061ea <UART_SetConfig+0x162>
 80061d6:	2b20      	cmp	r3, #32
 80061d8:	d810      	bhi.n	80061fc <UART_SetConfig+0x174>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <UART_SetConfig+0x15c>
 80061de:	2b10      	cmp	r3, #16
 80061e0:	d006      	beq.n	80061f0 <UART_SetConfig+0x168>
 80061e2:	e00b      	b.n	80061fc <UART_SetConfig+0x174>
 80061e4:	2300      	movs	r3, #0
 80061e6:	77fb      	strb	r3, [r7, #31]
 80061e8:	e0f2      	b.n	80063d0 <UART_SetConfig+0x348>
 80061ea:	2302      	movs	r3, #2
 80061ec:	77fb      	strb	r3, [r7, #31]
 80061ee:	e0ef      	b.n	80063d0 <UART_SetConfig+0x348>
 80061f0:	2304      	movs	r3, #4
 80061f2:	77fb      	strb	r3, [r7, #31]
 80061f4:	e0ec      	b.n	80063d0 <UART_SetConfig+0x348>
 80061f6:	2308      	movs	r3, #8
 80061f8:	77fb      	strb	r3, [r7, #31]
 80061fa:	e0e9      	b.n	80063d0 <UART_SetConfig+0x348>
 80061fc:	2310      	movs	r3, #16
 80061fe:	77fb      	strb	r3, [r7, #31]
 8006200:	e0e6      	b.n	80063d0 <UART_SetConfig+0x348>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a56      	ldr	r2, [pc, #344]	; (8006360 <UART_SetConfig+0x2d8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d120      	bne.n	800624e <UART_SetConfig+0x1c6>
 800620c:	4b51      	ldr	r3, [pc, #324]	; (8006354 <UART_SetConfig+0x2cc>)
 800620e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006212:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006216:	2bc0      	cmp	r3, #192	; 0xc0
 8006218:	d013      	beq.n	8006242 <UART_SetConfig+0x1ba>
 800621a:	2bc0      	cmp	r3, #192	; 0xc0
 800621c:	d814      	bhi.n	8006248 <UART_SetConfig+0x1c0>
 800621e:	2b80      	cmp	r3, #128	; 0x80
 8006220:	d009      	beq.n	8006236 <UART_SetConfig+0x1ae>
 8006222:	2b80      	cmp	r3, #128	; 0x80
 8006224:	d810      	bhi.n	8006248 <UART_SetConfig+0x1c0>
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <UART_SetConfig+0x1a8>
 800622a:	2b40      	cmp	r3, #64	; 0x40
 800622c:	d006      	beq.n	800623c <UART_SetConfig+0x1b4>
 800622e:	e00b      	b.n	8006248 <UART_SetConfig+0x1c0>
 8006230:	2300      	movs	r3, #0
 8006232:	77fb      	strb	r3, [r7, #31]
 8006234:	e0cc      	b.n	80063d0 <UART_SetConfig+0x348>
 8006236:	2302      	movs	r3, #2
 8006238:	77fb      	strb	r3, [r7, #31]
 800623a:	e0c9      	b.n	80063d0 <UART_SetConfig+0x348>
 800623c:	2304      	movs	r3, #4
 800623e:	77fb      	strb	r3, [r7, #31]
 8006240:	e0c6      	b.n	80063d0 <UART_SetConfig+0x348>
 8006242:	2308      	movs	r3, #8
 8006244:	77fb      	strb	r3, [r7, #31]
 8006246:	e0c3      	b.n	80063d0 <UART_SetConfig+0x348>
 8006248:	2310      	movs	r3, #16
 800624a:	77fb      	strb	r3, [r7, #31]
 800624c:	e0c0      	b.n	80063d0 <UART_SetConfig+0x348>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a44      	ldr	r2, [pc, #272]	; (8006364 <UART_SetConfig+0x2dc>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d125      	bne.n	80062a4 <UART_SetConfig+0x21c>
 8006258:	4b3e      	ldr	r3, [pc, #248]	; (8006354 <UART_SetConfig+0x2cc>)
 800625a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006266:	d017      	beq.n	8006298 <UART_SetConfig+0x210>
 8006268:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800626c:	d817      	bhi.n	800629e <UART_SetConfig+0x216>
 800626e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006272:	d00b      	beq.n	800628c <UART_SetConfig+0x204>
 8006274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006278:	d811      	bhi.n	800629e <UART_SetConfig+0x216>
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <UART_SetConfig+0x1fe>
 800627e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006282:	d006      	beq.n	8006292 <UART_SetConfig+0x20a>
 8006284:	e00b      	b.n	800629e <UART_SetConfig+0x216>
 8006286:	2300      	movs	r3, #0
 8006288:	77fb      	strb	r3, [r7, #31]
 800628a:	e0a1      	b.n	80063d0 <UART_SetConfig+0x348>
 800628c:	2302      	movs	r3, #2
 800628e:	77fb      	strb	r3, [r7, #31]
 8006290:	e09e      	b.n	80063d0 <UART_SetConfig+0x348>
 8006292:	2304      	movs	r3, #4
 8006294:	77fb      	strb	r3, [r7, #31]
 8006296:	e09b      	b.n	80063d0 <UART_SetConfig+0x348>
 8006298:	2308      	movs	r3, #8
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e098      	b.n	80063d0 <UART_SetConfig+0x348>
 800629e:	2310      	movs	r3, #16
 80062a0:	77fb      	strb	r3, [r7, #31]
 80062a2:	e095      	b.n	80063d0 <UART_SetConfig+0x348>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a2f      	ldr	r2, [pc, #188]	; (8006368 <UART_SetConfig+0x2e0>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d125      	bne.n	80062fa <UART_SetConfig+0x272>
 80062ae:	4b29      	ldr	r3, [pc, #164]	; (8006354 <UART_SetConfig+0x2cc>)
 80062b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80062b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062bc:	d017      	beq.n	80062ee <UART_SetConfig+0x266>
 80062be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062c2:	d817      	bhi.n	80062f4 <UART_SetConfig+0x26c>
 80062c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062c8:	d00b      	beq.n	80062e2 <UART_SetConfig+0x25a>
 80062ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ce:	d811      	bhi.n	80062f4 <UART_SetConfig+0x26c>
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <UART_SetConfig+0x254>
 80062d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062d8:	d006      	beq.n	80062e8 <UART_SetConfig+0x260>
 80062da:	e00b      	b.n	80062f4 <UART_SetConfig+0x26c>
 80062dc:	2301      	movs	r3, #1
 80062de:	77fb      	strb	r3, [r7, #31]
 80062e0:	e076      	b.n	80063d0 <UART_SetConfig+0x348>
 80062e2:	2302      	movs	r3, #2
 80062e4:	77fb      	strb	r3, [r7, #31]
 80062e6:	e073      	b.n	80063d0 <UART_SetConfig+0x348>
 80062e8:	2304      	movs	r3, #4
 80062ea:	77fb      	strb	r3, [r7, #31]
 80062ec:	e070      	b.n	80063d0 <UART_SetConfig+0x348>
 80062ee:	2308      	movs	r3, #8
 80062f0:	77fb      	strb	r3, [r7, #31]
 80062f2:	e06d      	b.n	80063d0 <UART_SetConfig+0x348>
 80062f4:	2310      	movs	r3, #16
 80062f6:	77fb      	strb	r3, [r7, #31]
 80062f8:	e06a      	b.n	80063d0 <UART_SetConfig+0x348>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a1b      	ldr	r2, [pc, #108]	; (800636c <UART_SetConfig+0x2e4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d138      	bne.n	8006376 <UART_SetConfig+0x2ee>
 8006304:	4b13      	ldr	r3, [pc, #76]	; (8006354 <UART_SetConfig+0x2cc>)
 8006306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800630e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006312:	d017      	beq.n	8006344 <UART_SetConfig+0x2bc>
 8006314:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006318:	d82a      	bhi.n	8006370 <UART_SetConfig+0x2e8>
 800631a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800631e:	d00b      	beq.n	8006338 <UART_SetConfig+0x2b0>
 8006320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006324:	d824      	bhi.n	8006370 <UART_SetConfig+0x2e8>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <UART_SetConfig+0x2aa>
 800632a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800632e:	d006      	beq.n	800633e <UART_SetConfig+0x2b6>
 8006330:	e01e      	b.n	8006370 <UART_SetConfig+0x2e8>
 8006332:	2300      	movs	r3, #0
 8006334:	77fb      	strb	r3, [r7, #31]
 8006336:	e04b      	b.n	80063d0 <UART_SetConfig+0x348>
 8006338:	2302      	movs	r3, #2
 800633a:	77fb      	strb	r3, [r7, #31]
 800633c:	e048      	b.n	80063d0 <UART_SetConfig+0x348>
 800633e:	2304      	movs	r3, #4
 8006340:	77fb      	strb	r3, [r7, #31]
 8006342:	e045      	b.n	80063d0 <UART_SetConfig+0x348>
 8006344:	2308      	movs	r3, #8
 8006346:	77fb      	strb	r3, [r7, #31]
 8006348:	e042      	b.n	80063d0 <UART_SetConfig+0x348>
 800634a:	bf00      	nop
 800634c:	efff69f3 	.word	0xefff69f3
 8006350:	40011000 	.word	0x40011000
 8006354:	40023800 	.word	0x40023800
 8006358:	40004400 	.word	0x40004400
 800635c:	40004800 	.word	0x40004800
 8006360:	40004c00 	.word	0x40004c00
 8006364:	40005000 	.word	0x40005000
 8006368:	40011400 	.word	0x40011400
 800636c:	40007800 	.word	0x40007800
 8006370:	2310      	movs	r3, #16
 8006372:	77fb      	strb	r3, [r7, #31]
 8006374:	e02c      	b.n	80063d0 <UART_SetConfig+0x348>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a72      	ldr	r2, [pc, #456]	; (8006544 <UART_SetConfig+0x4bc>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d125      	bne.n	80063cc <UART_SetConfig+0x344>
 8006380:	4b71      	ldr	r3, [pc, #452]	; (8006548 <UART_SetConfig+0x4c0>)
 8006382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006386:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800638a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800638e:	d017      	beq.n	80063c0 <UART_SetConfig+0x338>
 8006390:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006394:	d817      	bhi.n	80063c6 <UART_SetConfig+0x33e>
 8006396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800639a:	d00b      	beq.n	80063b4 <UART_SetConfig+0x32c>
 800639c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a0:	d811      	bhi.n	80063c6 <UART_SetConfig+0x33e>
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <UART_SetConfig+0x326>
 80063a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063aa:	d006      	beq.n	80063ba <UART_SetConfig+0x332>
 80063ac:	e00b      	b.n	80063c6 <UART_SetConfig+0x33e>
 80063ae:	2300      	movs	r3, #0
 80063b0:	77fb      	strb	r3, [r7, #31]
 80063b2:	e00d      	b.n	80063d0 <UART_SetConfig+0x348>
 80063b4:	2302      	movs	r3, #2
 80063b6:	77fb      	strb	r3, [r7, #31]
 80063b8:	e00a      	b.n	80063d0 <UART_SetConfig+0x348>
 80063ba:	2304      	movs	r3, #4
 80063bc:	77fb      	strb	r3, [r7, #31]
 80063be:	e007      	b.n	80063d0 <UART_SetConfig+0x348>
 80063c0:	2308      	movs	r3, #8
 80063c2:	77fb      	strb	r3, [r7, #31]
 80063c4:	e004      	b.n	80063d0 <UART_SetConfig+0x348>
 80063c6:	2310      	movs	r3, #16
 80063c8:	77fb      	strb	r3, [r7, #31]
 80063ca:	e001      	b.n	80063d0 <UART_SetConfig+0x348>
 80063cc:	2310      	movs	r3, #16
 80063ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063d8:	d15b      	bne.n	8006492 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80063da:	7ffb      	ldrb	r3, [r7, #31]
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d828      	bhi.n	8006432 <UART_SetConfig+0x3aa>
 80063e0:	a201      	add	r2, pc, #4	; (adr r2, 80063e8 <UART_SetConfig+0x360>)
 80063e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e6:	bf00      	nop
 80063e8:	0800640d 	.word	0x0800640d
 80063ec:	08006415 	.word	0x08006415
 80063f0:	0800641d 	.word	0x0800641d
 80063f4:	08006433 	.word	0x08006433
 80063f8:	08006423 	.word	0x08006423
 80063fc:	08006433 	.word	0x08006433
 8006400:	08006433 	.word	0x08006433
 8006404:	08006433 	.word	0x08006433
 8006408:	0800642b 	.word	0x0800642b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800640c:	f7fd f850 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 8006410:	61b8      	str	r0, [r7, #24]
        break;
 8006412:	e013      	b.n	800643c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006414:	f7fd f860 	bl	80034d8 <HAL_RCC_GetPCLK2Freq>
 8006418:	61b8      	str	r0, [r7, #24]
        break;
 800641a:	e00f      	b.n	800643c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800641c:	4b4b      	ldr	r3, [pc, #300]	; (800654c <UART_SetConfig+0x4c4>)
 800641e:	61bb      	str	r3, [r7, #24]
        break;
 8006420:	e00c      	b.n	800643c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006422:	f7fc ff33 	bl	800328c <HAL_RCC_GetSysClockFreq>
 8006426:	61b8      	str	r0, [r7, #24]
        break;
 8006428:	e008      	b.n	800643c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800642a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800642e:	61bb      	str	r3, [r7, #24]
        break;
 8006430:	e004      	b.n	800643c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	77bb      	strb	r3, [r7, #30]
        break;
 800643a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d074      	beq.n	800652c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	005a      	lsls	r2, r3, #1
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	085b      	lsrs	r3, r3, #1
 800644c:	441a      	add	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	fbb2 f3f3 	udiv	r3, r2, r3
 8006456:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	2b0f      	cmp	r3, #15
 800645c:	d916      	bls.n	800648c <UART_SetConfig+0x404>
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006464:	d212      	bcs.n	800648c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	b29b      	uxth	r3, r3
 800646a:	f023 030f 	bic.w	r3, r3, #15
 800646e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	085b      	lsrs	r3, r3, #1
 8006474:	b29b      	uxth	r3, r3
 8006476:	f003 0307 	and.w	r3, r3, #7
 800647a:	b29a      	uxth	r2, r3
 800647c:	89fb      	ldrh	r3, [r7, #14]
 800647e:	4313      	orrs	r3, r2
 8006480:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	89fa      	ldrh	r2, [r7, #14]
 8006488:	60da      	str	r2, [r3, #12]
 800648a:	e04f      	b.n	800652c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	77bb      	strb	r3, [r7, #30]
 8006490:	e04c      	b.n	800652c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006492:	7ffb      	ldrb	r3, [r7, #31]
 8006494:	2b08      	cmp	r3, #8
 8006496:	d828      	bhi.n	80064ea <UART_SetConfig+0x462>
 8006498:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <UART_SetConfig+0x418>)
 800649a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649e:	bf00      	nop
 80064a0:	080064c5 	.word	0x080064c5
 80064a4:	080064cd 	.word	0x080064cd
 80064a8:	080064d5 	.word	0x080064d5
 80064ac:	080064eb 	.word	0x080064eb
 80064b0:	080064db 	.word	0x080064db
 80064b4:	080064eb 	.word	0x080064eb
 80064b8:	080064eb 	.word	0x080064eb
 80064bc:	080064eb 	.word	0x080064eb
 80064c0:	080064e3 	.word	0x080064e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064c4:	f7fc fff4 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 80064c8:	61b8      	str	r0, [r7, #24]
        break;
 80064ca:	e013      	b.n	80064f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064cc:	f7fd f804 	bl	80034d8 <HAL_RCC_GetPCLK2Freq>
 80064d0:	61b8      	str	r0, [r7, #24]
        break;
 80064d2:	e00f      	b.n	80064f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064d4:	4b1d      	ldr	r3, [pc, #116]	; (800654c <UART_SetConfig+0x4c4>)
 80064d6:	61bb      	str	r3, [r7, #24]
        break;
 80064d8:	e00c      	b.n	80064f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064da:	f7fc fed7 	bl	800328c <HAL_RCC_GetSysClockFreq>
 80064de:	61b8      	str	r0, [r7, #24]
        break;
 80064e0:	e008      	b.n	80064f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064e6:	61bb      	str	r3, [r7, #24]
        break;
 80064e8:	e004      	b.n	80064f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	77bb      	strb	r3, [r7, #30]
        break;
 80064f2:	bf00      	nop
    }

    if (pclk != 0U)
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d018      	beq.n	800652c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	085a      	lsrs	r2, r3, #1
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	441a      	add	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	fbb2 f3f3 	udiv	r3, r2, r3
 800650c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	2b0f      	cmp	r3, #15
 8006512:	d909      	bls.n	8006528 <UART_SetConfig+0x4a0>
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800651a:	d205      	bcs.n	8006528 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	b29a      	uxth	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60da      	str	r2, [r3, #12]
 8006526:	e001      	b.n	800652c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006538:	7fbb      	ldrb	r3, [r7, #30]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3720      	adds	r7, #32
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	40007c00 	.word	0x40007c00
 8006548:	40023800 	.word	0x40023800
 800654c:	00f42400 	.word	0x00f42400

08006550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00a      	beq.n	800657a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	f003 0304 	and.w	r3, r3, #4
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00a      	beq.n	80065be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	f003 0310 	and.w	r3, r3, #16
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00a      	beq.n	8006602 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	f003 0320 	and.w	r3, r3, #32
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662c:	2b00      	cmp	r3, #0
 800662e:	d01a      	beq.n	8006666 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800664e:	d10a      	bne.n	8006666 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	605a      	str	r2, [r3, #4]
  }
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af02      	add	r7, sp, #8
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066a4:	f7fb fbee 	bl	8001e84 <HAL_GetTick>
 80066a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0308 	and.w	r3, r3, #8
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d10e      	bne.n	80066d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f831 	bl	800672e <UART_WaitOnFlagUntilTimeout>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e027      	b.n	8006726 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d10e      	bne.n	8006702 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f81b 	bl	800672e <UART_WaitOnFlagUntilTimeout>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e011      	b.n	8006726 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2220      	movs	r2, #32
 8006706:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b09c      	sub	sp, #112	; 0x70
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	603b      	str	r3, [r7, #0]
 800673a:	4613      	mov	r3, r2
 800673c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800673e:	e0a7      	b.n	8006890 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006746:	f000 80a3 	beq.w	8006890 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800674a:	f7fb fb9b 	bl	8001e84 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006756:	429a      	cmp	r2, r3
 8006758:	d302      	bcc.n	8006760 <UART_WaitOnFlagUntilTimeout+0x32>
 800675a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800675c:	2b00      	cmp	r3, #0
 800675e:	d13f      	bne.n	80067e0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800676e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006770:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006774:	667b      	str	r3, [r7, #100]	; 0x64
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800677e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006780:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006784:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006786:	e841 2300 	strex	r3, r2, [r1]
 800678a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800678c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1e6      	bne.n	8006760 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3308      	adds	r3, #8
 8006798:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a4:	f023 0301 	bic.w	r3, r3, #1
 80067a8:	663b      	str	r3, [r7, #96]	; 0x60
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3308      	adds	r3, #8
 80067b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80067b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067ba:	e841 2300 	strex	r3, r2, [r1]
 80067be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1e5      	bne.n	8006792 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2220      	movs	r2, #32
 80067ca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e068      	b.n	80068b2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0304 	and.w	r3, r3, #4
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d050      	beq.n	8006890 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067fc:	d148      	bne.n	8006890 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006806:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006810:	e853 3f00 	ldrex	r3, [r3]
 8006814:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800681c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006826:	637b      	str	r3, [r7, #52]	; 0x34
 8006828:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800682c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800682e:	e841 2300 	strex	r3, r2, [r1]
 8006832:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1e6      	bne.n	8006808 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3308      	adds	r3, #8
 8006840:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	613b      	str	r3, [r7, #16]
   return(result);
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	f023 0301 	bic.w	r3, r3, #1
 8006850:	66bb      	str	r3, [r7, #104]	; 0x68
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3308      	adds	r3, #8
 8006858:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800685a:	623a      	str	r2, [r7, #32]
 800685c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	69f9      	ldr	r1, [r7, #28]
 8006860:	6a3a      	ldr	r2, [r7, #32]
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	61bb      	str	r3, [r7, #24]
   return(result);
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e5      	bne.n	800683a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2220      	movs	r2, #32
 8006872:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2220      	movs	r2, #32
 8006880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e010      	b.n	80068b2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	69da      	ldr	r2, [r3, #28]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	4013      	ands	r3, r2
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	429a      	cmp	r2, r3
 800689e:	bf0c      	ite	eq
 80068a0:	2301      	moveq	r3, #1
 80068a2:	2300      	movne	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	461a      	mov	r2, r3
 80068a8:	79fb      	ldrb	r3, [r7, #7]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	f43f af48 	beq.w	8006740 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3770      	adds	r7, #112	; 0x70
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
	...

080068bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068bc:	b480      	push	{r7}
 80068be:	b097      	sub	sp, #92	; 0x5c
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	4613      	mov	r3, r2
 80068c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	88fa      	ldrh	r2, [r7, #6]
 80068d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	88fa      	ldrh	r2, [r7, #6]
 80068dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ee:	d10e      	bne.n	800690e <UART_Start_Receive_IT+0x52>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d105      	bne.n	8006904 <UART_Start_Receive_IT+0x48>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80068fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006902:	e02d      	b.n	8006960 <UART_Start_Receive_IT+0xa4>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	22ff      	movs	r2, #255	; 0xff
 8006908:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800690c:	e028      	b.n	8006960 <UART_Start_Receive_IT+0xa4>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10d      	bne.n	8006932 <UART_Start_Receive_IT+0x76>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d104      	bne.n	8006928 <UART_Start_Receive_IT+0x6c>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	22ff      	movs	r2, #255	; 0xff
 8006922:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006926:	e01b      	b.n	8006960 <UART_Start_Receive_IT+0xa4>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	227f      	movs	r2, #127	; 0x7f
 800692c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006930:	e016      	b.n	8006960 <UART_Start_Receive_IT+0xa4>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800693a:	d10d      	bne.n	8006958 <UART_Start_Receive_IT+0x9c>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d104      	bne.n	800694e <UART_Start_Receive_IT+0x92>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	227f      	movs	r2, #127	; 0x7f
 8006948:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800694c:	e008      	b.n	8006960 <UART_Start_Receive_IT+0xa4>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	223f      	movs	r2, #63	; 0x3f
 8006952:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006956:	e003      	b.n	8006960 <UART_Start_Receive_IT+0xa4>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2222      	movs	r2, #34	; 0x22
 800696c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3308      	adds	r3, #8
 8006976:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800697a:	e853 3f00 	ldrex	r3, [r3]
 800697e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006982:	f043 0301 	orr.w	r3, r3, #1
 8006986:	657b      	str	r3, [r7, #84]	; 0x54
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3308      	adds	r3, #8
 800698e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006990:	64ba      	str	r2, [r7, #72]	; 0x48
 8006992:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006994:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006998:	e841 2300 	strex	r3, r2, [r1]
 800699c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800699e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1e5      	bne.n	8006970 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ac:	d107      	bne.n	80069be <UART_Start_Receive_IT+0x102>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d103      	bne.n	80069be <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4a21      	ldr	r2, [pc, #132]	; (8006a40 <UART_Start_Receive_IT+0x184>)
 80069ba:	669a      	str	r2, [r3, #104]	; 0x68
 80069bc:	e002      	b.n	80069c4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	4a20      	ldr	r2, [pc, #128]	; (8006a44 <UART_Start_Receive_IT+0x188>)
 80069c2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d019      	beq.n	8006a00 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80069e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	461a      	mov	r2, r3
 80069e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ea:	637b      	str	r3, [r7, #52]	; 0x34
 80069ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069f2:	e841 2300 	strex	r3, r2, [r1]
 80069f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1e6      	bne.n	80069cc <UART_Start_Receive_IT+0x110>
 80069fe:	e018      	b.n	8006a32 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	e853 3f00 	ldrex	r3, [r3]
 8006a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	f043 0320 	orr.w	r3, r3, #32
 8006a14:	653b      	str	r3, [r7, #80]	; 0x50
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a1e:	623b      	str	r3, [r7, #32]
 8006a20:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	69f9      	ldr	r1, [r7, #28]
 8006a24:	6a3a      	ldr	r2, [r7, #32]
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e6      	bne.n	8006a00 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	375c      	adds	r7, #92	; 0x5c
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	08006cf7 	.word	0x08006cf7
 8006a44:	08006b91 	.word	0x08006b91

08006a48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b095      	sub	sp, #84	; 0x54
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a6e:	643b      	str	r3, [r7, #64]	; 0x40
 8006a70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a76:	e841 2300 	strex	r3, r2, [r1]
 8006a7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1e6      	bne.n	8006a50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3308      	adds	r3, #8
 8006a88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006aa4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e5      	bne.n	8006a82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d118      	bne.n	8006af0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	60bb      	str	r3, [r7, #8]
   return(result);
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f023 0310 	bic.w	r3, r3, #16
 8006ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006adc:	61bb      	str	r3, [r7, #24]
 8006ade:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae0:	6979      	ldr	r1, [r7, #20]
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	e841 2300 	strex	r3, r2, [r1]
 8006ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1e6      	bne.n	8006abe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006b04:	bf00      	nop
 8006b06:	3754      	adds	r7, #84	; 0x54
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f7ff fa8a 	bl	8006048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b34:	bf00      	nop
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b088      	sub	sp, #32
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b58:	61fb      	str	r3, [r7, #28]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	61bb      	str	r3, [r7, #24]
 8006b64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b66:	6979      	ldr	r1, [r7, #20]
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e6      	bne.n	8006b44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7ff fa56 	bl	8006034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b88:	bf00      	nop
 8006b8a:	3720      	adds	r7, #32
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b096      	sub	sp, #88	; 0x58
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b9e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ba8:	2b22      	cmp	r3, #34	; 0x22
 8006baa:	f040 8098 	bne.w	8006cde <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006bb8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006bbc:	b2d9      	uxtb	r1, r3
 8006bbe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc8:	400a      	ands	r2, r1
 8006bca:	b2d2      	uxtb	r2, r2
 8006bcc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	3b01      	subs	r3, #1
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d17b      	bne.n	8006cee <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfe:	e853 3f00 	ldrex	r3, [r3]
 8006c02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c14:	647b      	str	r3, [r7, #68]	; 0x44
 8006c16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c1c:	e841 2300 	strex	r3, r2, [r1]
 8006c20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1e6      	bne.n	8006bf6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3308      	adds	r3, #8
 8006c2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	e853 3f00 	ldrex	r3, [r3]
 8006c36:	623b      	str	r3, [r7, #32]
   return(result);
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	f023 0301 	bic.w	r3, r3, #1
 8006c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3308      	adds	r3, #8
 8006c46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c48:	633a      	str	r2, [r7, #48]	; 0x30
 8006c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c50:	e841 2300 	strex	r3, r2, [r1]
 8006c54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1e5      	bne.n	8006c28 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d12e      	bne.n	8006cd6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 0310 	bic.w	r3, r3, #16
 8006c92:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	69b9      	ldr	r1, [r7, #24]
 8006ca2:	69fa      	ldr	r2, [r7, #28]
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	617b      	str	r3, [r7, #20]
   return(result);
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e6      	bne.n	8006c7e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	f003 0310 	and.w	r3, r3, #16
 8006cba:	2b10      	cmp	r3, #16
 8006cbc:	d103      	bne.n	8006cc6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2210      	movs	r2, #16
 8006cc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff f9c4 	bl	800605c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cd4:	e00b      	b.n	8006cee <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7fa fb5a 	bl	8001390 <HAL_UART_RxCpltCallback>
}
 8006cdc:	e007      	b.n	8006cee <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	699a      	ldr	r2, [r3, #24]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f042 0208 	orr.w	r2, r2, #8
 8006cec:	619a      	str	r2, [r3, #24]
}
 8006cee:	bf00      	nop
 8006cf0:	3758      	adds	r7, #88	; 0x58
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b096      	sub	sp, #88	; 0x58
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d04:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d0e:	2b22      	cmp	r3, #34	; 0x22
 8006d10:	f040 8098 	bne.w	8006e44 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d22:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d24:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006d28:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d32:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d38:	1c9a      	adds	r2, r3, #2
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d17b      	bne.n	8006e54 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d7a:	643b      	str	r3, [r7, #64]	; 0x40
 8006d7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e6      	bne.n	8006d5c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3308      	adds	r3, #8
 8006d94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	f023 0301 	bic.w	r3, r3, #1
 8006da4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3308      	adds	r3, #8
 8006dac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006db0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006db6:	e841 2300 	strex	r3, r2, [r1]
 8006dba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e5      	bne.n	8006d8e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d12e      	bne.n	8006e3c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	e853 3f00 	ldrex	r3, [r3]
 8006df0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f023 0310 	bic.w	r3, r3, #16
 8006df8:	647b      	str	r3, [r7, #68]	; 0x44
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e02:	61bb      	str	r3, [r7, #24]
 8006e04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e06:	6979      	ldr	r1, [r7, #20]
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	e841 2300 	strex	r3, r2, [r1]
 8006e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1e6      	bne.n	8006de4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	f003 0310 	and.w	r3, r3, #16
 8006e20:	2b10      	cmp	r3, #16
 8006e22:	d103      	bne.n	8006e2c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2210      	movs	r2, #16
 8006e2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff f911 	bl	800605c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e3a:	e00b      	b.n	8006e54 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7fa faa7 	bl	8001390 <HAL_UART_RxCpltCallback>
}
 8006e42:	e007      	b.n	8006e54 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699a      	ldr	r2, [r3, #24]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0208 	orr.w	r2, r2, #8
 8006e52:	619a      	str	r2, [r3, #24]
}
 8006e54:	bf00      	nop
 8006e56:	3758      	adds	r7, #88	; 0x58
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	f107 001c 	add.w	r0, r7, #28
 8006e6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d120      	bne.n	8006eb6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68da      	ldr	r2, [r3, #12]
 8006e84:	4b20      	ldr	r3, [pc, #128]	; (8006f08 <USB_CoreInit+0xac>)
 8006e86:	4013      	ands	r3, r2
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d105      	bne.n	8006eaa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fa96 	bl	80073dc <USB_CoreReset>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	73fb      	strb	r3, [r7, #15]
 8006eb4:	e010      	b.n	8006ed8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fa8a 	bl	80073dc <USB_CoreReset>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d10b      	bne.n	8006ef6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f043 0206 	orr.w	r2, r3, #6
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f043 0220 	orr.w	r2, r3, #32
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f02:	b004      	add	sp, #16
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	ffbdffbf 	.word	0xffbdffbf

08006f0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f023 0201 	bic.w	r2, r3, #1
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	460b      	mov	r3, r1
 8006f38:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f4a:	78fb      	ldrb	r3, [r7, #3]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d115      	bne.n	8006f7c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f5c:	2001      	movs	r0, #1
 8006f5e:	f7fa ff9d 	bl	8001e9c <HAL_Delay>
      ms++;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3301      	adds	r3, #1
 8006f66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fa29 	bl	80073c0 <USB_GetMode>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d01e      	beq.n	8006fb2 <USB_SetCurrentMode+0x84>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2b31      	cmp	r3, #49	; 0x31
 8006f78:	d9f0      	bls.n	8006f5c <USB_SetCurrentMode+0x2e>
 8006f7a:	e01a      	b.n	8006fb2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d115      	bne.n	8006fae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f8e:	2001      	movs	r0, #1
 8006f90:	f7fa ff84 	bl	8001e9c <HAL_Delay>
      ms++;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3301      	adds	r3, #1
 8006f98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fa10 	bl	80073c0 <USB_GetMode>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d005      	beq.n	8006fb2 <USB_SetCurrentMode+0x84>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2b31      	cmp	r3, #49	; 0x31
 8006faa:	d9f0      	bls.n	8006f8e <USB_SetCurrentMode+0x60>
 8006fac:	e001      	b.n	8006fb2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e005      	b.n	8006fbe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b32      	cmp	r3, #50	; 0x32
 8006fb6:	d101      	bne.n	8006fbc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e000      	b.n	8006fbe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fc8:	b084      	sub	sp, #16
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b086      	sub	sp, #24
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006fd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	613b      	str	r3, [r7, #16]
 8006fe6:	e009      	b.n	8006ffc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	3340      	adds	r3, #64	; 0x40
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	613b      	str	r3, [r7, #16]
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	2b0e      	cmp	r3, #14
 8007000:	d9f2      	bls.n	8006fe8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007004:	2b00      	cmp	r3, #0
 8007006:	d11c      	bne.n	8007042 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007016:	f043 0302 	orr.w	r3, r3, #2
 800701a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007020:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	e005      	b.n	800704e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007046:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007054:	461a      	mov	r2, r3
 8007056:	2300      	movs	r3, #0
 8007058:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007060:	4619      	mov	r1, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007068:	461a      	mov	r2, r3
 800706a:	680b      	ldr	r3, [r1, #0]
 800706c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007070:	2b01      	cmp	r3, #1
 8007072:	d10c      	bne.n	800708e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007076:	2b00      	cmp	r3, #0
 8007078:	d104      	bne.n	8007084 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800707a:	2100      	movs	r1, #0
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f965 	bl	800734c <USB_SetDevSpeed>
 8007082:	e008      	b.n	8007096 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007084:	2101      	movs	r1, #1
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f960 	bl	800734c <USB_SetDevSpeed>
 800708c:	e003      	b.n	8007096 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800708e:	2103      	movs	r1, #3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f95b 	bl	800734c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007096:	2110      	movs	r1, #16
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f8f3 	bl	8007284 <USB_FlushTxFifo>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f91f 	bl	80072ec <USB_FlushRxFifo>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070be:	461a      	mov	r2, r3
 80070c0:	2300      	movs	r3, #0
 80070c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ca:	461a      	mov	r2, r3
 80070cc:	2300      	movs	r3, #0
 80070ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d6:	461a      	mov	r2, r3
 80070d8:	2300      	movs	r3, #0
 80070da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070dc:	2300      	movs	r3, #0
 80070de:	613b      	str	r3, [r7, #16]
 80070e0:	e043      	b.n	800716a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	015a      	lsls	r2, r3, #5
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070f8:	d118      	bne.n	800712c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10a      	bne.n	8007116 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710c:	461a      	mov	r2, r3
 800710e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	e013      	b.n	800713e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007122:	461a      	mov	r2, r3
 8007124:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007128:	6013      	str	r3, [r2, #0]
 800712a:	e008      	b.n	800713e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007138:	461a      	mov	r2, r3
 800713a:	2300      	movs	r3, #0
 800713c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	015a      	lsls	r2, r3, #5
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	4413      	add	r3, r2
 8007146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714a:	461a      	mov	r2, r3
 800714c:	2300      	movs	r3, #0
 800714e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715c:	461a      	mov	r2, r3
 800715e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007162:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	3301      	adds	r3, #1
 8007168:	613b      	str	r3, [r7, #16]
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	429a      	cmp	r2, r3
 8007170:	d3b7      	bcc.n	80070e2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007172:	2300      	movs	r3, #0
 8007174:	613b      	str	r3, [r7, #16]
 8007176:	e043      	b.n	8007200 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800718a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800718e:	d118      	bne.n	80071c2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10a      	bne.n	80071ac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a2:	461a      	mov	r2, r3
 80071a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	e013      	b.n	80071d4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b8:	461a      	mov	r2, r3
 80071ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80071be:	6013      	str	r3, [r2, #0]
 80071c0:	e008      	b.n	80071d4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ce:	461a      	mov	r2, r3
 80071d0:	2300      	movs	r3, #0
 80071d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e0:	461a      	mov	r2, r3
 80071e2:	2300      	movs	r3, #0
 80071e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f2:	461a      	mov	r2, r3
 80071f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	3301      	adds	r3, #1
 80071fe:	613b      	str	r3, [r7, #16]
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	429a      	cmp	r2, r3
 8007206:	d3b7      	bcc.n	8007178 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007216:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800721a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007228:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	2b00      	cmp	r3, #0
 800722e:	d105      	bne.n	800723c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	f043 0210 	orr.w	r2, r3, #16
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	699a      	ldr	r2, [r3, #24]
 8007240:	4b0e      	ldr	r3, [pc, #56]	; (800727c <USB_DevInit+0x2b4>)
 8007242:	4313      	orrs	r3, r2
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800724a:	2b00      	cmp	r3, #0
 800724c:	d005      	beq.n	800725a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	f043 0208 	orr.w	r2, r3, #8
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800725a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800725c:	2b01      	cmp	r3, #1
 800725e:	d105      	bne.n	800726c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	699a      	ldr	r2, [r3, #24]
 8007264:	4b06      	ldr	r3, [pc, #24]	; (8007280 <USB_DevInit+0x2b8>)
 8007266:	4313      	orrs	r3, r2
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800726c:	7dfb      	ldrb	r3, [r7, #23]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007278:	b004      	add	sp, #16
 800727a:	4770      	bx	lr
 800727c:	803c3800 	.word	0x803c3800
 8007280:	40000004 	.word	0x40000004

08007284 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3301      	adds	r3, #1
 8007296:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4a13      	ldr	r2, [pc, #76]	; (80072e8 <USB_FlushTxFifo+0x64>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d901      	bls.n	80072a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e01b      	b.n	80072dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	daf2      	bge.n	8007292 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	019b      	lsls	r3, r3, #6
 80072b4:	f043 0220 	orr.w	r2, r3, #32
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3301      	adds	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4a08      	ldr	r2, [pc, #32]	; (80072e8 <USB_FlushTxFifo+0x64>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d901      	bls.n	80072ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e006      	b.n	80072dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	f003 0320 	and.w	r3, r3, #32
 80072d6:	2b20      	cmp	r3, #32
 80072d8:	d0f0      	beq.n	80072bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	00030d40 	.word	0x00030d40

080072ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	3301      	adds	r3, #1
 80072fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4a11      	ldr	r2, [pc, #68]	; (8007348 <USB_FlushRxFifo+0x5c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d901      	bls.n	800730a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e018      	b.n	800733c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	2b00      	cmp	r3, #0
 8007310:	daf2      	bge.n	80072f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2210      	movs	r2, #16
 800731a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	3301      	adds	r3, #1
 8007320:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4a08      	ldr	r2, [pc, #32]	; (8007348 <USB_FlushRxFifo+0x5c>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d901      	bls.n	800732e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e006      	b.n	800733c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	f003 0310 	and.w	r3, r3, #16
 8007336:	2b10      	cmp	r3, #16
 8007338:	d0f0      	beq.n	800731c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	00030d40 	.word	0x00030d40

0800734c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	460b      	mov	r3, r1
 8007356:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	78fb      	ldrb	r3, [r7, #3]
 8007366:	68f9      	ldr	r1, [r7, #12]
 8007368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800736c:	4313      	orrs	r3, r2
 800736e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800737e:	b480      	push	{r7}
 8007380:	b085      	sub	sp, #20
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007398:	f023 0303 	bic.w	r3, r3, #3
 800739c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073ac:	f043 0302 	orr.w	r3, r3, #2
 80073b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	f003 0301 	and.w	r3, r3, #1
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3301      	adds	r3, #1
 80073ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	4a13      	ldr	r2, [pc, #76]	; (8007440 <USB_CoreReset+0x64>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d901      	bls.n	80073fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e01b      	b.n	8007432 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	daf2      	bge.n	80073e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007402:	2300      	movs	r3, #0
 8007404:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	f043 0201 	orr.w	r2, r3, #1
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3301      	adds	r3, #1
 8007416:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4a09      	ldr	r2, [pc, #36]	; (8007440 <USB_CoreReset+0x64>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d901      	bls.n	8007424 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e006      	b.n	8007432 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b01      	cmp	r3, #1
 800742e:	d0f0      	beq.n	8007412 <USB_CoreReset+0x36>

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	00030d40 	.word	0x00030d40

08007444 <siprintf>:
 8007444:	b40e      	push	{r1, r2, r3}
 8007446:	b500      	push	{lr}
 8007448:	b09c      	sub	sp, #112	; 0x70
 800744a:	ab1d      	add	r3, sp, #116	; 0x74
 800744c:	9002      	str	r0, [sp, #8]
 800744e:	9006      	str	r0, [sp, #24]
 8007450:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007454:	4809      	ldr	r0, [pc, #36]	; (800747c <siprintf+0x38>)
 8007456:	9107      	str	r1, [sp, #28]
 8007458:	9104      	str	r1, [sp, #16]
 800745a:	4909      	ldr	r1, [pc, #36]	; (8007480 <siprintf+0x3c>)
 800745c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007460:	9105      	str	r1, [sp, #20]
 8007462:	6800      	ldr	r0, [r0, #0]
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	a902      	add	r1, sp, #8
 8007468:	f000 f992 	bl	8007790 <_svfiprintf_r>
 800746c:	9b02      	ldr	r3, [sp, #8]
 800746e:	2200      	movs	r2, #0
 8007470:	701a      	strb	r2, [r3, #0]
 8007472:	b01c      	add	sp, #112	; 0x70
 8007474:	f85d eb04 	ldr.w	lr, [sp], #4
 8007478:	b003      	add	sp, #12
 800747a:	4770      	bx	lr
 800747c:	2000006c 	.word	0x2000006c
 8007480:	ffff0208 	.word	0xffff0208

08007484 <memset>:
 8007484:	4402      	add	r2, r0
 8007486:	4603      	mov	r3, r0
 8007488:	4293      	cmp	r3, r2
 800748a:	d100      	bne.n	800748e <memset+0xa>
 800748c:	4770      	bx	lr
 800748e:	f803 1b01 	strb.w	r1, [r3], #1
 8007492:	e7f9      	b.n	8007488 <memset+0x4>

08007494 <__errno>:
 8007494:	4b01      	ldr	r3, [pc, #4]	; (800749c <__errno+0x8>)
 8007496:	6818      	ldr	r0, [r3, #0]
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	2000006c 	.word	0x2000006c

080074a0 <__libc_init_array>:
 80074a0:	b570      	push	{r4, r5, r6, lr}
 80074a2:	4d0d      	ldr	r5, [pc, #52]	; (80074d8 <__libc_init_array+0x38>)
 80074a4:	4c0d      	ldr	r4, [pc, #52]	; (80074dc <__libc_init_array+0x3c>)
 80074a6:	1b64      	subs	r4, r4, r5
 80074a8:	10a4      	asrs	r4, r4, #2
 80074aa:	2600      	movs	r6, #0
 80074ac:	42a6      	cmp	r6, r4
 80074ae:	d109      	bne.n	80074c4 <__libc_init_array+0x24>
 80074b0:	4d0b      	ldr	r5, [pc, #44]	; (80074e0 <__libc_init_array+0x40>)
 80074b2:	4c0c      	ldr	r4, [pc, #48]	; (80074e4 <__libc_init_array+0x44>)
 80074b4:	f000 fc6a 	bl	8007d8c <_init>
 80074b8:	1b64      	subs	r4, r4, r5
 80074ba:	10a4      	asrs	r4, r4, #2
 80074bc:	2600      	movs	r6, #0
 80074be:	42a6      	cmp	r6, r4
 80074c0:	d105      	bne.n	80074ce <__libc_init_array+0x2e>
 80074c2:	bd70      	pop	{r4, r5, r6, pc}
 80074c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80074c8:	4798      	blx	r3
 80074ca:	3601      	adds	r6, #1
 80074cc:	e7ee      	b.n	80074ac <__libc_init_array+0xc>
 80074ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80074d2:	4798      	blx	r3
 80074d4:	3601      	adds	r6, #1
 80074d6:	e7f2      	b.n	80074be <__libc_init_array+0x1e>
 80074d8:	08007e04 	.word	0x08007e04
 80074dc:	08007e04 	.word	0x08007e04
 80074e0:	08007e04 	.word	0x08007e04
 80074e4:	08007e08 	.word	0x08007e08

080074e8 <__retarget_lock_acquire_recursive>:
 80074e8:	4770      	bx	lr

080074ea <__retarget_lock_release_recursive>:
 80074ea:	4770      	bx	lr

080074ec <_free_r>:
 80074ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074ee:	2900      	cmp	r1, #0
 80074f0:	d044      	beq.n	800757c <_free_r+0x90>
 80074f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074f6:	9001      	str	r0, [sp, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f1a1 0404 	sub.w	r4, r1, #4
 80074fe:	bfb8      	it	lt
 8007500:	18e4      	addlt	r4, r4, r3
 8007502:	f000 f8df 	bl	80076c4 <__malloc_lock>
 8007506:	4a1e      	ldr	r2, [pc, #120]	; (8007580 <_free_r+0x94>)
 8007508:	9801      	ldr	r0, [sp, #4]
 800750a:	6813      	ldr	r3, [r2, #0]
 800750c:	b933      	cbnz	r3, 800751c <_free_r+0x30>
 800750e:	6063      	str	r3, [r4, #4]
 8007510:	6014      	str	r4, [r2, #0]
 8007512:	b003      	add	sp, #12
 8007514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007518:	f000 b8da 	b.w	80076d0 <__malloc_unlock>
 800751c:	42a3      	cmp	r3, r4
 800751e:	d908      	bls.n	8007532 <_free_r+0x46>
 8007520:	6825      	ldr	r5, [r4, #0]
 8007522:	1961      	adds	r1, r4, r5
 8007524:	428b      	cmp	r3, r1
 8007526:	bf01      	itttt	eq
 8007528:	6819      	ldreq	r1, [r3, #0]
 800752a:	685b      	ldreq	r3, [r3, #4]
 800752c:	1949      	addeq	r1, r1, r5
 800752e:	6021      	streq	r1, [r4, #0]
 8007530:	e7ed      	b.n	800750e <_free_r+0x22>
 8007532:	461a      	mov	r2, r3
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	b10b      	cbz	r3, 800753c <_free_r+0x50>
 8007538:	42a3      	cmp	r3, r4
 800753a:	d9fa      	bls.n	8007532 <_free_r+0x46>
 800753c:	6811      	ldr	r1, [r2, #0]
 800753e:	1855      	adds	r5, r2, r1
 8007540:	42a5      	cmp	r5, r4
 8007542:	d10b      	bne.n	800755c <_free_r+0x70>
 8007544:	6824      	ldr	r4, [r4, #0]
 8007546:	4421      	add	r1, r4
 8007548:	1854      	adds	r4, r2, r1
 800754a:	42a3      	cmp	r3, r4
 800754c:	6011      	str	r1, [r2, #0]
 800754e:	d1e0      	bne.n	8007512 <_free_r+0x26>
 8007550:	681c      	ldr	r4, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	6053      	str	r3, [r2, #4]
 8007556:	440c      	add	r4, r1
 8007558:	6014      	str	r4, [r2, #0]
 800755a:	e7da      	b.n	8007512 <_free_r+0x26>
 800755c:	d902      	bls.n	8007564 <_free_r+0x78>
 800755e:	230c      	movs	r3, #12
 8007560:	6003      	str	r3, [r0, #0]
 8007562:	e7d6      	b.n	8007512 <_free_r+0x26>
 8007564:	6825      	ldr	r5, [r4, #0]
 8007566:	1961      	adds	r1, r4, r5
 8007568:	428b      	cmp	r3, r1
 800756a:	bf04      	itt	eq
 800756c:	6819      	ldreq	r1, [r3, #0]
 800756e:	685b      	ldreq	r3, [r3, #4]
 8007570:	6063      	str	r3, [r4, #4]
 8007572:	bf04      	itt	eq
 8007574:	1949      	addeq	r1, r1, r5
 8007576:	6021      	streq	r1, [r4, #0]
 8007578:	6054      	str	r4, [r2, #4]
 800757a:	e7ca      	b.n	8007512 <_free_r+0x26>
 800757c:	b003      	add	sp, #12
 800757e:	bd30      	pop	{r4, r5, pc}
 8007580:	20000980 	.word	0x20000980

08007584 <sbrk_aligned>:
 8007584:	b570      	push	{r4, r5, r6, lr}
 8007586:	4e0e      	ldr	r6, [pc, #56]	; (80075c0 <sbrk_aligned+0x3c>)
 8007588:	460c      	mov	r4, r1
 800758a:	6831      	ldr	r1, [r6, #0]
 800758c:	4605      	mov	r5, r0
 800758e:	b911      	cbnz	r1, 8007596 <sbrk_aligned+0x12>
 8007590:	f000 fba6 	bl	8007ce0 <_sbrk_r>
 8007594:	6030      	str	r0, [r6, #0]
 8007596:	4621      	mov	r1, r4
 8007598:	4628      	mov	r0, r5
 800759a:	f000 fba1 	bl	8007ce0 <_sbrk_r>
 800759e:	1c43      	adds	r3, r0, #1
 80075a0:	d00a      	beq.n	80075b8 <sbrk_aligned+0x34>
 80075a2:	1cc4      	adds	r4, r0, #3
 80075a4:	f024 0403 	bic.w	r4, r4, #3
 80075a8:	42a0      	cmp	r0, r4
 80075aa:	d007      	beq.n	80075bc <sbrk_aligned+0x38>
 80075ac:	1a21      	subs	r1, r4, r0
 80075ae:	4628      	mov	r0, r5
 80075b0:	f000 fb96 	bl	8007ce0 <_sbrk_r>
 80075b4:	3001      	adds	r0, #1
 80075b6:	d101      	bne.n	80075bc <sbrk_aligned+0x38>
 80075b8:	f04f 34ff 	mov.w	r4, #4294967295
 80075bc:	4620      	mov	r0, r4
 80075be:	bd70      	pop	{r4, r5, r6, pc}
 80075c0:	20000984 	.word	0x20000984

080075c4 <_malloc_r>:
 80075c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075c8:	1ccd      	adds	r5, r1, #3
 80075ca:	f025 0503 	bic.w	r5, r5, #3
 80075ce:	3508      	adds	r5, #8
 80075d0:	2d0c      	cmp	r5, #12
 80075d2:	bf38      	it	cc
 80075d4:	250c      	movcc	r5, #12
 80075d6:	2d00      	cmp	r5, #0
 80075d8:	4607      	mov	r7, r0
 80075da:	db01      	blt.n	80075e0 <_malloc_r+0x1c>
 80075dc:	42a9      	cmp	r1, r5
 80075de:	d905      	bls.n	80075ec <_malloc_r+0x28>
 80075e0:	230c      	movs	r3, #12
 80075e2:	603b      	str	r3, [r7, #0]
 80075e4:	2600      	movs	r6, #0
 80075e6:	4630      	mov	r0, r6
 80075e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80076c0 <_malloc_r+0xfc>
 80075f0:	f000 f868 	bl	80076c4 <__malloc_lock>
 80075f4:	f8d8 3000 	ldr.w	r3, [r8]
 80075f8:	461c      	mov	r4, r3
 80075fa:	bb5c      	cbnz	r4, 8007654 <_malloc_r+0x90>
 80075fc:	4629      	mov	r1, r5
 80075fe:	4638      	mov	r0, r7
 8007600:	f7ff ffc0 	bl	8007584 <sbrk_aligned>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	4604      	mov	r4, r0
 8007608:	d155      	bne.n	80076b6 <_malloc_r+0xf2>
 800760a:	f8d8 4000 	ldr.w	r4, [r8]
 800760e:	4626      	mov	r6, r4
 8007610:	2e00      	cmp	r6, #0
 8007612:	d145      	bne.n	80076a0 <_malloc_r+0xdc>
 8007614:	2c00      	cmp	r4, #0
 8007616:	d048      	beq.n	80076aa <_malloc_r+0xe6>
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	4631      	mov	r1, r6
 800761c:	4638      	mov	r0, r7
 800761e:	eb04 0903 	add.w	r9, r4, r3
 8007622:	f000 fb5d 	bl	8007ce0 <_sbrk_r>
 8007626:	4581      	cmp	r9, r0
 8007628:	d13f      	bne.n	80076aa <_malloc_r+0xe6>
 800762a:	6821      	ldr	r1, [r4, #0]
 800762c:	1a6d      	subs	r5, r5, r1
 800762e:	4629      	mov	r1, r5
 8007630:	4638      	mov	r0, r7
 8007632:	f7ff ffa7 	bl	8007584 <sbrk_aligned>
 8007636:	3001      	adds	r0, #1
 8007638:	d037      	beq.n	80076aa <_malloc_r+0xe6>
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	442b      	add	r3, r5
 800763e:	6023      	str	r3, [r4, #0]
 8007640:	f8d8 3000 	ldr.w	r3, [r8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d038      	beq.n	80076ba <_malloc_r+0xf6>
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	42a2      	cmp	r2, r4
 800764c:	d12b      	bne.n	80076a6 <_malloc_r+0xe2>
 800764e:	2200      	movs	r2, #0
 8007650:	605a      	str	r2, [r3, #4]
 8007652:	e00f      	b.n	8007674 <_malloc_r+0xb0>
 8007654:	6822      	ldr	r2, [r4, #0]
 8007656:	1b52      	subs	r2, r2, r5
 8007658:	d41f      	bmi.n	800769a <_malloc_r+0xd6>
 800765a:	2a0b      	cmp	r2, #11
 800765c:	d917      	bls.n	800768e <_malloc_r+0xca>
 800765e:	1961      	adds	r1, r4, r5
 8007660:	42a3      	cmp	r3, r4
 8007662:	6025      	str	r5, [r4, #0]
 8007664:	bf18      	it	ne
 8007666:	6059      	strne	r1, [r3, #4]
 8007668:	6863      	ldr	r3, [r4, #4]
 800766a:	bf08      	it	eq
 800766c:	f8c8 1000 	streq.w	r1, [r8]
 8007670:	5162      	str	r2, [r4, r5]
 8007672:	604b      	str	r3, [r1, #4]
 8007674:	4638      	mov	r0, r7
 8007676:	f104 060b 	add.w	r6, r4, #11
 800767a:	f000 f829 	bl	80076d0 <__malloc_unlock>
 800767e:	f026 0607 	bic.w	r6, r6, #7
 8007682:	1d23      	adds	r3, r4, #4
 8007684:	1af2      	subs	r2, r6, r3
 8007686:	d0ae      	beq.n	80075e6 <_malloc_r+0x22>
 8007688:	1b9b      	subs	r3, r3, r6
 800768a:	50a3      	str	r3, [r4, r2]
 800768c:	e7ab      	b.n	80075e6 <_malloc_r+0x22>
 800768e:	42a3      	cmp	r3, r4
 8007690:	6862      	ldr	r2, [r4, #4]
 8007692:	d1dd      	bne.n	8007650 <_malloc_r+0x8c>
 8007694:	f8c8 2000 	str.w	r2, [r8]
 8007698:	e7ec      	b.n	8007674 <_malloc_r+0xb0>
 800769a:	4623      	mov	r3, r4
 800769c:	6864      	ldr	r4, [r4, #4]
 800769e:	e7ac      	b.n	80075fa <_malloc_r+0x36>
 80076a0:	4634      	mov	r4, r6
 80076a2:	6876      	ldr	r6, [r6, #4]
 80076a4:	e7b4      	b.n	8007610 <_malloc_r+0x4c>
 80076a6:	4613      	mov	r3, r2
 80076a8:	e7cc      	b.n	8007644 <_malloc_r+0x80>
 80076aa:	230c      	movs	r3, #12
 80076ac:	603b      	str	r3, [r7, #0]
 80076ae:	4638      	mov	r0, r7
 80076b0:	f000 f80e 	bl	80076d0 <__malloc_unlock>
 80076b4:	e797      	b.n	80075e6 <_malloc_r+0x22>
 80076b6:	6025      	str	r5, [r4, #0]
 80076b8:	e7dc      	b.n	8007674 <_malloc_r+0xb0>
 80076ba:	605b      	str	r3, [r3, #4]
 80076bc:	deff      	udf	#255	; 0xff
 80076be:	bf00      	nop
 80076c0:	20000980 	.word	0x20000980

080076c4 <__malloc_lock>:
 80076c4:	4801      	ldr	r0, [pc, #4]	; (80076cc <__malloc_lock+0x8>)
 80076c6:	f7ff bf0f 	b.w	80074e8 <__retarget_lock_acquire_recursive>
 80076ca:	bf00      	nop
 80076cc:	2000097c 	.word	0x2000097c

080076d0 <__malloc_unlock>:
 80076d0:	4801      	ldr	r0, [pc, #4]	; (80076d8 <__malloc_unlock+0x8>)
 80076d2:	f7ff bf0a 	b.w	80074ea <__retarget_lock_release_recursive>
 80076d6:	bf00      	nop
 80076d8:	2000097c 	.word	0x2000097c

080076dc <__ssputs_r>:
 80076dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e0:	688e      	ldr	r6, [r1, #8]
 80076e2:	461f      	mov	r7, r3
 80076e4:	42be      	cmp	r6, r7
 80076e6:	680b      	ldr	r3, [r1, #0]
 80076e8:	4682      	mov	sl, r0
 80076ea:	460c      	mov	r4, r1
 80076ec:	4690      	mov	r8, r2
 80076ee:	d82c      	bhi.n	800774a <__ssputs_r+0x6e>
 80076f0:	898a      	ldrh	r2, [r1, #12]
 80076f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076f6:	d026      	beq.n	8007746 <__ssputs_r+0x6a>
 80076f8:	6965      	ldr	r5, [r4, #20]
 80076fa:	6909      	ldr	r1, [r1, #16]
 80076fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007700:	eba3 0901 	sub.w	r9, r3, r1
 8007704:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007708:	1c7b      	adds	r3, r7, #1
 800770a:	444b      	add	r3, r9
 800770c:	106d      	asrs	r5, r5, #1
 800770e:	429d      	cmp	r5, r3
 8007710:	bf38      	it	cc
 8007712:	461d      	movcc	r5, r3
 8007714:	0553      	lsls	r3, r2, #21
 8007716:	d527      	bpl.n	8007768 <__ssputs_r+0x8c>
 8007718:	4629      	mov	r1, r5
 800771a:	f7ff ff53 	bl	80075c4 <_malloc_r>
 800771e:	4606      	mov	r6, r0
 8007720:	b360      	cbz	r0, 800777c <__ssputs_r+0xa0>
 8007722:	6921      	ldr	r1, [r4, #16]
 8007724:	464a      	mov	r2, r9
 8007726:	f000 faeb 	bl	8007d00 <memcpy>
 800772a:	89a3      	ldrh	r3, [r4, #12]
 800772c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007734:	81a3      	strh	r3, [r4, #12]
 8007736:	6126      	str	r6, [r4, #16]
 8007738:	6165      	str	r5, [r4, #20]
 800773a:	444e      	add	r6, r9
 800773c:	eba5 0509 	sub.w	r5, r5, r9
 8007740:	6026      	str	r6, [r4, #0]
 8007742:	60a5      	str	r5, [r4, #8]
 8007744:	463e      	mov	r6, r7
 8007746:	42be      	cmp	r6, r7
 8007748:	d900      	bls.n	800774c <__ssputs_r+0x70>
 800774a:	463e      	mov	r6, r7
 800774c:	6820      	ldr	r0, [r4, #0]
 800774e:	4632      	mov	r2, r6
 8007750:	4641      	mov	r1, r8
 8007752:	f000 faab 	bl	8007cac <memmove>
 8007756:	68a3      	ldr	r3, [r4, #8]
 8007758:	1b9b      	subs	r3, r3, r6
 800775a:	60a3      	str	r3, [r4, #8]
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	4433      	add	r3, r6
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	2000      	movs	r0, #0
 8007764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007768:	462a      	mov	r2, r5
 800776a:	f000 fad7 	bl	8007d1c <_realloc_r>
 800776e:	4606      	mov	r6, r0
 8007770:	2800      	cmp	r0, #0
 8007772:	d1e0      	bne.n	8007736 <__ssputs_r+0x5a>
 8007774:	6921      	ldr	r1, [r4, #16]
 8007776:	4650      	mov	r0, sl
 8007778:	f7ff feb8 	bl	80074ec <_free_r>
 800777c:	230c      	movs	r3, #12
 800777e:	f8ca 3000 	str.w	r3, [sl]
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007788:	81a3      	strh	r3, [r4, #12]
 800778a:	f04f 30ff 	mov.w	r0, #4294967295
 800778e:	e7e9      	b.n	8007764 <__ssputs_r+0x88>

08007790 <_svfiprintf_r>:
 8007790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007794:	4698      	mov	r8, r3
 8007796:	898b      	ldrh	r3, [r1, #12]
 8007798:	061b      	lsls	r3, r3, #24
 800779a:	b09d      	sub	sp, #116	; 0x74
 800779c:	4607      	mov	r7, r0
 800779e:	460d      	mov	r5, r1
 80077a0:	4614      	mov	r4, r2
 80077a2:	d50e      	bpl.n	80077c2 <_svfiprintf_r+0x32>
 80077a4:	690b      	ldr	r3, [r1, #16]
 80077a6:	b963      	cbnz	r3, 80077c2 <_svfiprintf_r+0x32>
 80077a8:	2140      	movs	r1, #64	; 0x40
 80077aa:	f7ff ff0b 	bl	80075c4 <_malloc_r>
 80077ae:	6028      	str	r0, [r5, #0]
 80077b0:	6128      	str	r0, [r5, #16]
 80077b2:	b920      	cbnz	r0, 80077be <_svfiprintf_r+0x2e>
 80077b4:	230c      	movs	r3, #12
 80077b6:	603b      	str	r3, [r7, #0]
 80077b8:	f04f 30ff 	mov.w	r0, #4294967295
 80077bc:	e0d0      	b.n	8007960 <_svfiprintf_r+0x1d0>
 80077be:	2340      	movs	r3, #64	; 0x40
 80077c0:	616b      	str	r3, [r5, #20]
 80077c2:	2300      	movs	r3, #0
 80077c4:	9309      	str	r3, [sp, #36]	; 0x24
 80077c6:	2320      	movs	r3, #32
 80077c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80077d0:	2330      	movs	r3, #48	; 0x30
 80077d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007978 <_svfiprintf_r+0x1e8>
 80077d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077da:	f04f 0901 	mov.w	r9, #1
 80077de:	4623      	mov	r3, r4
 80077e0:	469a      	mov	sl, r3
 80077e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077e6:	b10a      	cbz	r2, 80077ec <_svfiprintf_r+0x5c>
 80077e8:	2a25      	cmp	r2, #37	; 0x25
 80077ea:	d1f9      	bne.n	80077e0 <_svfiprintf_r+0x50>
 80077ec:	ebba 0b04 	subs.w	fp, sl, r4
 80077f0:	d00b      	beq.n	800780a <_svfiprintf_r+0x7a>
 80077f2:	465b      	mov	r3, fp
 80077f4:	4622      	mov	r2, r4
 80077f6:	4629      	mov	r1, r5
 80077f8:	4638      	mov	r0, r7
 80077fa:	f7ff ff6f 	bl	80076dc <__ssputs_r>
 80077fe:	3001      	adds	r0, #1
 8007800:	f000 80a9 	beq.w	8007956 <_svfiprintf_r+0x1c6>
 8007804:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007806:	445a      	add	r2, fp
 8007808:	9209      	str	r2, [sp, #36]	; 0x24
 800780a:	f89a 3000 	ldrb.w	r3, [sl]
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 80a1 	beq.w	8007956 <_svfiprintf_r+0x1c6>
 8007814:	2300      	movs	r3, #0
 8007816:	f04f 32ff 	mov.w	r2, #4294967295
 800781a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800781e:	f10a 0a01 	add.w	sl, sl, #1
 8007822:	9304      	str	r3, [sp, #16]
 8007824:	9307      	str	r3, [sp, #28]
 8007826:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800782a:	931a      	str	r3, [sp, #104]	; 0x68
 800782c:	4654      	mov	r4, sl
 800782e:	2205      	movs	r2, #5
 8007830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007834:	4850      	ldr	r0, [pc, #320]	; (8007978 <_svfiprintf_r+0x1e8>)
 8007836:	f7f8 fd0b 	bl	8000250 <memchr>
 800783a:	9a04      	ldr	r2, [sp, #16]
 800783c:	b9d8      	cbnz	r0, 8007876 <_svfiprintf_r+0xe6>
 800783e:	06d0      	lsls	r0, r2, #27
 8007840:	bf44      	itt	mi
 8007842:	2320      	movmi	r3, #32
 8007844:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007848:	0711      	lsls	r1, r2, #28
 800784a:	bf44      	itt	mi
 800784c:	232b      	movmi	r3, #43	; 0x2b
 800784e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007852:	f89a 3000 	ldrb.w	r3, [sl]
 8007856:	2b2a      	cmp	r3, #42	; 0x2a
 8007858:	d015      	beq.n	8007886 <_svfiprintf_r+0xf6>
 800785a:	9a07      	ldr	r2, [sp, #28]
 800785c:	4654      	mov	r4, sl
 800785e:	2000      	movs	r0, #0
 8007860:	f04f 0c0a 	mov.w	ip, #10
 8007864:	4621      	mov	r1, r4
 8007866:	f811 3b01 	ldrb.w	r3, [r1], #1
 800786a:	3b30      	subs	r3, #48	; 0x30
 800786c:	2b09      	cmp	r3, #9
 800786e:	d94d      	bls.n	800790c <_svfiprintf_r+0x17c>
 8007870:	b1b0      	cbz	r0, 80078a0 <_svfiprintf_r+0x110>
 8007872:	9207      	str	r2, [sp, #28]
 8007874:	e014      	b.n	80078a0 <_svfiprintf_r+0x110>
 8007876:	eba0 0308 	sub.w	r3, r0, r8
 800787a:	fa09 f303 	lsl.w	r3, r9, r3
 800787e:	4313      	orrs	r3, r2
 8007880:	9304      	str	r3, [sp, #16]
 8007882:	46a2      	mov	sl, r4
 8007884:	e7d2      	b.n	800782c <_svfiprintf_r+0x9c>
 8007886:	9b03      	ldr	r3, [sp, #12]
 8007888:	1d19      	adds	r1, r3, #4
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	9103      	str	r1, [sp, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	bfbb      	ittet	lt
 8007892:	425b      	neglt	r3, r3
 8007894:	f042 0202 	orrlt.w	r2, r2, #2
 8007898:	9307      	strge	r3, [sp, #28]
 800789a:	9307      	strlt	r3, [sp, #28]
 800789c:	bfb8      	it	lt
 800789e:	9204      	strlt	r2, [sp, #16]
 80078a0:	7823      	ldrb	r3, [r4, #0]
 80078a2:	2b2e      	cmp	r3, #46	; 0x2e
 80078a4:	d10c      	bne.n	80078c0 <_svfiprintf_r+0x130>
 80078a6:	7863      	ldrb	r3, [r4, #1]
 80078a8:	2b2a      	cmp	r3, #42	; 0x2a
 80078aa:	d134      	bne.n	8007916 <_svfiprintf_r+0x186>
 80078ac:	9b03      	ldr	r3, [sp, #12]
 80078ae:	1d1a      	adds	r2, r3, #4
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	9203      	str	r2, [sp, #12]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	bfb8      	it	lt
 80078b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80078bc:	3402      	adds	r4, #2
 80078be:	9305      	str	r3, [sp, #20]
 80078c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007988 <_svfiprintf_r+0x1f8>
 80078c4:	7821      	ldrb	r1, [r4, #0]
 80078c6:	2203      	movs	r2, #3
 80078c8:	4650      	mov	r0, sl
 80078ca:	f7f8 fcc1 	bl	8000250 <memchr>
 80078ce:	b138      	cbz	r0, 80078e0 <_svfiprintf_r+0x150>
 80078d0:	9b04      	ldr	r3, [sp, #16]
 80078d2:	eba0 000a 	sub.w	r0, r0, sl
 80078d6:	2240      	movs	r2, #64	; 0x40
 80078d8:	4082      	lsls	r2, r0
 80078da:	4313      	orrs	r3, r2
 80078dc:	3401      	adds	r4, #1
 80078de:	9304      	str	r3, [sp, #16]
 80078e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078e4:	4825      	ldr	r0, [pc, #148]	; (800797c <_svfiprintf_r+0x1ec>)
 80078e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078ea:	2206      	movs	r2, #6
 80078ec:	f7f8 fcb0 	bl	8000250 <memchr>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	d038      	beq.n	8007966 <_svfiprintf_r+0x1d6>
 80078f4:	4b22      	ldr	r3, [pc, #136]	; (8007980 <_svfiprintf_r+0x1f0>)
 80078f6:	bb1b      	cbnz	r3, 8007940 <_svfiprintf_r+0x1b0>
 80078f8:	9b03      	ldr	r3, [sp, #12]
 80078fa:	3307      	adds	r3, #7
 80078fc:	f023 0307 	bic.w	r3, r3, #7
 8007900:	3308      	adds	r3, #8
 8007902:	9303      	str	r3, [sp, #12]
 8007904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007906:	4433      	add	r3, r6
 8007908:	9309      	str	r3, [sp, #36]	; 0x24
 800790a:	e768      	b.n	80077de <_svfiprintf_r+0x4e>
 800790c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007910:	460c      	mov	r4, r1
 8007912:	2001      	movs	r0, #1
 8007914:	e7a6      	b.n	8007864 <_svfiprintf_r+0xd4>
 8007916:	2300      	movs	r3, #0
 8007918:	3401      	adds	r4, #1
 800791a:	9305      	str	r3, [sp, #20]
 800791c:	4619      	mov	r1, r3
 800791e:	f04f 0c0a 	mov.w	ip, #10
 8007922:	4620      	mov	r0, r4
 8007924:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007928:	3a30      	subs	r2, #48	; 0x30
 800792a:	2a09      	cmp	r2, #9
 800792c:	d903      	bls.n	8007936 <_svfiprintf_r+0x1a6>
 800792e:	2b00      	cmp	r3, #0
 8007930:	d0c6      	beq.n	80078c0 <_svfiprintf_r+0x130>
 8007932:	9105      	str	r1, [sp, #20]
 8007934:	e7c4      	b.n	80078c0 <_svfiprintf_r+0x130>
 8007936:	fb0c 2101 	mla	r1, ip, r1, r2
 800793a:	4604      	mov	r4, r0
 800793c:	2301      	movs	r3, #1
 800793e:	e7f0      	b.n	8007922 <_svfiprintf_r+0x192>
 8007940:	ab03      	add	r3, sp, #12
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	462a      	mov	r2, r5
 8007946:	4b0f      	ldr	r3, [pc, #60]	; (8007984 <_svfiprintf_r+0x1f4>)
 8007948:	a904      	add	r1, sp, #16
 800794a:	4638      	mov	r0, r7
 800794c:	f3af 8000 	nop.w
 8007950:	1c42      	adds	r2, r0, #1
 8007952:	4606      	mov	r6, r0
 8007954:	d1d6      	bne.n	8007904 <_svfiprintf_r+0x174>
 8007956:	89ab      	ldrh	r3, [r5, #12]
 8007958:	065b      	lsls	r3, r3, #25
 800795a:	f53f af2d 	bmi.w	80077b8 <_svfiprintf_r+0x28>
 800795e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007960:	b01d      	add	sp, #116	; 0x74
 8007962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007966:	ab03      	add	r3, sp, #12
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	462a      	mov	r2, r5
 800796c:	4b05      	ldr	r3, [pc, #20]	; (8007984 <_svfiprintf_r+0x1f4>)
 800796e:	a904      	add	r1, sp, #16
 8007970:	4638      	mov	r0, r7
 8007972:	f000 f879 	bl	8007a68 <_printf_i>
 8007976:	e7eb      	b.n	8007950 <_svfiprintf_r+0x1c0>
 8007978:	08007dc8 	.word	0x08007dc8
 800797c:	08007dd2 	.word	0x08007dd2
 8007980:	00000000 	.word	0x00000000
 8007984:	080076dd 	.word	0x080076dd
 8007988:	08007dce 	.word	0x08007dce

0800798c <_printf_common>:
 800798c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007990:	4616      	mov	r6, r2
 8007992:	4699      	mov	r9, r3
 8007994:	688a      	ldr	r2, [r1, #8]
 8007996:	690b      	ldr	r3, [r1, #16]
 8007998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800799c:	4293      	cmp	r3, r2
 800799e:	bfb8      	it	lt
 80079a0:	4613      	movlt	r3, r2
 80079a2:	6033      	str	r3, [r6, #0]
 80079a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079a8:	4607      	mov	r7, r0
 80079aa:	460c      	mov	r4, r1
 80079ac:	b10a      	cbz	r2, 80079b2 <_printf_common+0x26>
 80079ae:	3301      	adds	r3, #1
 80079b0:	6033      	str	r3, [r6, #0]
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	0699      	lsls	r1, r3, #26
 80079b6:	bf42      	ittt	mi
 80079b8:	6833      	ldrmi	r3, [r6, #0]
 80079ba:	3302      	addmi	r3, #2
 80079bc:	6033      	strmi	r3, [r6, #0]
 80079be:	6825      	ldr	r5, [r4, #0]
 80079c0:	f015 0506 	ands.w	r5, r5, #6
 80079c4:	d106      	bne.n	80079d4 <_printf_common+0x48>
 80079c6:	f104 0a19 	add.w	sl, r4, #25
 80079ca:	68e3      	ldr	r3, [r4, #12]
 80079cc:	6832      	ldr	r2, [r6, #0]
 80079ce:	1a9b      	subs	r3, r3, r2
 80079d0:	42ab      	cmp	r3, r5
 80079d2:	dc26      	bgt.n	8007a22 <_printf_common+0x96>
 80079d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079d8:	1e13      	subs	r3, r2, #0
 80079da:	6822      	ldr	r2, [r4, #0]
 80079dc:	bf18      	it	ne
 80079de:	2301      	movne	r3, #1
 80079e0:	0692      	lsls	r2, r2, #26
 80079e2:	d42b      	bmi.n	8007a3c <_printf_common+0xb0>
 80079e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079e8:	4649      	mov	r1, r9
 80079ea:	4638      	mov	r0, r7
 80079ec:	47c0      	blx	r8
 80079ee:	3001      	adds	r0, #1
 80079f0:	d01e      	beq.n	8007a30 <_printf_common+0xa4>
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	6922      	ldr	r2, [r4, #16]
 80079f6:	f003 0306 	and.w	r3, r3, #6
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	bf02      	ittt	eq
 80079fe:	68e5      	ldreq	r5, [r4, #12]
 8007a00:	6833      	ldreq	r3, [r6, #0]
 8007a02:	1aed      	subeq	r5, r5, r3
 8007a04:	68a3      	ldr	r3, [r4, #8]
 8007a06:	bf0c      	ite	eq
 8007a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a0c:	2500      	movne	r5, #0
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	bfc4      	itt	gt
 8007a12:	1a9b      	subgt	r3, r3, r2
 8007a14:	18ed      	addgt	r5, r5, r3
 8007a16:	2600      	movs	r6, #0
 8007a18:	341a      	adds	r4, #26
 8007a1a:	42b5      	cmp	r5, r6
 8007a1c:	d11a      	bne.n	8007a54 <_printf_common+0xc8>
 8007a1e:	2000      	movs	r0, #0
 8007a20:	e008      	b.n	8007a34 <_printf_common+0xa8>
 8007a22:	2301      	movs	r3, #1
 8007a24:	4652      	mov	r2, sl
 8007a26:	4649      	mov	r1, r9
 8007a28:	4638      	mov	r0, r7
 8007a2a:	47c0      	blx	r8
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	d103      	bne.n	8007a38 <_printf_common+0xac>
 8007a30:	f04f 30ff 	mov.w	r0, #4294967295
 8007a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a38:	3501      	adds	r5, #1
 8007a3a:	e7c6      	b.n	80079ca <_printf_common+0x3e>
 8007a3c:	18e1      	adds	r1, r4, r3
 8007a3e:	1c5a      	adds	r2, r3, #1
 8007a40:	2030      	movs	r0, #48	; 0x30
 8007a42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a46:	4422      	add	r2, r4
 8007a48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a50:	3302      	adds	r3, #2
 8007a52:	e7c7      	b.n	80079e4 <_printf_common+0x58>
 8007a54:	2301      	movs	r3, #1
 8007a56:	4622      	mov	r2, r4
 8007a58:	4649      	mov	r1, r9
 8007a5a:	4638      	mov	r0, r7
 8007a5c:	47c0      	blx	r8
 8007a5e:	3001      	adds	r0, #1
 8007a60:	d0e6      	beq.n	8007a30 <_printf_common+0xa4>
 8007a62:	3601      	adds	r6, #1
 8007a64:	e7d9      	b.n	8007a1a <_printf_common+0x8e>
	...

08007a68 <_printf_i>:
 8007a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a6c:	7e0f      	ldrb	r7, [r1, #24]
 8007a6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a70:	2f78      	cmp	r7, #120	; 0x78
 8007a72:	4691      	mov	r9, r2
 8007a74:	4680      	mov	r8, r0
 8007a76:	460c      	mov	r4, r1
 8007a78:	469a      	mov	sl, r3
 8007a7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a7e:	d807      	bhi.n	8007a90 <_printf_i+0x28>
 8007a80:	2f62      	cmp	r7, #98	; 0x62
 8007a82:	d80a      	bhi.n	8007a9a <_printf_i+0x32>
 8007a84:	2f00      	cmp	r7, #0
 8007a86:	f000 80d4 	beq.w	8007c32 <_printf_i+0x1ca>
 8007a8a:	2f58      	cmp	r7, #88	; 0x58
 8007a8c:	f000 80c0 	beq.w	8007c10 <_printf_i+0x1a8>
 8007a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a98:	e03a      	b.n	8007b10 <_printf_i+0xa8>
 8007a9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a9e:	2b15      	cmp	r3, #21
 8007aa0:	d8f6      	bhi.n	8007a90 <_printf_i+0x28>
 8007aa2:	a101      	add	r1, pc, #4	; (adr r1, 8007aa8 <_printf_i+0x40>)
 8007aa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007aa8:	08007b01 	.word	0x08007b01
 8007aac:	08007b15 	.word	0x08007b15
 8007ab0:	08007a91 	.word	0x08007a91
 8007ab4:	08007a91 	.word	0x08007a91
 8007ab8:	08007a91 	.word	0x08007a91
 8007abc:	08007a91 	.word	0x08007a91
 8007ac0:	08007b15 	.word	0x08007b15
 8007ac4:	08007a91 	.word	0x08007a91
 8007ac8:	08007a91 	.word	0x08007a91
 8007acc:	08007a91 	.word	0x08007a91
 8007ad0:	08007a91 	.word	0x08007a91
 8007ad4:	08007c19 	.word	0x08007c19
 8007ad8:	08007b41 	.word	0x08007b41
 8007adc:	08007bd3 	.word	0x08007bd3
 8007ae0:	08007a91 	.word	0x08007a91
 8007ae4:	08007a91 	.word	0x08007a91
 8007ae8:	08007c3b 	.word	0x08007c3b
 8007aec:	08007a91 	.word	0x08007a91
 8007af0:	08007b41 	.word	0x08007b41
 8007af4:	08007a91 	.word	0x08007a91
 8007af8:	08007a91 	.word	0x08007a91
 8007afc:	08007bdb 	.word	0x08007bdb
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	1d1a      	adds	r2, r3, #4
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	602a      	str	r2, [r5, #0]
 8007b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b10:	2301      	movs	r3, #1
 8007b12:	e09f      	b.n	8007c54 <_printf_i+0x1ec>
 8007b14:	6820      	ldr	r0, [r4, #0]
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	0607      	lsls	r7, r0, #24
 8007b1a:	f103 0104 	add.w	r1, r3, #4
 8007b1e:	6029      	str	r1, [r5, #0]
 8007b20:	d501      	bpl.n	8007b26 <_printf_i+0xbe>
 8007b22:	681e      	ldr	r6, [r3, #0]
 8007b24:	e003      	b.n	8007b2e <_printf_i+0xc6>
 8007b26:	0646      	lsls	r6, r0, #25
 8007b28:	d5fb      	bpl.n	8007b22 <_printf_i+0xba>
 8007b2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b2e:	2e00      	cmp	r6, #0
 8007b30:	da03      	bge.n	8007b3a <_printf_i+0xd2>
 8007b32:	232d      	movs	r3, #45	; 0x2d
 8007b34:	4276      	negs	r6, r6
 8007b36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b3a:	485a      	ldr	r0, [pc, #360]	; (8007ca4 <_printf_i+0x23c>)
 8007b3c:	230a      	movs	r3, #10
 8007b3e:	e012      	b.n	8007b66 <_printf_i+0xfe>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	6820      	ldr	r0, [r4, #0]
 8007b44:	1d19      	adds	r1, r3, #4
 8007b46:	6029      	str	r1, [r5, #0]
 8007b48:	0605      	lsls	r5, r0, #24
 8007b4a:	d501      	bpl.n	8007b50 <_printf_i+0xe8>
 8007b4c:	681e      	ldr	r6, [r3, #0]
 8007b4e:	e002      	b.n	8007b56 <_printf_i+0xee>
 8007b50:	0641      	lsls	r1, r0, #25
 8007b52:	d5fb      	bpl.n	8007b4c <_printf_i+0xe4>
 8007b54:	881e      	ldrh	r6, [r3, #0]
 8007b56:	4853      	ldr	r0, [pc, #332]	; (8007ca4 <_printf_i+0x23c>)
 8007b58:	2f6f      	cmp	r7, #111	; 0x6f
 8007b5a:	bf0c      	ite	eq
 8007b5c:	2308      	moveq	r3, #8
 8007b5e:	230a      	movne	r3, #10
 8007b60:	2100      	movs	r1, #0
 8007b62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b66:	6865      	ldr	r5, [r4, #4]
 8007b68:	60a5      	str	r5, [r4, #8]
 8007b6a:	2d00      	cmp	r5, #0
 8007b6c:	bfa2      	ittt	ge
 8007b6e:	6821      	ldrge	r1, [r4, #0]
 8007b70:	f021 0104 	bicge.w	r1, r1, #4
 8007b74:	6021      	strge	r1, [r4, #0]
 8007b76:	b90e      	cbnz	r6, 8007b7c <_printf_i+0x114>
 8007b78:	2d00      	cmp	r5, #0
 8007b7a:	d04b      	beq.n	8007c14 <_printf_i+0x1ac>
 8007b7c:	4615      	mov	r5, r2
 8007b7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b82:	fb03 6711 	mls	r7, r3, r1, r6
 8007b86:	5dc7      	ldrb	r7, [r0, r7]
 8007b88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b8c:	4637      	mov	r7, r6
 8007b8e:	42bb      	cmp	r3, r7
 8007b90:	460e      	mov	r6, r1
 8007b92:	d9f4      	bls.n	8007b7e <_printf_i+0x116>
 8007b94:	2b08      	cmp	r3, #8
 8007b96:	d10b      	bne.n	8007bb0 <_printf_i+0x148>
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	07de      	lsls	r6, r3, #31
 8007b9c:	d508      	bpl.n	8007bb0 <_printf_i+0x148>
 8007b9e:	6923      	ldr	r3, [r4, #16]
 8007ba0:	6861      	ldr	r1, [r4, #4]
 8007ba2:	4299      	cmp	r1, r3
 8007ba4:	bfde      	ittt	le
 8007ba6:	2330      	movle	r3, #48	; 0x30
 8007ba8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bb0:	1b52      	subs	r2, r2, r5
 8007bb2:	6122      	str	r2, [r4, #16]
 8007bb4:	f8cd a000 	str.w	sl, [sp]
 8007bb8:	464b      	mov	r3, r9
 8007bba:	aa03      	add	r2, sp, #12
 8007bbc:	4621      	mov	r1, r4
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	f7ff fee4 	bl	800798c <_printf_common>
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	d14a      	bne.n	8007c5e <_printf_i+0x1f6>
 8007bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bcc:	b004      	add	sp, #16
 8007bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	f043 0320 	orr.w	r3, r3, #32
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	4833      	ldr	r0, [pc, #204]	; (8007ca8 <_printf_i+0x240>)
 8007bdc:	2778      	movs	r7, #120	; 0x78
 8007bde:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	6829      	ldr	r1, [r5, #0]
 8007be6:	061f      	lsls	r7, r3, #24
 8007be8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bec:	d402      	bmi.n	8007bf4 <_printf_i+0x18c>
 8007bee:	065f      	lsls	r7, r3, #25
 8007bf0:	bf48      	it	mi
 8007bf2:	b2b6      	uxthmi	r6, r6
 8007bf4:	07df      	lsls	r7, r3, #31
 8007bf6:	bf48      	it	mi
 8007bf8:	f043 0320 	orrmi.w	r3, r3, #32
 8007bfc:	6029      	str	r1, [r5, #0]
 8007bfe:	bf48      	it	mi
 8007c00:	6023      	strmi	r3, [r4, #0]
 8007c02:	b91e      	cbnz	r6, 8007c0c <_printf_i+0x1a4>
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	f023 0320 	bic.w	r3, r3, #32
 8007c0a:	6023      	str	r3, [r4, #0]
 8007c0c:	2310      	movs	r3, #16
 8007c0e:	e7a7      	b.n	8007b60 <_printf_i+0xf8>
 8007c10:	4824      	ldr	r0, [pc, #144]	; (8007ca4 <_printf_i+0x23c>)
 8007c12:	e7e4      	b.n	8007bde <_printf_i+0x176>
 8007c14:	4615      	mov	r5, r2
 8007c16:	e7bd      	b.n	8007b94 <_printf_i+0x12c>
 8007c18:	682b      	ldr	r3, [r5, #0]
 8007c1a:	6826      	ldr	r6, [r4, #0]
 8007c1c:	6961      	ldr	r1, [r4, #20]
 8007c1e:	1d18      	adds	r0, r3, #4
 8007c20:	6028      	str	r0, [r5, #0]
 8007c22:	0635      	lsls	r5, r6, #24
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	d501      	bpl.n	8007c2c <_printf_i+0x1c4>
 8007c28:	6019      	str	r1, [r3, #0]
 8007c2a:	e002      	b.n	8007c32 <_printf_i+0x1ca>
 8007c2c:	0670      	lsls	r0, r6, #25
 8007c2e:	d5fb      	bpl.n	8007c28 <_printf_i+0x1c0>
 8007c30:	8019      	strh	r1, [r3, #0]
 8007c32:	2300      	movs	r3, #0
 8007c34:	6123      	str	r3, [r4, #16]
 8007c36:	4615      	mov	r5, r2
 8007c38:	e7bc      	b.n	8007bb4 <_printf_i+0x14c>
 8007c3a:	682b      	ldr	r3, [r5, #0]
 8007c3c:	1d1a      	adds	r2, r3, #4
 8007c3e:	602a      	str	r2, [r5, #0]
 8007c40:	681d      	ldr	r5, [r3, #0]
 8007c42:	6862      	ldr	r2, [r4, #4]
 8007c44:	2100      	movs	r1, #0
 8007c46:	4628      	mov	r0, r5
 8007c48:	f7f8 fb02 	bl	8000250 <memchr>
 8007c4c:	b108      	cbz	r0, 8007c52 <_printf_i+0x1ea>
 8007c4e:	1b40      	subs	r0, r0, r5
 8007c50:	6060      	str	r0, [r4, #4]
 8007c52:	6863      	ldr	r3, [r4, #4]
 8007c54:	6123      	str	r3, [r4, #16]
 8007c56:	2300      	movs	r3, #0
 8007c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c5c:	e7aa      	b.n	8007bb4 <_printf_i+0x14c>
 8007c5e:	6923      	ldr	r3, [r4, #16]
 8007c60:	462a      	mov	r2, r5
 8007c62:	4649      	mov	r1, r9
 8007c64:	4640      	mov	r0, r8
 8007c66:	47d0      	blx	sl
 8007c68:	3001      	adds	r0, #1
 8007c6a:	d0ad      	beq.n	8007bc8 <_printf_i+0x160>
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	079b      	lsls	r3, r3, #30
 8007c70:	d413      	bmi.n	8007c9a <_printf_i+0x232>
 8007c72:	68e0      	ldr	r0, [r4, #12]
 8007c74:	9b03      	ldr	r3, [sp, #12]
 8007c76:	4298      	cmp	r0, r3
 8007c78:	bfb8      	it	lt
 8007c7a:	4618      	movlt	r0, r3
 8007c7c:	e7a6      	b.n	8007bcc <_printf_i+0x164>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	4632      	mov	r2, r6
 8007c82:	4649      	mov	r1, r9
 8007c84:	4640      	mov	r0, r8
 8007c86:	47d0      	blx	sl
 8007c88:	3001      	adds	r0, #1
 8007c8a:	d09d      	beq.n	8007bc8 <_printf_i+0x160>
 8007c8c:	3501      	adds	r5, #1
 8007c8e:	68e3      	ldr	r3, [r4, #12]
 8007c90:	9903      	ldr	r1, [sp, #12]
 8007c92:	1a5b      	subs	r3, r3, r1
 8007c94:	42ab      	cmp	r3, r5
 8007c96:	dcf2      	bgt.n	8007c7e <_printf_i+0x216>
 8007c98:	e7eb      	b.n	8007c72 <_printf_i+0x20a>
 8007c9a:	2500      	movs	r5, #0
 8007c9c:	f104 0619 	add.w	r6, r4, #25
 8007ca0:	e7f5      	b.n	8007c8e <_printf_i+0x226>
 8007ca2:	bf00      	nop
 8007ca4:	08007dd9 	.word	0x08007dd9
 8007ca8:	08007dea 	.word	0x08007dea

08007cac <memmove>:
 8007cac:	4288      	cmp	r0, r1
 8007cae:	b510      	push	{r4, lr}
 8007cb0:	eb01 0402 	add.w	r4, r1, r2
 8007cb4:	d902      	bls.n	8007cbc <memmove+0x10>
 8007cb6:	4284      	cmp	r4, r0
 8007cb8:	4623      	mov	r3, r4
 8007cba:	d807      	bhi.n	8007ccc <memmove+0x20>
 8007cbc:	1e43      	subs	r3, r0, #1
 8007cbe:	42a1      	cmp	r1, r4
 8007cc0:	d008      	beq.n	8007cd4 <memmove+0x28>
 8007cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cca:	e7f8      	b.n	8007cbe <memmove+0x12>
 8007ccc:	4402      	add	r2, r0
 8007cce:	4601      	mov	r1, r0
 8007cd0:	428a      	cmp	r2, r1
 8007cd2:	d100      	bne.n	8007cd6 <memmove+0x2a>
 8007cd4:	bd10      	pop	{r4, pc}
 8007cd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cde:	e7f7      	b.n	8007cd0 <memmove+0x24>

08007ce0 <_sbrk_r>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	4d06      	ldr	r5, [pc, #24]	; (8007cfc <_sbrk_r+0x1c>)
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	4608      	mov	r0, r1
 8007cea:	602b      	str	r3, [r5, #0]
 8007cec:	f7fa f808 	bl	8001d00 <_sbrk>
 8007cf0:	1c43      	adds	r3, r0, #1
 8007cf2:	d102      	bne.n	8007cfa <_sbrk_r+0x1a>
 8007cf4:	682b      	ldr	r3, [r5, #0]
 8007cf6:	b103      	cbz	r3, 8007cfa <_sbrk_r+0x1a>
 8007cf8:	6023      	str	r3, [r4, #0]
 8007cfa:	bd38      	pop	{r3, r4, r5, pc}
 8007cfc:	20000978 	.word	0x20000978

08007d00 <memcpy>:
 8007d00:	440a      	add	r2, r1
 8007d02:	4291      	cmp	r1, r2
 8007d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d08:	d100      	bne.n	8007d0c <memcpy+0xc>
 8007d0a:	4770      	bx	lr
 8007d0c:	b510      	push	{r4, lr}
 8007d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d16:	4291      	cmp	r1, r2
 8007d18:	d1f9      	bne.n	8007d0e <memcpy+0xe>
 8007d1a:	bd10      	pop	{r4, pc}

08007d1c <_realloc_r>:
 8007d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d20:	4680      	mov	r8, r0
 8007d22:	4614      	mov	r4, r2
 8007d24:	460e      	mov	r6, r1
 8007d26:	b921      	cbnz	r1, 8007d32 <_realloc_r+0x16>
 8007d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d2c:	4611      	mov	r1, r2
 8007d2e:	f7ff bc49 	b.w	80075c4 <_malloc_r>
 8007d32:	b92a      	cbnz	r2, 8007d40 <_realloc_r+0x24>
 8007d34:	f7ff fbda 	bl	80074ec <_free_r>
 8007d38:	4625      	mov	r5, r4
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d40:	f000 f81b 	bl	8007d7a <_malloc_usable_size_r>
 8007d44:	4284      	cmp	r4, r0
 8007d46:	4607      	mov	r7, r0
 8007d48:	d802      	bhi.n	8007d50 <_realloc_r+0x34>
 8007d4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d4e:	d812      	bhi.n	8007d76 <_realloc_r+0x5a>
 8007d50:	4621      	mov	r1, r4
 8007d52:	4640      	mov	r0, r8
 8007d54:	f7ff fc36 	bl	80075c4 <_malloc_r>
 8007d58:	4605      	mov	r5, r0
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d0ed      	beq.n	8007d3a <_realloc_r+0x1e>
 8007d5e:	42bc      	cmp	r4, r7
 8007d60:	4622      	mov	r2, r4
 8007d62:	4631      	mov	r1, r6
 8007d64:	bf28      	it	cs
 8007d66:	463a      	movcs	r2, r7
 8007d68:	f7ff ffca 	bl	8007d00 <memcpy>
 8007d6c:	4631      	mov	r1, r6
 8007d6e:	4640      	mov	r0, r8
 8007d70:	f7ff fbbc 	bl	80074ec <_free_r>
 8007d74:	e7e1      	b.n	8007d3a <_realloc_r+0x1e>
 8007d76:	4635      	mov	r5, r6
 8007d78:	e7df      	b.n	8007d3a <_realloc_r+0x1e>

08007d7a <_malloc_usable_size_r>:
 8007d7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d7e:	1f18      	subs	r0, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	bfbc      	itt	lt
 8007d84:	580b      	ldrlt	r3, [r1, r0]
 8007d86:	18c0      	addlt	r0, r0, r3
 8007d88:	4770      	bx	lr
	...

08007d8c <_init>:
 8007d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8e:	bf00      	nop
 8007d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d92:	bc08      	pop	{r3}
 8007d94:	469e      	mov	lr, r3
 8007d96:	4770      	bx	lr

08007d98 <_fini>:
 8007d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9a:	bf00      	nop
 8007d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9e:	bc08      	pop	{r3}
 8007da0:	469e      	mov	lr, r3
 8007da2:	4770      	bx	lr
